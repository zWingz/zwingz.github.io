<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[zWing]]></title><description><![CDATA[Just a blog.]]></description><link>http://zwingz.github.io</link><image><url>http://zwingz.github.io/favicon.ico</url><title>zWing</title><link>http://zwingz.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Tue, 30 Aug 2022 22:31:41 GMT</lastBuildDate><atom:link href="http://zwingz.github.io/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 30 Aug 2022 22:31:41 GMT</pubDate><webMaster><![CDATA[zWingz]]></webMaster><item><title><![CDATA[使用vuex-ts-enhance提升vuex的使用体验]]></title><description><![CDATA[<h2 id="背景" class="heading"><a href="#%E8%83%8C%E6%99%AF" aria-hidden="true"><span class="icon icon-link"></span></a>背景</h2>
<p><code class="language-text">vuex</code>对<code class="language-text">ts</code>支持并不友好, 我们定义了一堆<code class="language-text">state</code>, 但是在使用<code class="language-text">mapXXX</code>方法的时候并不知道有哪些<code class="language-text">namespace</code>以及有哪些<code class="language-text">getters</code>或者<code class="language-text">actions</code>可以获取</p>
<p>而<a href="https://github.com/zwingz/vuex-ts-enhance">vuex-ts-enhance</a>, 借助<code class="language-text">ts</code>的类型推导功能，在使用<code class="language-text">vuex</code>时能提供<code class="language-text">state</code>, <code class="language-text">actions</code>, <code class="language-text">getters</code>, <code class="language-text">mutations</code>和<code class="language-text">dispatch</code>的类型推导。解决了上述问题</p>
<h2 id="简单使用" class="heading"><a href="#%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>简单使用</h2>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> EnhanceStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-ts-enhance'</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  state<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// rootState</span>
    root<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">rootGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// rootActions</span>
    <span class="token function">setRoot</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">setRoot</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  modules<span class="token operator">:</span> <span class="token punctuation">{</span>
    sub<span class="token operator">:</span> <span class="token punctuation">{</span>
      namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      state<span class="token operator">:</span> <span class="token punctuation">{</span>
        substate<span class="token operator">:</span> <span class="token string">''</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      actions<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">setSubState</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      mutations<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">setSubState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> payload<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      getters<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">suGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token number">2</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> mapGetters<span class="token punctuation">,</span> store<span class="token punctuation">,</span> mapActions<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapState <span class="token punctuation">}</span> <span class="token operator">=</span> s
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  store
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>这样就能完成初始化, 其实就是把<code class="language-text">state</code>传入构造器中, 所返回的<code class="language-text">mapXXXX</code>方法都带有类型推导, 并且能明确知道某个<code class="language-text">namespaced</code>下有哪些数据或者方法能获取.</p>
<p>接下来看下<code class="language-text">vscode</code>的提示</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1591967951648.png"></p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1591968518830.png"></p>
<p>能看到<code class="language-text">mapGetters</code>中有<code class="language-text">rootGet</code>这一个<code class="language-text">rootGetters</code>, 而且在使用时还能推导出其类型</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1591968014075.png"></p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1591968044747.png"></p>
<p>同样能看到<code class="language-text">mapActions</code>中有<code class="language-text">sub</code>这一个<code class="language-text">namespace</code>, 以及里面拥有<code class="language-text">setSubState</code>这一个方法</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1591968103477.png">
当我们调用这个方法时也能有参数提示</p>
<p>而对于<code class="language-text">dispatch</code>, 只能通过<code class="language-text">import</code>进来使用
<img src="https://raw.githubusercontent.com/zWingz/imgur/master/1591968245379.png"></p>
<p>使用示例
<code class="language-text">dispatch(namespace, actions, payload)</code> 或者 <code class="language-text">dispatch(rootActions, payload)</code></p>
<p>目前还不支持<code class="language-text">dispatch</code>的<code class="language-text">payload</code>的类型推导, 后续会增加</p>
<p>完整代码</p>
<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters<span class="token punctuation">,</span> mapActions<span class="token punctuation">,</span> mapState<span class="token punctuation">,</span> mapMutations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store'</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    computed<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'rootGet'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rootGet <span class="token comment">// type number</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>setSubState <span class="token comment">// type (payload: number) => Promise&lt;void></span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'sub'</span><span class="token punctuation">,</span> <span class="token string">'setSubState'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'sub'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'setSubState'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>以上类型推导同时支持<code class="language-text">mapGetters</code>, <code class="language-text">mapActions</code>, <code class="language-text">mapState</code>, <code class="language-text">mapMutations</code>, <code class="language-text">dispatch</code></p>
<h2 id="注意" class="heading"><a href="#%E6%B3%A8%E6%84%8F" aria-hidden="true"><span class="icon icon-link"></span></a>注意</h2>
<ul>
<li>如果你使用<code class="language-text">typescript</code>, 请不要把<code class="language-text">state</code>定义成<code class="language-text">StoreOptions</code>, 因为这样会让类型推导失效</li>
</ul>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> state<span class="token operator">:</span> StoreOptions<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// don't do that</span>
</code></pre></div>
<ul>
<li>如果你用<code class="language-text">js</code>, 并且使用了<code class="language-text">jsdoc</code>来定义来写, 请务必把<code class="language-text">context</code>定义为<code class="language-text">any</code>, 否则类型检查会失效</li>
</ul>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * @param {any} context
     * @param {string} payload
     */</span>
    <span class="token function">someActions</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2 id="end" class="heading"><a href="#end" aria-hidden="true"><span class="icon icon-link"></span></a>End</h2>
<p>以上代码是基于<code class="language-text">lant=ts</code>下有的提示, 但如果是在<code class="language-text">lang=js</code>下, <code class="language-text">vetur</code>有时能提示类型, 又是又不能提示类型，详情见<a href="https://github.com/vuejs/vetur/issues/1509">issue</a>。暂且找不到问题所在。但<code class="language-text">mapXXXX</code>方法的提示还依然生效, 因为他不依赖<code class="language-text">vetur</code></p>
]]></description><link>http://zwingz.github.io/posts/637751719.html</link><guid isPermaLink="false">637751719</guid><category><![CDATA[Vue]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Fri, 12 Jun 2020 13:30:10 GMT</pubDate></item><item><title><![CDATA[利用泛型+类型推导定义伪GraphQL模型]]></title><description><![CDATA[<p>接触过前端的应该都有听过<a href="https://graphql.org/">GraphQL</a></p>
<p>简单来说就是前端自行定义接口所需要返回的数据, 想要尝试的可以试着调用<a href="https://developer.github.com/v4/">GithubAPI V4</a>.</p>
<p>而对于我们常用的<code class="language-text">xhr</code>请求能否也做到跟<code class="language-text">GraphQL</code>一样能自定义接口返回的数据? </p>
<p>答案是可以, 但是提前必须是后端必须提供足够的数据让前端自行选择.</p>
<h2 id="例子" class="heading"><a href="#%E4%BE%8B%E5%AD%90" aria-hidden="true"><span class="icon icon-link"></span></a>例子</h2>
<p>假设目前后端定义了一个<code class="language-text">User</code>模型, 包含了十几项数据</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Example</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">,</span>
    username<span class="token punctuation">,</span>
    created<span class="token punctuation">,</span>
    updated<span class="token punctuation">,</span>
    <span class="token comment">// .. 省略好几个人</span>
<span class="token punctuation">}</span></code></pre></div>
<p>任何接口如果有涉及到拿<code class="language-text">User</code>数据的, 都会把该<code class="language-text">User</code>的数据全量返回, 也就是说前端能从接口中拿到<code class="language-text">User</code>相关的十多项数据.</p>
<p>但实际上并不是每个接口都需要这么多数据, 可能部分接口我们只需要用到<code class="language-text">username</code>和<code class="language-text">id</code>. 但对于后端来说, 他们只管写通过逻辑, 而不去管<code class="language-text">UI</code>上需要哪些数据.</p>
<p>这样一来, 每个接口都有可能返回大量无用的数据, 如果数据嵌套过深, 极端情况可能有上兆的数据.</p>
<p>因此前端需要做到像<code class="language-text">GraphQL</code>一样能够自行定义所需的数据. (前提还是需要后端支持)</p>
<h2 id="squiggly" class="heading"><a href="#squiggly" aria-hidden="true"><span class="icon icon-link"></span></a>Squiggly</h2>
<p>如果后端是用<code class="language-text">JAVA</code>开发, 那么可以使用<a href="https://github.com/bohnman/squiggly">squiggly</a>来支持前端数据自定义</p>
<p>根据这个库的介绍, 可以通过自定义<code class="language-text">filter</code>形式来过滤掉<code class="language-text">JAVA</code>类中数据的输出</p>
<p>用<code class="language-text">javascript</code>以及上面的<code class="language-text">User</code>作为例子的话, 假设我们的<code class="language-text">filter</code>是<code class="language-text">username,id</code>, 那么当我们<code class="language-text">log(User)</code>时候只会输出<code class="language-text">username</code>和<code class="language-text">id</code>两个数据, 其他都被过滤掉</p>
<p>当然还支持其他过滤方式, 但下面都是以<strong>精确匹配</strong>方式来完成数据定义</p>
<h2 id="最简单粗暴的方式" class="heading"><a href="#%E6%9C%80%E7%AE%80%E5%8D%95%E7%B2%97%E6%9A%B4%E7%9A%84%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>最简单粗暴的方式</h2>
<p>直接在请求中带上自定义请求头, 值设为所需要返回的字段</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fileds <span class="token operator">=</span> <span class="token string">'name,user.username,user.id'</span>
axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token string">'/example'</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span>
    fields
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>这样后端返回的字段只有</p>
<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">""</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>这种方法存在弊端</p>
<ul>
<li>定义<code class="language-text">fileds</code>会很麻烦</li>
<li><code class="language-text">fields</code>不利于复用</li>
<li><code class="language-text">fields</code>中定义的字段无法反应到<code class="language-text">response</code>中</li>
</ul>
<h2 id="进一步改进" class="heading"><a href="#%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%94%B9%E8%BF%9B" aria-hidden="true"><span class="icon icon-link"></span></a>进一步改进</h2>
<p>基于上面的问题, 我所期待的效果应该如下:</p>
<ul>
<li>更容易以及明确的定义<code class="language-text">fileds</code></li>
<li><code class="language-text">fields</code>易于继承和扩展</li>
<li>定义<code class="language-text">fileds</code>同时能定义其类型, 并且反应到<code class="language-text">response</code>上</li>
</ul>
<p>解决上面上个问题可以从两个方法入手</p>
<ul>
<li>通过类的方法定义<code class="language-text">fileds</code></li>
<li>借助<code class="language-text">typescript</code>完成类型定义</li>
</ul>
<p>似乎只用<code class="language-text">typescript</code> + <code class="language-text">interface</code>就能很好的解决上述功能</p>
<p><strong>定义类型</strong></p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ResData</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  user<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> <span class="token builtin">string</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>借助<code class="language-text">ts</code>可以很容易定义一个类型, 只要把它赋值给<code class="language-text">axios</code>就能很容易定义<code class="language-text">response</code></p>
<p>接下来只需要想办法把<code class="language-text">interface</code>转成字符串</p>
<p>但其实类型和字符串是两个层面的东西, 类型属于<code class="language-text">ts</code>,  而字符串是实实在在的<code class="language-text">js</code>变量, 将两个层面连接一起的通道其实就是<code class="language-text">AST</code>, 我们可以通过解析<code class="language-text">ts</code>语法, 通过<code class="language-text">transform</code>转成<code class="language-text">js</code>代码</p>
<p>于是乎发现了一个<a href="https://github.com/cevek/ttypescript">ttypescript</a>, 可以自行实现<code class="language-text">transformer</code>来完成编译, 同时发现了一个很合适的<a href="https://github.com/nullcc/ts-interface-keys-transformer#readme">transformer</a></p>
<p>而这篇<a href="https://nullcc.github.io/2019/07/18/TypeScript%E4%B8%AD%E5%88%A9%E7%94%A8transformer%E8%8E%B7%E5%8F%96interface%20keys/">文章</a>整体思路跟我都是很相似, 这里就不在展开</p>
<p>但是说下这个方法的一些弊端</p>
<ul>
<li>不支持嵌套类型</li>
<li>不支持数组类型</li>
<li>对继承不友好</li>
</ul>
<h2 id="最终实现" class="heading"><a href="#%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>最终实现</h2>
<h3 id="定义fields以及类型" class="heading"><a href="#%E5%AE%9A%E4%B9%89fields%E4%BB%A5%E5%8F%8A%E7%B1%BB%E5%9E%8B" aria-hidden="true"><span class="icon icon-link"></span></a>定义fields以及类型</h3>
<p>最终要达到的目的其实就是: <strong>定义字段同时定义返回类型</strong>, 而上面的方法是从<code class="language-text">ts</code>层面出发, 我们可以试着从<code class="language-text">js</code>层面出发, 利用<code class="language-text">ts</code>的类型推到功能完成</p>
<p>举个例子</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    id<span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a
</code></pre></div>
<p>借助<code class="language-text">ts</code>的类型推到可以很容易得出</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  user<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> <span class="token builtin">string</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>有了这个例子, 我们就可以很容易完成我们的目标</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> NumberType <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// type: number</span>
<span class="token keyword">const</span> StringType <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment">// type: string</span>
<span class="token keyword">const</span> BooleanType <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// type: boolean</span>
<span class="token keyword">const</span> AnyType <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token comment">// type: any</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> StringType<span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> StringType<span class="token punctuation">,</span>
    id<span class="token operator">:</span> NumberType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>
  key1<span class="token operator">:</span> BooleanType<span class="token punctuation">,</span>
  key2<span class="token operator">:</span> <span class="token punctuation">{</span>
    key3<span class="token operator">:</span> <span class="token punctuation">{</span>
      key4<span class="token operator">:</span> <span class="token punctuation">{</span>
        key5<span class="token operator">:</span> NumberType
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>通过定义变量+类型推导就能很轻松完成<code class="language-text">fileds</code>的定义</p>
<h3 id="实现render方法" class="heading"><a href="#%E5%AE%9E%E7%8E%B0render%E6%96%B9%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>实现render方法</h3>
<p><code class="language-text">render</code>方法作用其实就是将上面定义好的变量转成字符串形式的<code class="language-text">fields</code></p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 实现方法其实很简单, 就是遍历object输出key</span>
  <span class="token comment">// 遇到nested或者array就递归</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>这时候我们可以这样</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> fileds <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> a<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token string">'/example'</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span>
    fields
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>到这里其实就达到了最终的目标<strong>定义fileds同时定义返回类型</strong></p>
<p>但是目前这样维护起来不太容易, 我们需要<strong>继承</strong>以及更多的<strong>类型支持</strong></p>
<h3 id="继承" class="heading"><a href="#%E7%BB%A7%E6%89%BF" aria-hidden="true"><span class="icon icon-link"></span></a>继承</h3>
<p>继承的目标就是在已有的<code class="language-text">fileds</code>上继续扩展, <code class="language-text">Object.assign</code>就能满足</p>
<p>但<code class="language-text">assign</code>本身是不带类型的, 因此需要给他加入类型以便<code class="language-text">ts</code>进行类型推导</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// 最简单的继承</span>
<span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>t0<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> t0<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>剩下要做的只需要对它进行重载以满足类型推导</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// 举个例子</span>
<span class="token comment">// 我们只需要使用泛型来重载它的输入和输入类型</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">extend</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T0</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token constant">T1</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
  t<span class="token operator">:</span> <span class="token constant">T0</span><span class="token punctuation">,</span>
  u<span class="token operator">:</span> <span class="token constant">T1</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span><span class="token constant">T0</span> <span class="token operator">&amp;</span> <span class="token constant">T1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token constant">T0</span> <span class="token operator">&amp;</span> <span class="token constant">T1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>t0<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> t0<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a
<span class="token comment">// A = { a: number, c: string }</span>
</code></pre></div>
<h3 id="更多类型支持" class="heading"><a href="#%E6%9B%B4%E5%A4%9A%E7%B1%BB%E5%9E%8B%E6%94%AF%E6%8C%81" aria-hidden="true"><span class="icon icon-link"></span></a>更多类型支持</h3>
<p>在<code class="language-text">typescript</code>还有高级类型比如<code class="language-text">pick</code>, <code class="language-text">omit</code>, <code class="language-text">union</code>等</p>
<p>要实现他们, 原理跟继承一样, 都通泛型以及重载实现</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// 再举个例子</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">constant</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">constant</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a
<span class="token comment">// A = 1, 而不是number</span>
</code></pre></div>
<h3 id="组合使用" class="heading"><a href="#%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>组合使用</h3>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> StringType
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  user<span class="token operator">:</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> StringType<span class="token punctuation">,</span>
    id<span class="token operator">:</span> NumberType
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span>
  <span class="token punctuation">{</span>
    c<span class="token operator">:</span> BooleanType
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token constant">A</span><span class="token punctuation">,</span>
  <span class="token constant">B</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token class-name">TypeC</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> c
<span class="token comment">// { name: string, user: { username: string, id: number }, c: boolean}</span>

<span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token function">pick</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">type</span> <span class="token class-name">TypeD</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token constant">D</span>
<span class="token comment">// { user: { username: string, id: number } }</span>

<span class="token keyword">const</span> <span class="token constant">E</span> <span class="token operator">=</span> <span class="token function">omit</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">type</span> <span class="token class-name">TypeE</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token constant">E</span>
<span class="token comment">// { name: string, c: boolean }</span>
</code></pre></div>
<p>通过一系列的辅助方法, 就可以很好的达到我们的目的: 定义<code class="language-text">fileds</code>同时定义类型</p>
<h3 id="配合axios使用" class="heading"><a href="#%E9%85%8D%E5%90%88axios%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>配合axios使用</h3>
<h4 id="最粗暴的方式" class="heading"><a href="#%E6%9C%80%E7%B2%97%E6%9A%B4%E7%9A%84%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>最粗暴的方式</h4>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> StringType
<span class="token punctuation">}</span>
<span class="token keyword">const</span> fileds <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">A</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token string">'/example'</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span>
    fields
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<h4 id="更方便的方式" class="heading"><a href="#%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>更方便的方式</h4>
<p>还是借用了泛型+类型推导</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>fieldsDeclare<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>fieldsDeclare<span class="token punctuation">)</span>
  <span class="token comment">// 在这里借用了类型推导</span>
  <span class="token keyword">return</span> Axios<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      fields
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">''</span>
<span class="token punctuation">}</span>
<span class="token function">request</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=></span> <span class="token punctuation">{</span>
  r<span class="token punctuation">.</span>data <span class="token comment">// typeof A { name: string }</span>
  r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name <span class="token comment">// string</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<p>有了以上基础，其实要实现真正的<code class="language-text">GraphQL</code>也是可以的，只需要实现<code class="language-text">render</code>方法即可。</p>
<p>基于<code class="language-text">ts</code>的泛型+类型推导其实能实现很多强大的功能，比如<a href="https://github.com/zWingz/vuex-ts-enhance">vuex-ts-enhance</a>，就是借助泛型+类型推导，完成了<code class="language-text">vuex</code>中<code class="language-text">mapXXX</code>方法的类型推导，有兴趣可以试用下。</p>
]]></description><link>http://zwingz.github.io/posts/596661085.html</link><guid isPermaLink="false">596661085</guid><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Wed, 08 Apr 2020 15:22:10 GMT</pubDate></item><item><title><![CDATA[2019，精彩的一年]]></title><description><![CDATA[<h2 id="回顾2019" class="heading"><a href="#%E5%9B%9E%E9%A1%BE2019" aria-hidden="true"><span class="icon icon-link"></span></a>回顾2019</h2>
<p>先大概回顾下我在<a href="https://zwing.site/posts/403552116.html">2018年总结</a>中对2019的期望</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1577282858840.png"></p>
<h3 id="2019，我的技术成长" class="heading"><a href="#2019%EF%BC%8C%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF" aria-hidden="true"><span class="icon icon-link"></span></a>2019，我的技术成长</h3>
<h4 id="electron" class="heading"><a href="#electron" aria-hidden="true"><span class="icon icon-link"></span></a>electron</h4>
<p>今年主要开发了<a href="https://github.com/zWingz/Hyrule">Hyrule</a>，算是体验了一次<code class="language-text">electron</code>开发, 同时也方便了自己用写博客。具体内容还请看<a href="https://zwing.site/posts/489535157.html">Hyrule - electron+react app开发实践</a></p>
<h4 id="小程序" class="heading"><a href="#%E5%B0%8F%E7%A8%8B%E5%BA%8F" aria-hidden="true"><span class="icon icon-link"></span></a>小程序</h4>
<p>使用<code class="language-text">taro</code>开发了<a href="https://github.com/zWingz/Koopa">Koopa</a>(基于github的图片管理小程序)。</p>
<p>用<code class="language-text">react</code>开发小程序的体验还是不错的。开发过程中也给<code class="language-text">taro</code>提过<code class="language-text">issues</code>和<code class="language-text">pr</code>, 算是参加了一个大型开源项目。</p>
<h4 id="react" class="heading"><a href="#react" aria-hidden="true"><span class="icon icon-link"></span></a>react</h4>
<p>上半年还在老老东家时候依旧老老实实的写着<code class="language-text">react</code>和<code class="language-text">typescript</code>, 至于小程序则用了<code class="language-text">taro</code>开发了<a href="https://github.com/zWingz/Koopa">koopa</a>, 基于<code class="language-text">github</code>的图片管理小程序。主要还是想体验一下<code class="language-text">taro</code>, 而<code class="language-text">taro</code>团队也是挺给力的, 提的<code class="language-text">issues</code>和<code class="language-text">pr</code>都会很快有人处理, 希望<code class="language-text">taro</code>能越做越好。</p>
<p>在网易期间由于业务需求，也接触了<code class="language-text">react ssr</code>以及<code class="language-text">css module</code>, 用的是<a href="https://github.com/jaredpalmer/razzle">razzle</a>，也算是浅尝即止吧。</p>
<h4 id="angularjs" class="heading"><a href="#angularjs" aria-hidden="true"><span class="icon icon-link"></span></a>angularjs</h4>
<p>对, 是<code class="language-text">angularjs</code>而不是<code class="language-text">angular</code>。也是在网易期间由于业务需求，不得不学习早已脱离时代的<code class="language-text">angularjs</code>。而且还要研究如何在<code class="language-text">react</code>上运行<code class="language-text">angular</code>, 以及如何在<code class="language-text">angular</code>上运行<code class="language-text">react</code>，并由此搭建一个管理中台。</p>
<p>不管<code class="language-text">vue</code>, <code class="language-text">react</code>, <code class="language-text">angular</code>谁运行谁, 总归逃不出几个方法</p>
<ul>
<li>互相转码编译, 将一种语言转成另一种语言, 但这技术上有点难度</li>
<li>提供一个<code class="language-text">dom</code>节点, 让它们在<code class="language-text">dom</code>上自己玩自己</li>
<li>提供一个<code class="language-text">iframe</code>, 让它们在<code class="language-text">iframe</code>上自己玩自己</li>
</ul>
<p>最终使用第二种来实现。</p>
<p>以<code class="language-text">react</code>运行<code class="language-text">angular</code>为例</p>
<ul>
<li><code class="language-text">angularjs</code>写的<code class="language-text">app</code>会通过<code class="language-text">gulp</code>打包成一个<code class="language-text">umd</code>包, 对外暴露一个<code class="language-text">render</code>方法<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">angular<span class="token punctuation">,</span> dom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  angular<span class="token punctuation">.</span><span class="token function">bootstrap</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token comment">// 具体api忘记了,反正就是启动angular</span>
<span class="token punctuation">}</span>
</code></pre></div></li>
<li>在<code class="language-text">react</code>中引入<code class="language-text">angularjs</code>, 并挂载到<code class="language-text">window</code>下, 因为<code class="language-text">angularjs</code>时期很多第三方依赖都是<code class="language-text">umd</code>形式打包, 可以从<code class="language-text">window</code>下直接获取<code class="language-text">angularjs</code>对象, 这样<code class="language-text">angular app</code>挂载时就能从<code class="language-text">window</code>下拿到<code class="language-text">angular</code>对象</li>
<li>通过<code class="language-text">script</code>标签以及<code class="language-text">link</code>标签加载<code class="language-text">angular app</code>的相关资源, 通过<code class="language-text">window</code>或者<code class="language-text">requirejs</code>获取暴露的<code class="language-text">render</code>方法, 传入相关参数并且调用</li>
<li>完成<code class="language-text">angular app</code>挂载</li>
</ul>
<div class="custom-block tips"><p class="custom-block-title">TIPS</p><p><code class="language-text">angularjs</code>时代很多依赖都会污染全局<code class="language-text">window</code></p></div>
<p>这里可以说单纯的完成了<code class="language-text">app</code>的挂载, 其实对于路由上不一定同步。而在处理路由上面花了很大时间去阅读<code class="language-text">ui-router</code>源码。</p>
<p>而<code class="language-text">ui-router</code>并不提供<code class="language-text">baseurl</code>类似的选项, 只能通过其提供的方法重写路由装饰器来完成<code class="language-text">baseurl</code>功能, 而对于路由同步, 直接通过了重写<code class="language-text">history.pushState</code>等方法实现。</p>
<p>对于<code class="language-text">angular</code>运行<code class="language-text">react</code>则简单一点</p>
<ul>
<li><code class="language-text">react app</code>同样暴露出一个<code class="language-text">render</code>方法, 接受一个<code class="language-text">dom</code>参数, 并将<code class="language-text">app</code>挂载上</li>
<li>通过自定义<code class="language-text">html-webpack-plugin</code>的<code class="language-text">template</code>选项, 使得<code class="language-text">react app</code>打包后输出<code class="language-text">manifest.json</code>文件包含了所有资源的实际路径(cdn)</li>
<li><code class="language-text">angular app</code>加载上面<code class="language-text">manifest.json</code>文件并解析出<code class="language-text">js</code>和<code class="language-text">css</code>资源, 通过<code class="language-text">script</code>和<code class="language-text">link</code>分别加载</li>
<li>通过<code class="language-text">umd</code>形式引入并且调用<code class="language-text">render</code>方法</li>
<li>完成<code class="language-text">app</code>渲染</li>
</ul>
<div class="custom-block tips"><p class="custom-block-title">TIPS</p><p>由于用了<code class="language-text">webpack</code>打包, 对<code class="language-text">window</code>对象不会造成太大的污染</p></div>
<p>通过上述方法, 也算是成功的在两边分别运行两者的app了。</p>
<h4 id="npm--unpkg" class="heading"><a href="#npm--unpkg" aria-hidden="true"><span class="icon icon-link"></span></a>npm &#x26;&#x26; unpkg</h4>
<p>同样是在网易时期, 需要接手内部<code class="language-text">npm</code>以及<code class="language-text">unpkg</code>的维护, 借此机会也学习了两者的搭建方式</p>
<ul>
<li>npm用了<a href="https://github.com/verdaccio/verdaccio/">verdaccio</a></li>
<li>unpkg直接用官方提供的完成搭建</li>
</ul>
<p>搭建<code class="language-text">npm</code>主要要解决的地方有几点, 官方也提供了相应的<a href="https://verdaccio.org/docs/en/plugins#storage-plugins">plugins</a></p>
<ul>
<li><code class="language-text">auth</code>问题: 一种是通过官方提供的配置完成<code class="language-text">ldap</code>等内置的其他认证方式, 另一种则是自行编写<code class="language-text">Middleware</code>完成认证</li>
<li>存储问题: 官方提供了<code class="language-text">memory</code>, <code class="language-text">s3-storage</code>等方式存储</li>
</ul>
<h4 id="vue" class="heading"><a href="#vue" aria-hidden="true"><span class="icon icon-link"></span></a>vue</h4>
<p>时隔一年半, 又重新写起了<code class="language-text">Vue</code>。由于目前vue对typescript的支持还不算好, 突然摆脱了<code class="language-text">ts</code>却有点不习惯, 再次感叹<code class="language-text">ts</code>真是个好东西。</p>
<p>虽然没有<code class="language-text">ts</code>的支持，但是<code class="language-text">jsdoc</code>也能去起到类型提示作用, 只要在文件头部添加<code class="language-text">@ts-check</code>即可</p>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// @ts-check</span>
<span class="token comment">/**
 *
 * @param {String} arg1
 * @returns {string}
 */</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">arg1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>
<h4 id="svg-symbol" class="heading"><a href="#svg-symbol" aria-hidden="true"><span class="icon icon-link"></span></a>svg-symbol</h4>
<p>参考<a href="https://github.com/ant-design/ant-design-icons">ant-design-icons</a>构建方法, 完成业务上的icon抽离。</p>
<p>主要流程：</p>
<ul>
<li>用过<code class="language-text">gulp</code>读取并解析<code class="language-text">svg</code>源文件</li>
<li>将<code class="language-text">svg</code>的<code class="language-text">xml</code>转成<code class="language-text">ts</code>对象, 最终编译成一个个的<code class="language-text">js</code>文件</li>
<li>构建一个<code class="language-text">IconSymbol</code>类, 用于管理<code class="language-text">svg</code><div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">import</span> Icon1 <span class="token keyword">from</span> <span class="token string">'@path/to/svg/es/asn/IconName'</span> <span class="token comment">// 加载icon对应的文件</span>
IconSymbol<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>Icon1<span class="token punctuation">)</span> <span class="token comment">// 注册icon</span>
</code></pre></div></li>
<li>调用<code class="language-text">IconSymbol.getIcon(name)</code>将<code class="language-text">icon</code>挂载到<code class="language-text">svg-symbol</code><div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> icon <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_map<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token comment">// 拿到icon的数据结构</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>icon<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[MkSvgIcon] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is unregister</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>icon<span class="token punctuation">.</span>isRendered<span class="token punctuation">)</span> <span class="token keyword">return</span>
     <span class="token comment">// 将icon插入到dom中</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderSymbol</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> icon<span class="token operator">:</span> icon<span class="token punctuation">.</span>define<span class="token punctuation">,</span> group<span class="token operator">:</span> icon<span class="token punctuation">.</span>group <span class="token punctuation">}</span><span class="token punctuation">)</span>
    icon<span class="token punctuation">.</span>isRendered <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isRender<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将svg symbol插入到dom中</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div></li>
<li>通过<code class="language-text">svg-use</code>使用icon</li>
</ul>
<p>这样做的好处</p>
<ul>
<li>由于是直接引用对应的<code class="language-text">js</code>文件, 通过<code class="language-text">tree-shaking</code>可以做到按需加载</li>
<li>只有<code class="language-text">icon</code>实际被调用时候才会挂载到<code class="language-text">dom</code>上</li>
<li>通过<code class="language-text">svg-symbol</code>可以复用<code class="language-text">icon</code>, 而<code class="language-text">ant-design-icon</code>则每次都需要重新<code class="language-text">render</code></li>
</ul>
<h4 id="开源" class="heading"><a href="#%E5%BC%80%E6%BA%90" aria-hidden="true"><span class="icon icon-link"></span></a>开源</h4>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1577977471698.png"></p>
<p>下半年的确少了很多<code class="language-text">commit</code>，大概老老东家业务量比较少才让我有时间去写写开源吧。</p>
<h4 id="总结" class="heading"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true"><span class="icon icon-link"></span></a>总结</h4>
<p>上半年一个人负责全部前端业务, 下半年开始进入团队协作模式。开始有了周例会，迭代会等团队管理模式，这是我以前没有经历过的。以前都是需求搞完直接上线，现在是严格按照迭代流程来走。</p>
<p>总的来说整个技术环境和氛围变化还是挺大的, 这些变化也是我所期望的。</p>
<h3 id="2019，我的生活变化" class="heading"><a href="#2019%EF%BC%8C%E6%88%91%E7%9A%84%E7%94%9F%E6%B4%BB%E5%8F%98%E5%8C%96" aria-hidden="true"><span class="icon icon-link"></span></a>2019，我的生活变化</h3>
<h4 id="书" class="heading"><a href="#%E4%B9%A6" aria-hidden="true"><span class="icon icon-link"></span></a>书</h4>
<p>很奇怪，2019竟然看起书来了，毕业以来就没看过书。</p>
<p>第一本是《倚天屠龙记》，由于今年上映了倚天屠龙记，于是我跑去看了原著
第二本是《CSS世界》，虽然讲的都是旧时代的知识点，但还是有很多收获
第三本是《明朝那些事》，看了1/3吧</p>
<h4 id="职业生涯" class="heading"><a href="#%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF" aria-hidden="true"><span class="icon icon-link"></span></a>职业生涯</h4>
<p>今年算是一个转折点, 在找工作上算是经历了两个阶段</p>
<h5 id="第一阶段" class="heading"><a href="#%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5" aria-hidden="true"><span class="icon icon-link"></span></a>第一阶段</h5>
<p>大概在年初, 先是面试了酷狗和头条, 头条挂在了第二面, 酷狗也不知为何挂在了最后一面, 不过这是福不是祸(再次吐槽下酷狗是我面试体验最差的一次), 备受打击然后继续做准备.</p>
<h5 id="第二阶段" class="heading"><a href="#%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5" aria-hidden="true"><span class="icon icon-link"></span></a>第二阶段</h5>
<p>大概在5 6月份吧. 分别面了微信, yy和网易。yy和网易都拿到了offer，微信如无意外的挂了，后面hr帮我推到了腾讯teg部门。</p>
<p>yy是ued岗位，负责帮公司各个部门解决性能或者体验上的问题，对我来说也是新的尝试。（yy的面试体验很好，ued的leader全程跟进，面试官也很nice）。</p>
<p>网易则是技术工程部，负责运维平台的开发，也相当于内部系统了，算是老本行。</p>
<p>最终选择了网易并在6月底入职。结果入职第一天就收到腾讯的面试，也是有点尴尬。</p>
<p>经过了一个月的面试最终也拿下了腾讯的offer，这就面临着要从广州搬到深圳。</p>
<p>这两个月，yy、网易和腾讯三家公司都让我想了好久好久，因为这都关乎着职业生涯发展，需要慎重考虑。</p>
<p>最终在9月初入职了腾讯，短短2个多月，从创业公司到网易再到腾讯。</p>
<p>今年的多次面试经历都是很宝贵的。其实只要答中面试官的点，然后适当的进行扩展，引着面试官往你熟悉的方向去走，很大概率会成功。如果一个点不了解，直接坦白也是没关系，倘若了解这个点的某个方向，也可以试着引面试官往那个方向去走，一问三不知那是很危险的。</p>
<p>很高兴在腾讯认识了一群很有意思的同事，刚来不久就带我去了酒吧，偶尔也带着我去觅食，在以往可是没这种待遇。</p>
<p>最后一点，大舞台大背景真的很重要。</p>
<h4 id="旅游" class="heading"><a href="#%E6%97%85%E6%B8%B8" aria-hidden="true"><span class="icon icon-link"></span></a>旅游</h4>
<p>今年去了珠海和惠州，也去了趟日本关西（京都、大阪、奈良）。</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1577448425101.png"></p>
<p>日本真是个好地方，虽然我不是动漫迷，但还是想说日本真是动漫的天堂。这一趟旅行，也让我入坑了高达模型。如果有机会再去一次的话，我希望能去看富士山以及灌篮高手的电车站。</p>
<h4 id="生活" class="heading"><a href="#%E7%94%9F%E6%B4%BB" aria-hidden="true"><span class="icon icon-link"></span></a>生活</h4>
<p>我记得之前hr第一次给我电话时候我直接拒绝了来深圳发展, 后面还是来了。来到第一感觉就是：贵！堵！</p>
<p>住地地方不仅贵了，还小了，小到容不下我的烤箱。我朋友还跟我说：来了就是深圳人，不对，有房深圳人，没房东莞人。（开玩笑）</p>
<p>来了三个多月，在同事的加持下算是适应了这边的生活环境，也还不错。</p>
<p>对了，今年迷上了高达，正如去年迷上烘焙一样。</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1577976925904.png"></p>
<p>它们就是一堆人型人民币。</p>
<p>最后，还上了车。在祖国70周年借了一笔款, 在祖国百年庆还清, 算是做了一笔贡献。</p>
<h4 id="总结-1" class="heading"><a href="#%E6%80%BB%E7%BB%93-1" aria-hidden="true"><span class="icon icon-link"></span></a>总结</h4>
<p>2019，真的可以用‘精彩’两个字形容，也是工作三年最精彩的一年。</p>
<h2 id="展望2020" class="heading"><a href="#%E5%B1%95%E6%9C%9B2020" aria-hidden="true"><span class="icon icon-link"></span></a>展望2020</h2>
<h3 id="技术" class="heading"><a href="#%E6%8A%80%E6%9C%AF" aria-hidden="true"><span class="icon icon-link"></span></a>技术</h3>
<p>每年都会有新的技术诞生, 且说2019的已有技术中就有很多暂时没能掌握</p>
<ul>
<li>vue3.0: 按道理今年应该能出了, 而且能完美支持<code class="language-text">typescript</code>, 那么这是一个很好的选择。如果真的是这样，也许可以考虑考虑把项目重构了。</li>
<li>webasmby: 如此高级的东西, 总是要学一下, 尽管工作上不太可能用得上, 但未来一定有用得上的地方。</li>
<li><a href="https://zhuanlan.zhihu.com/p/89974892">react-config-2019</a> 上面提到的新技术都很让我感兴趣, 特别是新提出的<code class="language-text">css-in-js</code>方案</li>
<li>node/server: 还是希望能在node/server有更好的实践经验, 要成为一名工程师而不是前端工程师</li>
<li>开源：继续保持对开源的热爱，受益于开源同时也要回馈开源。</li>
</ul>
<h3 id="生活-1" class="heading"><a href="#%E7%94%9F%E6%B4%BB-1" aria-hidden="true"><span class="icon icon-link"></span></a>生活</h3>
<ul>
<li>继续看书</li>
<li>2019没有很好地落实跑步计划, 那么2020继续吧（刚好公司有健身室）</li>
<li>有很多个高达模型想要入手，巴巴托斯，PG完美强袭，能天使OOR，我要逐个逐个搞下来</li>
</ul>
<h3 id="工作" class="heading"><a href="#%E5%B7%A5%E4%BD%9C" aria-hidden="true"><span class="icon icon-link"></span></a>工作</h3>
<p>在大舞台下, 更能大展拳脚。在开源协同的大背景下，要能发挥更大的作用。</p>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<p>感谢2019给我带来的变化，希望2020能稳步发展。</p>
]]></description><link>http://zwingz.github.io/posts/540412877.html</link><guid isPermaLink="false">540412877</guid><category><![CDATA[生活]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Thu, 19 Dec 2019 16:14:07 GMT</pubDate></item><item><title><![CDATA[Hyrule - electron+react app开发实践]]></title><description><![CDATA[<h2 id="背景" class="heading"><a href="#%E8%83%8C%E6%99%AF" aria-hidden="true"><span class="icon icon-link"></span></a>背景</h2>
<p><a href="https://github.com/zWingz/Hyrule">Hyrule</a></p>
<p>本文也是在Hyrule下完成</p>
<h2 id="技术栈以及主要依赖" class="heading"><a href="#%E6%8A%80%E6%9C%AF%E6%A0%88%E4%BB%A5%E5%8F%8A%E4%B8%BB%E8%A6%81%E4%BE%9D%E8%B5%96" aria-hidden="true"><span class="icon icon-link"></span></a>技术栈以及主要依赖</h2>
<ul>
<li><a href="https://github.com/facebook/react">react</a></li>
<li><a href="https://github.com/ant-design/ant-design">antd</a></li>
<li><a href="https://github.com/electron/electron">electron</a></li>
<li><a href="https://github.com/microsoft/TypeScript">typescript</a></li>
<li><a href="https://github.com/microsoft/monaco-editor">monaco-editor</a></li>
<li><a href="https://github.com/remarkjs/remark">remark</a></li>
</ul>
<p>electron提供跨平台PC端运行环境，使用react+antd构建UI界面</p>
<p>monaco-editor提供编辑器功能，使用remark转换markdown</p>
<h2 id="electron如何运行web" class="heading"><a href="#electron%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8Cweb" aria-hidden="true"><span class="icon icon-link"></span></a>electron如何运行web</h2>
<p>electron作用就是提供多端运行环境，实际开发体验跟一般Web开发无二</p>
<p>万事开头难，初次接触的确不知道如何入手，github上也有相应的模板</p>
<ul>
<li><a href="https://github.com/SimulatedGREG/electron-vue">electron-vue</a></li>
<li><a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate">electron-react-boilerplate</a></li>
</ul>
<p>不管模板如何，核心还是如何在electron中加载html</p>
<p>electron分为主进程(main)和渲染进程(renderer)，主进程可以跟操作系统打交道，渲染进程可以说跟页面打交道(webapp)，因此只需要在主进程创建一个<code class="language-text">window</code>来跑页面即可。</p>
<p>如果只是开发普通页面，那只要加载html即可，如果使用webpack开发，则开发时候需要在electron中访问dev-server提供的页面</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 创建一个window, 用于加载html</span>
  title<span class="token operator">:</span> app<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  minHeight<span class="token operator">:</span> <span class="token number">750</span><span class="token punctuation">,</span>
  minWidth<span class="token operator">:</span> <span class="token number">1090</span><span class="token punctuation">,</span>
  webPreferences<span class="token punctuation">,</span>
  show<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 避免app启动时候显示出白屏</span>
  backgroundColor<span class="token operator">:</span> <span class="token string">'#2e2c29'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  win<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'http://localhost:8989/'</span><span class="token punctuation">)</span> <span class="token comment">// 开发环境访问dev-server提供的页面</span>
  <span class="token comment">// 配置react-dev-tool</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span><span class="token operator">:</span> installExtension<span class="token punctuation">,</span>
    <span class="token constant">REACT_DEVELOPER_TOOLS</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'electron-devtools-installer'</span><span class="token punctuation">)</span>
  <span class="token function">installExtension</span><span class="token punctuation">(</span><span class="token constant">REACT_DEVELOPER_TOOLS</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>name <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Added Extension:  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=></span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'An error occurred: '</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// win.webContents.openDevTools()</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// 生产环境直接加载index.html</span>
  win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/../../../renderer/index.html</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>至此, 就可以在electron中运行开发的webapp, 剩下的工作便跟日常开发一样</p>
<h2 id="项目启动" class="heading"><a href="#%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8" aria-hidden="true"><span class="icon icon-link"></span></a>项目启动</h2>
<p>如上面所说, 在启动开发环境时候, 需要两个进程</p>
<ul>
<li>devServer: 使用webpack来启动webapp开发环境</li>
<li>electron: 直接使用node来执行main.js, 启动electron</li>
</ul>
<p>但由于使用typescript来开发, 在web端可以由webpack来完成, 那么在electron中, 则多了一步来编译</p>
<p>因此整个开发环境启动有三步</p>
<ul>
<li>dev:web  启动dev-server</li>
<li>dev:main 编译main.ts到./dist/main.js</li>
<li>dev:electron 执行main.js, 启动electron(借助nodemon来自动重启)</li>
</ul>
<p>目前还未特意去寻找一键启动方法, 因此启动步骤稍微多</p>
<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev:web"</span><span class="token operator">:</span> <span class="token string">"node ./build/devServer.js"</span><span class="token punctuation">,</span>
    <span class="token property">"build:web"</span><span class="token operator">:</span> <span class="token string">"webpack --progress --hide-modules --colors --config=build/prod.conf.js"</span><span class="token punctuation">,</span>
    <span class="token property">"dev:main"</span><span class="token operator">:</span> <span class="token string">"yarn build:main --watch"</span><span class="token punctuation">,</span>
    <span class="token property">"build:main"</span><span class="token operator">:</span> <span class="token string">"tsc -p tsconfig.electron.json"</span><span class="token punctuation">,</span>
    <span class="token property">"dev:electron"</span><span class="token operator">:</span> <span class="token string">"nodemon --watch ./dist/main --exec electron ./dist/electron/src/main/main.js"</span><span class="token punctuation">,</span>
    <span class="token property">"build:package"</span><span class="token operator">:</span> <span class="token string">"electron-builder --config ./electronrc.js -mwl"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"yarn build:web &amp;&amp; yarn build:main &amp;&amp; yarn build:package"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2 id="项目开发" class="heading"><a href="#%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91" aria-hidden="true"><span class="icon icon-link"></span></a>项目开发</h2>
<p>接下来, 只需要重点开发webapp即可, electron端可以作为辅助, 提供一些系统级别调用功能</p>
<p>下面讲讲开发过程中遇到的问题以及解决方法</p>
<h3 id="github-认证" class="heading"><a href="#github-%E8%AE%A4%E8%AF%81" aria-hidden="true"><span class="icon icon-link"></span></a>github 认证</h3>
<p>由于app是基于github来完成, 因此所有功能都需要对接github api</p>
<p>github大部分api都是对外开放, 当需要访问私有仓库或者进行敏感操作时候才需要token</p>
<p>但是不使用token的话, api有调用次数限制</p>
<p>获取token有两种方式</p>
<ul>
<li>直接让用户输入<code class="language-text">access token</code></li>
<li>通过github app形式来交换token</li>
</ul>
<h4 id="用户自行输入token" class="heading"><a href="#%E7%94%A8%E6%88%B7%E8%87%AA%E8%A1%8C%E8%BE%93%E5%85%A5token" aria-hidden="true"><span class="icon icon-link"></span></a>用户自行输入token</h4>
<p>第一种方式显然是最简单的, 只需要提供一个<code class="language-text">form</code>表单让用户输入<code class="language-text">access token</code></p>
<h4 id="通过oauth20授权获取token" class="heading"><a href="#%E9%80%9A%E8%BF%87oauth20%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96token" aria-hidden="true"><span class="icon icon-link"></span></a>通过oauth2.0授权获取token</h4>
<p>oauth2.0授权步骤大概如下:</p>
<ul>
<li>在github申请github app, 并获取<code class="language-text">CLIENT_ID</code>和<code class="language-text">SECRET</code>, 并填写回调地址</li>
<li>引导用户访问<code class="language-text">https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}</code></li>
<li>用户授权后github会带上<code class="language-text">code</code>并跳转到回调地址</li>
<li>拿到<code class="language-text">code</code>后请求<code class="language-text">https://github.com/login/oauth/access_token</code>获取用户<code class="language-text">access_token</code></li>
<li>拿到<code class="language-text">access_token</code>就可以调用github api</li>
</ul>
<p>由于需要提供回调地址, 而<code class="language-text">Hyrule</code>并不需要任何服务器, 因此在回调这一步需要做些处理</p>
<ul>
<li>
<p>回调地址填写<code class="language-text">localhost</code>, 用户授权后会跳转回我们开发的web页面, 控制权又回到我们手上</p>
</li>
<li>
<p>在electron中可以监听跳转, 因此在监听到跳转时候阻止默认事件, 并获取<code class="language-text">url</code>上的<code class="language-text">code</code>, 接下来获取<code class="language-text">access_token</code>即可</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript">authWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'will-redirect'</span><span class="token punctuation">,</span> handleOauth<span class="token punctuation">)</span>
authWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'will-navigate'</span><span class="token punctuation">,</span> handleOauth<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">handleOauth</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">code=([\d\w]+)</span><span class="token regex-delimiter">/</span></span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> code <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> authUrl <span class="token operator">=</span> <span class="token string">'https://github.com/login/oauth/access_token'</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span>authUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      code<span class="token punctuation">,</span>
      client_id<span class="token operator">:</span> <span class="token constant">GITHUB_APP</span><span class="token punctuation">.</span><span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span>
      client_secret<span class="token operator">:</span> <span class="token constant">GITHUB_APP</span><span class="token punctuation">.</span><span class="token constant">SECRET</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      Accept<span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
      <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
      Referer<span class="token operator">:</span> <span class="token string">'https://github.com/'</span><span class="token punctuation">,</span>
      <span class="token string">'User-Agent'</span><span class="token operator">:</span>
        <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> access_token <span class="token punctuation">}</span> <span class="token operator">=</span> r
        <span class="token function">setToken</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>
        <span class="token comment">// Close the browser if code found or error</span>
        <span class="token function">getWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'set-access-token'</span><span class="token punctuation">,</span> access_token<span class="token punctuation">)</span>
        authWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">clearStorageData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        authWindow<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
</li>
</ul>
<h3 id="api-service开发" class="heading"><a href="#api-service%E5%BC%80%E5%8F%91" aria-hidden="true"><span class="icon icon-link"></span></a>api service开发</h3>
<p>做api service开发只是为了更快速调动github api</p>
<p>npm上也有<a href="https://github.com/octokit/rest.js">@octokit/rest</a>, 已经封装好了所有github api, 文档也足够齐全, 但由于笨app用到接口不多, 因此我选择了自行封装</p>
<p>列举下所用接口</p>
<ul>
<li>获取当前用户</li>
<li>获取用户所有repo, 包括private</li>
<li>获取/创建/编辑/删除issues</li>
<li>获取repo的tree数据</li>
<li>获取文件<code class="language-text">blob</code>数据 (获取content接口有大小限制, 获取<code class="language-text">blob</code>没有)</li>
<li>创建和删除<code class="language-text">file</code></li>
</ul>
<p>刚开始直接使用<code class="language-text">fetch</code>来请求api, 后面发现<code class="language-text">fetch</code>并不能获取上传进度, 后续改回了<code class="language-text">xhr</code></p>
<h3 id="service-二次封装" class="heading"><a href="#service-%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85" aria-hidden="true"><span class="icon icon-link"></span></a>service 二次封装</h3>
<p>api service提供最基础的api调用, 需要再进一步封装以满足功能需求</p>
<h4 id="图床部分service" class="heading"><a href="#%E5%9B%BE%E5%BA%8A%E9%83%A8%E5%88%86service" aria-hidden="true"><span class="icon icon-link"></span></a>图床部分service</h4>
<p>列举下图床所需要service</p>
<ul>
<li>获取repo下某sha的tree data(其实就是获取repo的目录结构, 默认第一层为<code class="language-text">master</code>)</li>
<li>上传图片和删除图片</li>
</ul>
<p>看似所需要接口不多, 但实际开发起来还是花了不少时间, 不过更多是在优化流程上</p>
<h3 id="如何加载github图片" class="heading"><a href="#%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDgithub%E5%9B%BE%E7%89%87" aria-hidden="true"><span class="icon icon-link"></span></a>如何加载github图片</h3>
<p>github仓库分为了public和private, 而public仓库的文件可以直接通过<code class="language-text">https://raw.githubusercontent.com/user/repo/${branch-or-sha}/${path-to-file}</code>访问. 而private则需要通过token方式访问</p>
<ul>
<li><a href="https://developer.github.com/v3/git/blobs/#git-blobs">git-blobs</a>: 可以获取任何文件, 返回base64</li>
<li><a href="https://developer.github.com/v3/repos/contents/#get-contents">contents</a>: 可以获取1mb以内的文件, 返回base64</li>
<li>通过<code class="language-text">https://access_token@github.com/user/repo/path/to/file</code> 由于此形式有安全隐患, 因此无法直接用在<code class="language-text">&lt;img /&gt;</code>上, 但是可以通过<code class="language-text">curl</code>形式使用</li>
<li>带上<code class="language-text">Authorization</code>访问raw.githubusercontent.com<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://raw.githubusercontent.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>owner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/master/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span>
    Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div></li>
</ul>
<p>对于public的仓库, 直接通过<code class="language-text">img</code>标签即可, 对于private, 则需要多一步处理.</p>
<p>通过github api获取图片base64后拼接上MIME赋值给<code class="language-text">img.src</code>即可, 如果觉得base64太长, 可以进一步转成blob-url, 并且加上缓存, 则对于同一张图片只需要加载一次即可.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// base64转blob</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">b64toblob</span><span class="token punctuation">(</span>b64Data<span class="token punctuation">,</span> contentType <span class="token operator">=</span> <span class="token string">'application/octet-stream'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>contentType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b64Data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> blob
<span class="token punctuation">}</span>
</code></pre></div>
<p>按理说上面的方法已经很好地解决private图片加载, 但由于使用了<a href="https://github.com/zWingz/react-image">react-image</a>图片组件, 会自动根据图片加载情况添加对应加载状态, 如果使用上述方法, 会导致图片先显示<code class="language-text">error</code>然后才转成正常图片.</p>
<p>想要private图片也能直接通过src形式加载, 需要一个"后台"帮我们加载图片, 然后返回对应的<code class="language-text">http response</code>, 而恰好electron上可以<a href="https://electronjs.org/docs/api/protocol#protocol">自定义协议</a>, 并进行拦截, 那么我们可以定义一个<code class="language-text">github:</code>协议, 所有该<code class="language-text">url</code>都由electron拦截并处理</p>
<p>这里我选择了<a href="https://electronjs.org/docs/api/protocol#protocolregisterstreamprotocolscheme-handler-completion">streamprotocol</a></p>
<p>整体流程大概如下:</p>
<ul>
<li>electron注册自定义协议<code class="language-text">github://</code></li>
<li>构造图片src: <code class="language-text">github://${repo}/${sha}/${name}</code></li>
<li>electron拦截请求, 解析得到<code class="language-text">repo</code>, <code class="language-text">sha</code>和<code class="language-text">name</code>信息</li>
<li>electron发起github api, 得到图片的base64</li>
<li>将base64转成buffer, 并构造成<code class="language-text">Readable</code>后返回</li>
</ul>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// 注册协议</span>
<span class="token keyword">function</span> <span class="token function">registerStreamProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  protocol<span class="token punctuation">.</span><span class="token function">registerStreamProtocol</span><span class="token punctuation">(</span><span class="token string">'github'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> req
    <span class="token function">getImageByApi</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getImageByApi</span><span class="token punctuation">(</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  _token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    stream<span class="token operator">?</span><span class="token operator">:</span> NodeJS<span class="token punctuation">.</span>ReadableStream <span class="token operator">|</span> Electron<span class="token punctuation">.</span>StreamProtocolResponse
  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 解析url</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> src<span class="token punctuation">]</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'//'</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>owner<span class="token punctuation">,</span> repo<span class="token punctuation">,</span> sha<span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> ext<span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>
  <span class="token comment">// 获取图片数据</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.github.com/repos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>owner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/git/blobs/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sha<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token string">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> res <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span>
    <span class="token comment">// 转成Buffer</span>
    <span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span>
    <span class="token comment">// 构造Readable</span>
    <span class="token keyword">const</span> read <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    read<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
    read<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span>headers
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      statusCode<span class="token operator">:</span> res<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
      data<span class="token operator">:</span> read<span class="token punctuation">,</span>
      <span class="token comment">// 将对应头部也带上</span>
      headers<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">'Content-Length'</span><span class="token operator">:</span> data<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">image/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ext<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        <span class="token string">'Cache-Control:'</span><span class="token operator">:</span> <span class="token string">'public'</span><span class="token punctuation">,</span>
        <span class="token string">'Accept-Ranges'</span><span class="token operator">:</span> <span class="token string">'bytes'</span><span class="token punctuation">,</span>
        Status<span class="token operator">:</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'Status'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Date<span class="token operator">:</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Etag<span class="token operator">:</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'etag'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'Last-Modified'</span><span class="token operator">:</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'Last-Modified'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>除了使用github api, 也可以直接通过<code class="language-text">raw</code>获取, 类似一个请求转发</p>
<p>按道理这样返回该请求的相应是最直接的方法, 但是该方法是在太慢了, 对node不够精通, 暂时想不到原因</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">getImageByRaw</span><span class="token punctuation">(</span>
  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  _token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    stream<span class="token operator">?</span><span class="token operator">:</span> NodeJS<span class="token punctuation">.</span>ReadableStream <span class="token operator">|</span> Electron<span class="token punctuation">.</span>StreamProtocolResponse
  <span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> src<span class="token punctuation">]</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'//'</span><span class="token punctuation">)</span>
  <span class="token comment">// /repos/:owner/:repo/git/blobs/:sha</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>owner<span class="token punctuation">,</span> repo<span class="token punctuation">,</span> <span class="token punctuation">,</span> name<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
  <span class="token comment">// 直接fetch raw文件, 并且带上authorization即可</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://raw.githubusercontent.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>owner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>repo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/master/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    headers<span class="token operator">:</span> <span class="token punctuation">{</span>
      Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// 直接返回reabable</span>
    <span class="token comment">// 但是太慢了, 不知道为何</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      headers<span class="token operator">:</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> res<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
      statusCode<span class="token operator">:</span> res<span class="token punctuation">.</span>status
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="cache缓存" class="heading"><a href="#cache%E7%BC%93%E5%AD%98" aria-hidden="true"><span class="icon icon-link"></span></a>cache缓存</h3>
<p>在图片管理中目录结构, 其实就是对应git上的一棵<code class="language-text">tree</code>, 而要达到同步效果, 必须从github中拉取对应的<code class="language-text">tree data</code></p>
<p>但其实只需要在该tree第一次加载时候去github拉取数据, 一旦数据拉取到本地, 后续目录读取就可以脱离github</p>
<ul>
<li>第一次访问根目录</li>
<li>拉取master目录结构</li>
<li>进入目录A</li>
<li>根据目录A的<code class="language-text">sha</code>拉取其目录结构</li>
<li>返回根目录</li>
<li>直接读取缓存中目录结构</li>
</ul>
<p>可见所有目录只需要拉取一次数据即可, 后续操作只需要在本地cache中完成</p>
<p>那么可以构造一个简单的缓存数据结构</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Cache<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>
  _cache<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token keyword">return</span> ret
  <span class="token punctuation">}</span>
  <span class="token function">has</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_cache
  <span class="token punctuation">}</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ImgType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  url<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  sha<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DirType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DataJsonType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  images<span class="token operator">:</span> ImgType<span class="token punctuation">[</span><span class="token punctuation">]</span>
  dir<span class="token operator">:</span> DirType
  sha<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ImageCache</span> <span class="token keyword">extends</span> <span class="token class-name">Cache<span class="token operator">&lt;</span>DataJsonType<span class="token operator">></span></span> <span class="token punctuation">{</span>
  <span class="token function">addImg</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> img<span class="token operator">:</span> ImgType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">delImg</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> img<span class="token operator">:</span> ImgType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> cac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    cac<span class="token punctuation">.</span>images <span class="token operator">=</span> cac<span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>each <span class="token operator">=></span> each<span class="token punctuation">.</span>sha <span class="token operator">!==</span> img<span class="token punctuation">.</span>sha<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>只要缓存中没有对应的key, 则从github上面拉取数据, 如果存在则直接在该缓存中操作, 每次增加或删除图片, 只需要更新其<code class="language-text">sha</code>即可.</p>
<p>举例:</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">ImageKit</span> <span class="token punctuation">{</span>
  <span class="token function">uploadImage</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> img<span class="token operator">:</span> UploadImageType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> filename <span class="token punctuation">}</span> <span class="token operator">=</span> img
    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">uploadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 获取缓存中数据</span>
    cache<span class="token punctuation">.</span><span class="token function">addImg</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> filename<span class="token punctuation">,</span>
      sha<span class="token operator">:</span> d<span class="token punctuation">.</span>sha
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>对于issues也是同样方法来缓存, 只不过数据结构有点变化, 这里就不叙述.</p>
<h3 id="异步队列" class="heading"><a href="#%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97" aria-hidden="true"><span class="icon icon-link"></span></a>异步队列</h3>
<p>github api有提供批量操作tree的<a href="https://developer.github.com/v3/git/trees/#create-a-tree">接口</a>, 但是并没有想象中那么容易使用, 反而有点复杂</p>
<p>在这里便没有考虑通过操作tree形式完成批量上传, 而是将批量上传拆分成一个个任务逐个上传, 也就说在交互上批量, 实际上还是单一.</p>
<p>这里用了<a href="https://github.com/zWingz/lite-queue">lite-queue</a>来管理异步队列(这个库也是后来才拆出来的), 使用方法很简单</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">await</span> queue<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment">// 1000</span>
</code></pre></div>
<p>其实就是根据调用顺序, 保证上一个<code class="language-text">promise</code>执行完后才执行下一个, 并且提供正确的回调和类似<code class="language-text">Promise.all</code>操作</p>
<h3 id="monaco编辑器加载" class="heading"><a href="#monaco%E7%BC%96%E8%BE%91%E5%99%A8%E5%8A%A0%E8%BD%BD" aria-hidden="true"><span class="icon icon-link"></span></a>monaco编辑器加载</h3>
<p>这里选择<a href="https://microsoft.github.io/monaco-editor/">monaco-editor</a>作为编辑器, 对于使用<code class="language-text">vscode</code>的开发者来说这样更容易上手</p>
<p>如何初始化, <a href="https://github.com/microsoft/monaco-editor/blob/master/docs/integrate-esm.md">官方文档</a>有详细说明, 下面附上初始化配置</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">this</span><span class="token punctuation">.</span>editor <span class="token operator">=</span> monaco<span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'monaco-editor'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span> content<span class="token punctuation">,</span>
  language<span class="token operator">:</span> <span class="token string">'markdown'</span><span class="token punctuation">,</span>
  automaticLayout<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  minimap<span class="token operator">:</span> <span class="token punctuation">{</span>
    enabled<span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  wordWrap<span class="token operator">:</span> <span class="token string">'wordWrapColumn'</span><span class="token punctuation">,</span>
  lineNumbers<span class="token operator">:</span> <span class="token string">'off'</span><span class="token punctuation">,</span>
  roundedSelection<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  theme<span class="token operator">:</span> <span class="token string">'vs-dark'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<h4 id="添加快捷键监听" class="heading"><a href="#%E6%B7%BB%E5%8A%A0%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9B%91%E5%90%AC" aria-hidden="true"><span class="icon icon-link"></span></a>添加快捷键监听</h4>
<p>监听<code class="language-text">CtrlOrCmd + S</code>完成文章保存</p>
<p>monaco-editor有提供相关api, 这里直接上代码</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token constant">KM</span> <span class="token operator">=</span> monaco<span class="token punctuation">.</span>KeyMod
<span class="token keyword">const</span> <span class="token constant">KC</span> <span class="token operator">=</span> monaco<span class="token punctuation">.</span>KeyCode
<span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token constant">KM</span><span class="token punctuation">.</span>CtrlCmd <span class="token operator">|</span> <span class="token constant">KC</span><span class="token punctuation">.</span><span class="token constant">KEY_S</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onSave<span class="token punctuation">)</span>
</code></pre></div>
<h4 id="粘贴图片直接上传" class="heading"><a href="#%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%87%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0" aria-hidden="true"><span class="icon icon-link"></span></a>粘贴图片直接上传</h4>
<p>写文章难免不了贴图片, 而贴图片意味着需要有一个图床, 结合hyrule, 可以借助github做图床, 然后在文章中引入, 步骤分别为:</p>
<ul>
<li>上传图片</li>
<li>复制markdown url</li>
<li>粘贴在文章中</li>
</ul>
<p>而最理想的操作是直接拖动到编辑器或者<code class="language-text">ctrl + v</code>粘贴图片, 在github issues中我们也可以直接粘贴图片并完成图片上传, 这里就可以模仿github的交互</p>
<ul>
<li>用户上传图片</li>
<li>确定当前光标所在位置</li>
<li>插入<code class="language-text">(Uploading...)</code>提示</li>
<li>图片上传完后替换掉上一部的<code class="language-text">(Uploading...)</code></li>
<li>完成图片插入</li>
</ul>
<p>浏览器有提供监听<code class="language-text">paste</code>的接口, 而确定光标位置以及文本替换就要借助monaco-editor的api了</p>
<p>分别是:</p>
<ul>
<li><a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#getselection">getSelection</a>: 获取光标位置</li>
<li><a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#executeedits">executeEdits</a>: 执行文本替换</li>
<li><a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandalonecodeeditor.html#setposition">selection</a>: 恢复光标位置</li>
<li><a href="https://microsoft.github.io/monaco-editor/api/interfaces/monaco.irange.html">monaco.Range</a>: 创建一个range</li>
</ul>
<p>逻辑步骤为:</p>
<ul>
<li>获取当前用户光标位置, 记录为<code class="language-text">startSelection</code>,</li>
<li>从<code class="language-text">clipboardData</code>中获取上传的<code class="language-text">file</code></li>
<li>再次获取当前光标, 记录为<code class="language-text">endSelection</code>, 两个selection可以确定上传前的选区</li>
<li>根据<code class="language-text">startSelection</code>和<code class="language-text">endSelection</code>创建一个<code class="language-text">range</code></li>
<li>调用<code class="language-text">executeEdits</code>, 在上一步的<code class="language-text">range</code>中执行文本插入, 插入<code class="language-text">![](Uplaoding...)</code></li>
<li>再次获取当前光标, 记录为<code class="language-text">endSelection</code>,此时光标在<code class="language-text">uploading...</code>之后, 用于后续替换</li>
<li>上传图片</li>
<li>根据<code class="language-text">start</code>和<code class="language-text">end</code>再次创建<code class="language-text">range</code></li>
<li>调用<code class="language-text">executeEdits</code>插入图片<code class="language-text">![](imgUrl)</code></li>
<li>获取光标后立即调用<code class="language-text">setPosition</code>, 可以将光标恢复到图片文字后</li>
<li>完成图片上传</li>
</ul>
<p>代码如下:</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'paste'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onPaste<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">onPaste</span><span class="token punctuation">(</span>e<span class="token operator">:</span> ClipboardEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> editor <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">hasTextFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> startSelection <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> files <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>clipboardData
    <span class="token comment">// 以startSelection为头, 创建range</span>
    <span class="token keyword">const</span> <span class="token function-variable function">createRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>end<span class="token operator">:</span> monaco<span class="token punctuation">.</span>Selection<span class="token punctuation">)</span> <span class="token operator">=></span>
      <span class="token keyword">new</span> <span class="token class-name">monaco</span><span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span>
        startSelection<span class="token punctuation">.</span>startLineNumber<span class="token punctuation">,</span>
        startSelection<span class="token punctuation">.</span>startColumn<span class="token punctuation">,</span>
        end<span class="token punctuation">.</span>endLineNumber<span class="token punctuation">,</span>
        end<span class="token punctuation">.</span>endColumn
      <span class="token punctuation">)</span>
    <span class="token comment">// 使用setTimeout, 可以确保光标恢复在选区之后</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> endSelection <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token function">createRange</span><span class="token punctuation">(</span>endSelection<span class="token punctuation">)</span>
      <span class="token comment">// generate fileName</span>
      <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
      <span class="token comment">// copy img url to editor</span>
      editor<span class="token punctuation">.</span><span class="token function">executeEdits</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> range<span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">![](Uploading...)</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token comment">// get new range</span>
      range <span class="token operator">=</span> <span class="token function">createRange</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">uploadImage</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
      <span class="token comment">// copy img url to editor</span>
      editor<span class="token punctuation">.</span><span class="token function">executeEdits</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> range<span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">![](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      editor<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="markdown预览以及滚动同步" class="heading"><a href="#markdown%E9%A2%84%E8%A7%88%E4%BB%A5%E5%8F%8A%E6%BB%9A%E5%8A%A8%E5%90%8C%E6%AD%A5" aria-hidden="true"><span class="icon icon-link"></span></a>markdown预览以及滚动同步</h3>
<p>要做markdown编辑器, 少不了即时预览功能, 而即时预览又少不了滚动同步</p>
<p>该功能刚开始也花了不少时间去思考如何实现</p>
<p>第一次实现方案是根据编辑器滚动的百分比, 来设置预览区的百分比, 但其实这样并不合适, 举例子就是插入一张图, 只占据编辑器一行, 而渲染区可以占据很大的空间</p>
<p>其实网上也有不少实现方法, 我这里也讲讲我的实现方法, 用起来还是蛮好的..</p>
<h4 id="滚动同步原理" class="heading"><a href="#%E6%BB%9A%E5%8A%A8%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>滚动同步原理</h4>
<p>滚动同步最主要的是渲染当前编辑器中的内容, 而编辑器隐藏的, 是我们不需要渲染的, 换一个角度想, 如果我们把编辑器所隐藏的部分渲染出来, 那它的高度就是渲染区的<code class="language-text">scrollTop</code>, 所以只需要获取编辑器隐藏掉的内容, 然后将其渲染到一个隐藏<code class="language-text">dom</code>中, 计算高度, 将次高度设为渲染区的<code class="language-text">scrollTop</code>, 就可以完成滚动同步</p>
<h4 id="代码实现" class="heading"><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>代码实现</h4>
<h5 id="获取monaco-editor隐藏的行数" class="heading"><a href="#%E8%8E%B7%E5%8F%96monaco-editor%E9%9A%90%E8%97%8F%E7%9A%84%E8%A1%8C%E6%95%B0" aria-hidden="true"><span class="icon icon-link"></span></a>获取monaco-editor隐藏的行数</h5>
<p>由于没有找到对应api直接获取隐藏的行数, 因此用最原始的办法</p>
<ul>
<li>监听editor滚动</li>
<li>获取<code class="language-text">scrollHeight</code>和<code class="language-text">scrollTop</code></li>
<li>使用<code class="language-text">scrollTop/LINE_HEIGHT</code>粗略获取隐藏掉的行数</li>
</ul>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">this</span><span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">onDidScrollChange</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onScroll<span class="token punctuation">)</span>
<span class="token keyword">const</span> onScroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> scrollHeight<span class="token punctuation">,</span> scrollTop <span class="token punctuation">}</span> <span class="token operator">=</span> e
  <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> scrollTop <span class="token operator">/</span> <span class="token constant">LINE_HEIGHT</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onScroll</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div>
<h5 id="渲染并计算隐藏区域的高度" class="heading"><a href="#%E6%B8%B2%E6%9F%93%E5%B9%B6%E8%AE%A1%E7%AE%97%E9%9A%90%E8%97%8F%E5%8C%BA%E5%9F%9F%E7%9A%84%E9%AB%98%E5%BA%A6" aria-hidden="true"><span class="icon icon-link"></span></a>渲染并计算隐藏区域的高度</h5>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">let</span> dom <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">// 获取编辑器dom</span>
<span class="token keyword">function</span> <span class="token function">getDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> HTMLDivElement <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dom<span class="token punctuation">)</span> <span class="token keyword">return</span> dom
  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'markdown-preview'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLDivElement
<span class="token punctuation">}</span>

<span class="token keyword">let</span> _div<span class="token operator">:</span> HTMLDivElement <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">// content为所有markdown内容</span>
<span class="token comment">// lineNumber为上一部获取的行数</span>
<span class="token keyword">function</span> <span class="token function">calcHeight</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lineNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 根据空格分行</span>
  <span class="token keyword">const</span> split <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\n]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 截取前lineNumber行</span>
  <span class="token keyword">const</span> hide <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lineNumber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
  <span class="token comment">// 创建一个div, 并插入到body</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_div<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
    _div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'markdown-preview'</span><span class="token punctuation">)</span>
    _div<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hidden'</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>_div<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 将其宽度设成跟渲染区一样宽度, 方便高度计算</span>
  _div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clientWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
  <span class="token comment">// 渲染内容</span>
  _div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">parseMd</span><span class="token punctuation">(</span>hide<span class="token punctuation">)</span>
  <span class="token comment">// 获取div的高度</span>
  <span class="token comment">// 此处-40是修正渲染区的paddingTop</span>
  <span class="token keyword">return</span> _div<span class="token punctuation">.</span>clientHeight <span class="token operator">-</span> <span class="token number">40</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h5 id="设置渲染区scrolltop" class="heading"><a href="#%E8%AE%BE%E7%BD%AE%E6%B8%B2%E6%9F%93%E5%8C%BAscrolltop" aria-hidden="true"><span class="icon icon-link"></span></a>设置渲染区scrollTop</h5>
<p>获取隐藏区的高度后即可设置对应的scrollTop</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token function">getDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  top
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>此时滚动已经有了较好的同步, 虽然算不上完美, 但我觉得还是一个不错的解决方案.</p>
<h2 id="项目打包" class="heading"><a href="#%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85" aria-hidden="true"><span class="icon icon-link"></span></a>项目打包</h2>
<p>使用了<a href="https://github.com/electron-userland/electron-builder">electron-builder</a>尽心打包, 只需添加<code class="language-text">electronrc.js</code>配置文件即可</p>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  productName<span class="token operator">:</span> <span class="token string">'App name'</span><span class="token punctuation">,</span> <span class="token comment">// App 名称</span>
  appId<span class="token operator">:</span> <span class="token string">'com.App.name'</span><span class="token punctuation">,</span> <span class="token comment">// 程序的唯一标识符</span>
  directories<span class="token operator">:</span> <span class="token punctuation">{</span>
    output<span class="token operator">:</span> <span class="token string">'package'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'dist/**/*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 构建好的dist目录</span>
  <span class="token comment">// copyright: 'Copyright © 2019 zWing',</span>
  asar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否加密</span>
  artifactName<span class="token operator">:</span> <span class="token string">'${productName}-${version}.${ext}'</span><span class="token punctuation">,</span>
  <span class="token comment">// compression: 'maximum', // 压缩程度</span>
  dmg<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// MacOS dmg形式安装完后的界面</span>
    contents<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        x<span class="token operator">:</span> <span class="token number">410</span><span class="token punctuation">,</span>
        y<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'link'</span><span class="token punctuation">,</span>
        path<span class="token operator">:</span> <span class="token string">'/Applications'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        x<span class="token operator">:</span> <span class="token number">130</span><span class="token punctuation">,</span>
        y<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'file'</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mac<span class="token operator">:</span> <span class="token punctuation">{</span>
    icon<span class="token operator">:</span> <span class="token string">'build/icons/icon.png'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  win<span class="token operator">:</span> <span class="token punctuation">{</span>
    icon<span class="token operator">:</span> <span class="token string">'build/icons/icon.png'</span><span class="token punctuation">,</span>
    target<span class="token operator">:</span> <span class="token string">'nsis'</span><span class="token punctuation">,</span>
    legalTrademarks<span class="token operator">:</span> <span class="token string">'Eyas Personal'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  nsis<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// windows的安装包配置</span>
    allowToChangeInstallationDirectory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    oneClick<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    menuCategory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowElevation<span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  linux<span class="token operator">:</span> <span class="token punctuation">{</span>
    icon<span class="token operator">:</span> <span class="token string">'build/icons'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  electronDownload<span class="token operator">:</span> <span class="token punctuation">{</span>
    mirror<span class="token operator">:</span> <span class="token string">'http://npm.taobao.org/mirrors/electron/'</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>最后执行<code class="language-text">electron-builder --config ./electronrc.js -mwl</code>进行打包即可, <code class="language-text">-mwl</code>指的是打包三种平台</p>
<p>更详细的打包配置还是去官方文档查看, 这一部分没有过多深入了解</p>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<p>第一次开发electron应用, 还有许多地方做的不够好, 后续继续完善.</p>
]]></description><link>http://zwingz.github.io/posts/489535157.html</link><guid isPermaLink="false">489535157</guid><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Thu, 05 Sep 2019 05:29:20 GMT</pubDate></item><item><title><![CDATA[Hyrule, 基于github的博客+图床管理工具]]></title><description><![CDATA[<p>本篇博客就在<a href="https://github.com/zWingz/Hyrule">Hyrule</a>下完成。</p>
<p>请先参考, <a href="https://zwing.site/posts/417715171.html">自动部署基于issues的静态博客</a>, 再配合<code class="language-text">Hyrule</code>食用。</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1563553940621.png"></p>
<h2 id="开发缘由" class="heading"><a href="#%E5%BC%80%E5%8F%91%E7%BC%98%E7%94%B1" aria-hidden="true"><span class="icon icon-link"></span></a>开发缘由</h2>
<p>之前一直用<code class="language-text">issues</code>来写博客, 使用<a href="https://github.com/acyortjs/acyort">acyory</a>和<a href="https://github.com/zWingz/acyort-donob-plugins">plugin</a>完成博客搭建. 对我来说已经算很方便, 我只需要打开github即可写自己的博客。</p>
<p>但是有些不足点就是：</p>
<ul>
<li>无法保存草稿</li>
<li>虽然说有<code class="language-text">markdown preview</code>, 但是写作体验不太好, 我一般都在本地编辑器写完后放到<code class="language-text">issues</code></li>
<li>图片虽然可以直接上传到github, 但是上传后无法管理</li>
<li>博客管理起来不够直观</li>
</ul>
<p>后面找到了<a href="https://github.com/Molunerfinn/PicGo">picgo</a>, 再配合<a href="https://github.com/zWingz/picgo-plugin-github-plus">plugin</a>, 可以很好的把github当做图片, 并且在博客中使用。</p>
<p>目前需要解决的点就剩下写作体验和博文管理。</p>
<p>有于是乎就有了<code class="language-text">Hyrule</code>这个App。</p>
<h2 id="功能介绍" class="heading"><a href="#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>功能介绍</h2>
<h3 id="图片管理" class="heading"><a href="#%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>图片管理</h3>
<p><code class="language-text">picgo</code>是个很强大的图床工具, 可以通过自己编写插件来完成不同站点的图床管理。</p>
<p>但对于我自己来说, 我需要的只是<code class="language-text">github</code>, 虽然已有插件支持<code class="language-text">github</code>图片同步, 但是对我来说远不够。</p>
<h4 id="多图床管理" class="heading"><a href="#%E5%A4%9A%E5%9B%BE%E5%BA%8A%E7%AE%A1%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>多图床管理</h4>
<p>在<code class="language-text">Hyrule</code>中, 管理图片是个很简单的事情,  不管是<code class="language-text">private</code>还是<code class="language-text">public</code>，只需要添加对应的图床<code class="language-text">repo</code>即可。而且可以很方便的切换不同图床。但是<code class="language-text">private</code>有一点不足的是，它无法分享，以及获取的时候会稍慢，这是跟<code class="language-text">github</code>有关，后续讲开发经历时候再详细说。</p>
<h4 id="文件夹管理" class="heading"><a href="#%E6%96%87%E4%BB%B6%E5%A4%B9%E7%AE%A1%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>文件夹管理</h4>
<p>除了支持多图床，还支持文件夹形式。</p>
<h4 id="批量管理" class="heading"><a href="#%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>批量管理</h4>
<p>支持批量上传/删除图片，但是有一点不足的是，由于<code class="language-text">git commit</code>的问题，最终必须逐个上传或删除，但用户操作上可以支持批量操作。</p>
<h4 id="更多功能" class="heading"><a href="#%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD" aria-hidden="true"><span class="icon icon-link"></span></a>更多功能</h4>
<p>等待各位提<code class="language-text">feature request</code>。</p>
<h3 id="issues管理" class="heading"><a href="#issues%E7%AE%A1%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>Issues管理</h3>
<p>当然，这个功能不一定所有人都需要用到。</p>
<h4 id="同步编写预览" class="heading"><a href="#%E5%90%8C%E6%AD%A5%E7%BC%96%E5%86%99%E9%A2%84%E8%A7%88" aria-hidden="true"><span class="icon icon-link"></span></a>同步编写预览</h4>
<p>内置<code class="language-text">vscode</code>的<a href="https://github.com/microsoft/monaco-editor">monaco-editor</a>，让写文章就跟写代码一样方便。同时可以同步预览，但是同步滚动的话可能目前做的还不够完美。</p>
<h4 id="直接上传图片" class="heading"><a href="#%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87" aria-hidden="true"><span class="icon icon-link"></span></a>直接上传图片</h4>
<p>其实<code class="language-text">picgo</code>也有<code class="language-text">vscode</code>的插件<a href="https://github.com/PicGo/vs-picgo">vs-picgo</a>，其实就是在<code class="language-text">vscode</code>粘贴图片直接上传到对应图床上，我很喜欢这个功能。</p>
<p>在<code class="language-text">Hyrul</code>中，你可以先上传图片到图床，然后复制其<code class="language-text">markdown</code>格式链接粘贴在文章中。也可以直接在编辑器中上传，它会自动上传到所选的图床中。（当然，前提是需要提供一个<code class="language-text">repo</code>来做默认图床）</p>
<p>在编写同时，也可以同时浏览图片。</p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1563620678505.png"></p>
<p><img src="https://raw.githubusercontent.com/zWingz/imgur/master/1563620700381.png"></p>
<h4 id="保存草稿" class="heading"><a href="#%E4%BF%9D%E5%AD%98%E8%8D%89%E7%A8%BF" aria-hidden="true"><span class="icon icon-link"></span></a>保存草稿</h4>
<p>当文章写到一半，但又不想这么快发布的话，可以保存到本地，下次继续写。</p>
<h4 id="更多功能-1" class="heading"><a href="#%E6%9B%B4%E5%A4%9A%E5%8A%9F%E8%83%BD-1" aria-hidden="true"><span class="icon icon-link"></span></a>更多功能</h4>
<p>等待各位提<code class="language-text">feature request</code>。</p>
<h3 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h3>
<p>目前来说，这<code class="language-text">App</code>已经满足我日常写博客需求。</p>
<p>除了这点，我觉得最重要的是个人在开发过程中的经验积累，包括界面交互设计（虽然目前很丑）、功能设计、技术调研等等。</p>
<p>开发过程中也遇到了不少问题，后续会写一遍文章来记录相关内容。</p>
<h3 id="感谢" class="heading"><a href="#%E6%84%9F%E8%B0%A2" aria-hidden="true"><span class="icon icon-link"></span></a>感谢</h3>
<ul>
<li><a href="https://github.com/Molunerfinn/PicGo">picgo</a></li>
<li><a href="https://github.com/hackjutsu/Lepton">Lepton</a> （界面参考、代码参考）</li>
</ul>
]]></description><link>http://zwingz.github.io/posts/470423296.html</link><guid isPermaLink="false">470423296</guid><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Fri, 19 Jul 2019 16:32:52 GMT</pubDate></item><item><title><![CDATA[js中关于base64的一些事]]></title><description><![CDATA[<h3 id="介绍" class="heading"><a href="#%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>介绍</h3>
<p><code class="language-text">base64</code>其实是一种编码转换方式, 将<code class="language-text">ASCII</code>字符转换成普通文本, 是网络上最常见的用于传输8Bit字节代码的编码方式之一。</p>
<p><code class="language-text">base64</code>由字母<code class="language-text">a-z</code>、<code class="language-text">A-Z</code>、<code class="language-text">0-9</code>以及<code class="language-text">+</code>和<code class="language-text">/</code>, 再加上作为垫字的<code class="language-text">=</code>, 一共65字符组成一个基本字符集,  其他所有字符都可以根据一定规则, 转换成该字符集中的字符。</p>
<blockquote>
<p><code class="language-text">abcde</code> => <code class="language-text">YWJjZGU=</code>
<code class="language-text">ABCDE</code> => <code class="language-text">QUJDREU=</code></p>
</blockquote>
<p>在日常开发中, 最常见的便是将<code class="language-text">blob</code>和<code class="language-text">base64</code>之间相互转换.</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// blob to base64</span>
<span class="token keyword">function</span> <span class="token function">blobTobase64</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> base64 <span class="token operator">=</span> <span class="token string">''</span>
  fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    base64 <span class="token operator">=</span> fileReader<span class="token punctuation">.</span>result <span class="token comment">// 读取base64</span>
  <span class="token punctuation">}</span>
  fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token comment">// 读取blob</span>
<span class="token punctuation">}</span>
<span class="token comment">// base64 to blob</span>
<span class="token keyword">function</span> <span class="token function">dataURItoBlob</span><span class="token punctuation">(</span><span class="token parameter">dataURI</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> mimeString <span class="token operator">=</span> dataURI
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// mime类型</span>
  <span class="token keyword">var</span> byteString <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>dataURI<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//base64 解码</span>
  <span class="token keyword">var</span> arrayBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>byteString<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//创建ArrayBuffer</span>
  <span class="token keyword">var</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span> <span class="token comment">//创建视图</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> byteString<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> byteString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>intArray<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> mimeString <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 转成 blob</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="编码和解码" class="heading"><a href="#%E7%BC%96%E7%A0%81%E5%92%8C%E8%A7%A3%E7%A0%81" aria-hidden="true"><span class="icon icon-link"></span></a>编码和解码</h3>
<h4 id="浏览器" class="heading"><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8" aria-hidden="true"><span class="icon icon-link"></span></a>浏览器</h4>
<p>最新的浏览器自带了两个方法用于<code class="language-text">base64</code>的编码和解码</p>
<p>分别是<code class="language-text">atob</code>和<code class="language-text">btoa</code></p>
<ul>
<li>atob：将<code class="language-text">base64</code>转成<code class="language-text">8bit</code>字节码</li>
<li>btoa：将<code class="language-text">8bit</code>字节码转成<code class="language-text">base64</code></li>
</ul>
<p>对于旧版浏览器, 可以使用<a href="https://github.com/dankogai/js-base64">js-base64</a></p>
<h4 id="node" class="heading"><a href="#node" aria-hidden="true"><span class="icon icon-link"></span></a>Node</h4>
<p>目前<code class="language-text">node</code>中还不支持使用<code class="language-text">atob</code>和<code class="language-text">btoa</code>，但是可以通过<code class="language-text">Buffer</code>来实现, <a href="http://nodejs.cn/api/buffer.html#buffer_class_method_buffer_from_array">参考文档</a></p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> btoa <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  global<span class="token punctuation">.</span><span class="token function-variable function">btoa</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'base64'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> atob <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  global<span class="token punctuation">.</span><span class="token function-variable function">atob</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b64Encoded</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">frome</span><span class="token punctuation">(</span>b64Encoded<span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="转换方式" class="heading"><a href="#%E8%BD%AC%E6%8D%A2%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>转换方式</h3>
<blockquote>
<p>base64编码方式对于中文是不适用的, 因为中文对应多个字节, 因此可以先使用<code class="language-text">encodeURIComponent</code>编码后再进行<code class="language-text">base64</code>编码.</p>
</blockquote>
<p><a href="https://github.com/zWingz/base64">源码</a></p>
<h4 id="编码" class="heading"><a href="#%E7%BC%96%E7%A0%81" aria-hidden="true"><span class="icon icon-link"></span></a>编码</h4>
<ol>
<li>
<p>每三个字节作为一组，每个字节8bit, 一共是24个二进制位。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token string">'ABCD'</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'01000001010000100100001'</span><span class="token punctuation">,</span> <span class="token string">'01000100'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// 每三字节做一组 // 转成8bit</span>
</code></pre></div>
</li>
<li>
<p>将每组的24个二进制位再细分为四组，每组有6个二进制位, 此时为二维数组。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'000011'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'00'</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre></div>
<ul>
<li>二个字节的情况：将这二个字节的一共16个二进制位, 按照上面的规则, 转成三组, 那么最后一项只有4位，则在后面加两个0, 补够6位,  并在第三步对应位置加上垫字符<code class="language-text">=</code>。</li>
<li>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组, 那么最后一项只有2位, 则在后面加上四个0, 并在第三步对应位置加上两个垫字符<code class="language-text">=</code>。</li>
<li>简单说就是, 缺多少位就在后面补多少个0, 直到满6位。<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">'010000'</span><span class="token punctuation">,</span> <span class="token string">'010100'</span><span class="token punctuation">,</span> <span class="token string">'001001'</span><span class="token punctuation">,</span> <span class="token string">'000011'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'010001'</span><span class="token punctuation">,</span> <span class="token string">'000000'</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre></div></li>
</ul>
</li>
<li>
<p>在每组前面加两个00，扩展成32个二进制位，即四个字节。</p>
<blockquote>
<p>规则是这么说, 但这一步我觉得可以忽略, 因为<code class="language-text">00101010</code>和<code class="language-text">101010</code> 是一样的</p>
</blockquote>
</li>
<li>
<p>将每组对应的二进制转成十进制,  在<code class="language-text">base64char</code>字符集中找到对应的字符。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre></div>
<ul>
<li>
<p>每一组都最终都应该转成四个字符</p>
</li>
<li>
<p>如果不足四个字符, 说明明文中并不足3字节, 因此需要补上垫字符<code class="language-text">=</code>, 补够四个字符</p>
</li>
</ul>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre></div>
</li>
<li>
<p>将最后的结果连接成字符串, 则为最终编码结果。</p>
<blockquote>
<p>'ABCD' > 'QUJDRA=='</p>
</blockquote>
</li>
</ol>
<p>根据编码方式来看, 每3个字节将会被编码成四个字符, 如果不足3个字节, 则补上垫字符<code class="language-text">=</code>, 缺几个就补几个。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token comment">// "QQ=="</span>
<span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">'AB'</span><span class="token punctuation">)</span> <span class="token comment">// "QUI="</span>
<span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span> <span class="token comment">// "QUJD"</span>
<span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span> <span class="token comment">// "QUJDRA=="</span>
</code></pre></div>
<h4 id="解码" class="heading"><a href="#%E8%A7%A3%E7%A0%81" aria-hidden="true"><span class="icon icon-link"></span></a>解码</h4>
<p>解码步骤就是跟编码步骤反过来</p>
<ol>
<li>每四个字节分为一组。</li>
<li>将每组的中除了垫字符<code class="language-text">=</code>外的字符, 在<code class="language-text">base64char</code>字符集中找到所在下标。</li>
<li>将十进制下标转成二进制, 如果不够6位（一定不会超过6位）, 则在前面补<code class="language-text">0</code>。<ol>
<li>如果遇到垫字符<code class="language-text">=</code>, 说明其明文不足3字节, 则根据垫字符<code class="language-text">=</code>的数量, 在该组最后一项中去掉对应个数的<code class="language-text">0</code></li>
<li>一个垫字符, 则去掉两个<code class="language-text">0</code></li>
<li>两个垫字符, 则去掉四个<code class="language-text">0</code></li>
</ol></li>
<li>将每组中的二进制字符串连接，此时字符串长度一定是8的倍数，然后每8位分割成一个字节。</li>
<li>通过<code class="language-text">String.fromCharCode</code>将二进制转成字符, 然后拼接</li>
<li>将各个字符连接, 为最终解码结果。</li>
</ol>
<h3 id="题外-进制转换" class="heading"><a href="#%E9%A2%98%E5%A4%96-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2" aria-hidden="true"><span class="icon icon-link"></span></a>题外-进制转换</h3>
<ul>
<li>parseInt(str, radix): 根据radix可以将字符串转成十进制</li>
<li>initValue.toString(radix): 将initValue转成其他进制</li>
</ul>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// n进制转十进制</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'1000'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span>
  <span class="token string">'1000'</span><span class="token punctuation">,</span>
  <span class="token number">16</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span>
  <span class="token comment">// 4096</span>

  <span class="token comment">// 进制间转换</span>
  <span class="token number">10</span>
<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
    <span class="token comment">// "1010", 10进制转2进制</span>
    <span class="token number">0xff</span>
  <span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// "11111111", 16进制转2进制</span>
</code></pre></div>
<h3 id="参考" class="heading"><a href="#%E5%8F%82%E8%80%83" aria-hidden="true"><span class="icon icon-link"></span></a>参考</h3>
<p><a href="https://www.zhangxinxu.com/wordpress/2018/08/js-base64-atob-btoa-encode-decode/">原来浏览器原生支持JS Base64编码解码</a>
<a href="http://www.ruanyifeng.com/blog/2008/06/base64.html">Base64笔记</a></p>
]]></description><link>http://zwingz.github.io/posts/438141674.html</link><guid isPermaLink="false">438141674</guid><category><![CDATA[Js]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Mon, 29 Apr 2019 03:57:26 GMT</pubDate></item><item><title><![CDATA[在小程序中使用base64展示图片]]></title><description><![CDATA[<h3 id="背景" class="heading"><a href="#%E8%83%8C%E6%99%AF" aria-hidden="true"><span class="icon icon-link"></span></a>背景</h3>
<ul>
<li>项目使用<code class="language-text">taro</code>进行开发</li>
<li>需求是通过<code class="language-text">api</code>请求, 获取图片的<code class="language-text">base64</code>字符串, 并且将图片展示出来</li>
<li>小程序中单次调用<code class="language-text">setData</code>数据不能超过<code class="language-text">1024kb</code></li>
</ul>
<h3 id="分析" class="heading"><a href="#%E5%88%86%E6%9E%90" aria-hidden="true"><span class="icon icon-link"></span></a>分析</h3>
<p>根据<code class="language-text">setData</code>的限制, 图片的大小不能超过<code class="language-text">1024kb</code>, 否则<code class="language-text">setData</code>的时候会超过限制而报错。</p>
<p>因此, 可以考虑使用数组来存储数据, 并且将数据分批写入。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> baseStr <span class="token operator">=</span> <span class="token string">'....'</span> <span class="token comment">// > 1024kb</span>
<span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> baseStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> step<span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> baseStr<span class="token punctuation">.</span><span class="token function">subStr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>然而, 对于<code class="language-text">taro</code>而言, 数据的修改通过<code class="language-text">this.setState</code>来完成, 不能像原生小程序那样只修改部分数据。
比如:</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// taro</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 小程序</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string">'a.b'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string">'c[0].b'</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>因此, <code class="language-text">taro</code>每次的<code class="language-text">setState</code>都会把整个数据带上. 不符合<code class="language-text">setData</code>限制。</p>
<p>倘若<code class="language-text">taro</code>能像<code class="language-text">setData</code>一样可以支持单独修改某一部分数据, 是否可以?</p>
<p>答案也是否定的</p>
<p>在<code class="language-text">taro</code>中, 在<code class="language-text">render</code>方法用到的数据, 最终都会被挂在<code class="language-text">this.__state</code>上, 而<code class="language-text">this.__state</code>最终也会反应到<code class="language-text">data</code>上, 所以也是不可取。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Taro<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 编译后</span>
<span class="token comment">// ...</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>__state<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  aa<span class="token operator">:</span> aa
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// ...</span>
</code></pre></div>
<p>最终还是只能用原生的方法来实现。</p>
<h3 id="解决" class="heading"><a href="#%E8%A7%A3%E5%86%B3" aria-hidden="true"><span class="icon icon-link"></span></a>解决</h3>
<p>对于数据处理, 则像上面一样, 分次写入数据。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token operator">:</span> <span class="token punctuation">{</span>
    arr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> baseStr <span class="token operator">=</span> <span class="token string">'....'</span> <span class="token comment">// > 1024kb</span>
    <span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> baseStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> step<span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">arr[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">`</span></span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> baseStr<span class="token punctuation">.</span><span class="token function">subStr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>数据处理完毕后, 需要将数据拼接成原字符串, 并且赋值给<code class="language-text">src</code>, 而小程序<code class="language-text">wxml</code>不支持嵌入复杂表达式。</p>
<p>但是小程序中的<code class="language-text">wxs</code>却可以进行复杂运算, 并且在<code class="language-text">wxml</code>中使用, <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/01wxs-module.html">请参考</a>。
那么便可以将拼接字符串的操作放在<code class="language-text">wxs</code>中, 然后在<code class="language-text">wxml</code>中调用即可</p>
<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  function join(arr) { return arr.join('') } module.exports.join = join;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{m1.join(arr)}}<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aspectFill<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-load</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>这样便能使用<code class="language-text">base64</code>来展示图片。</p>
]]></description><link>http://zwingz.github.io/posts/434058564.html</link><guid isPermaLink="false">434058564</guid><category><![CDATA[小程序]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Wed, 17 Apr 2019 02:04:08 GMT</pubDate></item><item><title><![CDATA[isPlainObject 判断一个纯对象]]></title><description><![CDATA[<h2 id="判断是否为对象" class="heading"><a href="#%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%AF%B9%E8%B1%A1" aria-hidden="true"><span class="icon icon-link"></span></a>判断是否为对象</h2>
<p>其实<code class="language-text">js</code>中一切都是对象, 但是这里讨论的对象只是一般对象, 非数组/字符串/方法/等等
形如<code class="language-text">{}</code>, <code class="language-text">Object.create()</code>, <code class="language-text">new AnyClass()</code> 等等</p>
<h3 id="typeof" class="heading"><a href="#typeof" aria-hidden="true"><span class="icon icon-link"></span></a>typeof</h3>
<p>通过<code class="language-text">typeof arg === &#39;object&#39;</code>可以得出的是<code class="language-text">arg</code>为<code class="language-text">字面变量</code>/<code class="language-text">null</code>/<code class="language-text">array</code>
因此, 如果要通过<code class="language-text">typeof</code>判断是否为<code class="language-text">object</code>, 则要排除<code class="language-text">null</code>和<code class="language-text">array</code></p>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isObj</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> arg <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="objectprototypetostring" class="heading"><a href="#objectprototypetostring" aria-hidden="true"><span class="icon icon-link"></span></a>Object.prototype.toString</h3>
<p>使用<code class="language-text">toString</code>来判断一个对象, 往往能得到更详细的信息</p>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [object Function]</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// [object Null]</span>
<span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// [object Undefined]</span>
<span class="token comment">// ...</span>
<span class="token comment">// 排除了内置的Date, RegExp等等</span>
</code></pre></div>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isObj</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Object]'</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2 id="判断纯对象" class="heading"><a href="#%E5%88%A4%E6%96%AD%E7%BA%AF%E5%AF%B9%E8%B1%A1" aria-hidden="true"><span class="icon icon-link"></span></a>判断纯对象</h2>
<p>一般是<code class="language-text">key/value</code>形式的对象
还是要根据实际情况来确定判断方式
主要是对<code class="language-text">Object.create</code>以及<code class="language-text">new AnyClass</code>形式的判断</p>
<p>使用<code class="language-text">typescript</code>来表示</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PlainObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="仅包括字面变量" class="heading"><a href="#%E4%BB%85%E5%8C%85%E6%8B%AC%E5%AD%97%E9%9D%A2%E5%8F%98%E9%87%8F" aria-hidden="true"><span class="icon icon-link"></span></a>仅包括字面变量</h3>
<p>既通过字面变量声明或者<code class="language-text">new Object</code>方式的对象</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isPlainObj</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    value <span class="token operator">&amp;&amp;</span> <span class="token comment">// 排除掉 null</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">.</span>constructor <span class="token operator">!==</span> <span class="token string">'function'</span> <span class="token operator">||</span> <span class="token comment">// 除了Object外的一些Class</span>
      value<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Object'</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">isPlainObj</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isPlainObj</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div>
<h3 id="仅包括字面变量以及objectcreatenull" class="heading"><a href="#%E4%BB%85%E5%8C%85%E6%8B%AC%E5%AD%97%E9%9D%A2%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8Aobjectcreatenull" aria-hidden="true"><span class="icon icon-link"></span></a>仅包括字面变量以及Object.create(null)</h3>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isPlainObj</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 先判断是否为一般对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token comment">// 获取原型, 后续判断原型是否为null或者Object</span>
  <span class="token keyword">return</span> prototype <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> prototype <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 相当于 prototype === Object.prototype</span>
<span class="token punctuation">}</span>

<span class="token function">isPlainObj</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">isPlainObj</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">isPlainObj</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre></div>
<h3 id="包括字面变量以及构造函数生成的对象" class="heading"><a href="#%E5%8C%85%E6%8B%AC%E5%AD%97%E9%9D%A2%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E7%9A%84%E5%AF%B9%E8%B1%A1" aria-hidden="true"><span class="icon icon-link"></span></a>包括字面变量以及构造函数生成的对象</h3>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 先判断是否为对象</span>
<span class="token keyword">function</span> <span class="token function">isObjectObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">isObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span>
    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Object]'</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ctor<span class="token punctuation">,</span> prot
  <span class="token comment">// 首先是一个对象, 通过typeof和toString判断</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObjectObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// If has modified constructor</span>
  <span class="token comment">// 判断构造函数是否为function</span>
  ctor <span class="token operator">=</span> o<span class="token punctuation">.</span>constructor
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ctor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// If has modified prototype</span>
  <span class="token comment">// 判断原型是否也是一个对象</span>
  prot <span class="token operator">=</span> ctor<span class="token punctuation">.</span>prototype
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObjectObject</span><span class="token punctuation">(</span>prot<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token comment">// If constructor does not have an Object-specific method</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prot<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'isPrototypeOf'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Most likely a plain Object</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="lodash实现" class="heading"><a href="#lodash%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>lodash实现</h3>
<p><a href="https://github.com/lodash/lodash/blob/master/isPlainObject.js">源码</a></p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**
    isObjectLike就是判断obj !== null &amp;&amp; typeof obj === 'object'
    getTag: 就是拿Object.prototype.toString
*/</span>
<span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObjectLike</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getTag</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Object.create(null)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> value
  <span class="token comment">// 获取最顶级的proto</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 如果最最顶级proto就是value.prototype, 则为true</span>
  <span class="token comment">// 既Object.prototype</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> proto
<span class="token punctuation">}</span>
</code></pre></div>
]]></description><link>http://zwingz.github.io/posts/429400472.html</link><guid isPermaLink="false">429400472</guid><category><![CDATA[Js]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Thu, 04 Apr 2019 17:35:40 GMT</pubDate></item><item><title><![CDATA[介绍三个React组件]]></title><description><![CDATA[<p>简单介绍三个React组件吧。</p>
<ul>
<li>Image</li>
<li>Table</li>
<li>Form</li>
</ul>
<h3 id="react-image" class="heading"><a href="#react-image" aria-hidden="true"><span class="icon icon-link"></span></a>React-Image</h3>
<p><a href="https://github.com/zWingz/react-image">源码</a>  <a href="https://zwing.site/react-image/#/">Demo</a></p>
<p>一个用于加载/预览图片的组件</p>
<h4 id="image" class="heading"><a href="#image" aria-hidden="true"><span class="icon icon-link"></span></a>Image</h4>
<ul>
<li>自动管理图片的<code class="language-text">loading</code>和<code class="language-text">error</code>状态, 并显示不同提示.</li>
<li>通过<code class="language-text">IntersectionObserver</code>来实现图片懒加载</li>
<li>默认使用<code class="language-text">Preview</code>来进行图片预览</li>
<li>可以通过<code class="language-text">group</code>来管理图片预览列表, 同一个<code class="language-text">group</code>的图片会出现在预览列表中</li>
</ul>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Image <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@zzwing/react-image'</span>

<span class="token punctuation">;</span><span class="token operator">&lt;</span>Image src<span class="token operator">=</span><span class="token string">'any.jpg'</span> width<span class="token operator">=</span><span class="token string">'200px'</span> height<span class="token operator">=</span><span class="token string">'200px'</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
</code></pre></div>
<h4 id="preview" class="heading"><a href="#preview" aria-hidden="true"><span class="icon icon-link"></span></a>Preview</h4>
<p>图片浏览器, 可以放大/移动/切换等. 已集成到<code class="language-text">Image</code>中, 可以通过<code class="language-text">preview={false}</code>关闭预览功能.
也可以直接通过<code class="language-text">api</code>调用</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> PreviewApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@zzwing/react-image'</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.jpg'</span><span class="token punctuation">,</span> <span class="token string">'2.jpg'</span><span class="token punctuation">,</span> <span class="token string">'3.jpg'</span><span class="token punctuation">]</span>
<span class="token comment">// use index</span>
PreviewApi<span class="token punctuation">.</span><span class="token function">preview</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span>
<span class="token comment">// or use src</span>
PreviewApi<span class="token punctuation">.</span><span class="token function">preview</span><span class="token punctuation">(</span><span class="token string">'2.jpg'</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span>
</code></pre></div>
<p> <img src="https://user-gold-cdn.xitu.io/2019/4/1/169d8317e3b43999?w=1173&#x26;h=858&#x26;f=png&#x26;s=101695"> </p>
<h3 id="react-table" class="heading"><a href="#react-table" aria-hidden="true"><span class="icon icon-link"></span></a>React-Table</h3>
<p> <a href="https://github.com/zWingz/react-table">源码</a>  <a href="https://zwing.site/react-table/#/">Demo</a></p>
<p>可固定表头及两侧的表格.</p>
<h4 id="antd的表格" class="heading"><a href="#antd%E7%9A%84%E8%A1%A8%E6%A0%BC" aria-hidden="true"><span class="icon icon-link"></span></a>antd的表格</h4>
<p><code class="language-text">antd</code>的表格也能满足该功能, 但也有几个不足点(我个人觉得)</p>
<ul>
<li>要求每一列都要写入<code class="language-text">width</code>用来固定列宽: 通过拆分<code class="language-text">thead</code>和<code class="language-text">tbody</code>来固定表头, 通过<code class="language-text">colgroup</code>来完成列宽的固定</li>
<li>表格高度不能自适应(有可能我使用方式不对?)</li>
<li>还有一点就是<code class="language-text">antd</code>的表格功能太强大, 有很多功能我是用不上, 无形中增加了代码.</li>
</ul>
<h4 id="解决方法" class="heading"><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>解决方法</h4>
<p>指定表格的<code class="language-text">scrollTarget</code>, 既<code class="language-text">滚动</code>的目标, 默认是<code class="language-text">document.scrollingElement</code>.</p>
<ul>
<li>当表头滚动到顶部时, 使用<code class="language-text">transform</code>固定,由于属于同一个<code class="language-text">table</code>,  这样能解决<code class="language-text">tbody</code>和<code class="language-text">thead</code>不对齐的问题. </li>
<li>固定两侧是通过<code class="language-text">table</code>冗余实现(antd也是如此), 但只会冗余需要固定的部分。通过<code class="language-text">absolute</code> + <code class="language-text">padding</code> 实现两侧固定.</li>
<li>最后通过不同表格的同一行中的最大高度, 来设定其他表格该行的高度, 来达到高度同步</li>
<li>由于表格高度超过容器高度, 横向滚动条会被'隐藏', 因此提供了一个<code class="language-text">scroller</code>来模拟横向滚动条, 也就是说任何时候都可以拉动滚动条. (当然也可以通过<code class="language-text">shift</code> + 滚轮完成滚动)</li>
</ul>
<h4 id="不足点" class="heading"><a href="#%E4%B8%8D%E8%B6%B3%E7%82%B9" aria-hidden="true"><span class="icon icon-link"></span></a>不足点</h4>
<ul>
<li>由于<code class="language-text">thead</code>使用了<code class="language-text">transform</code>, 因此也带来了几个问题<ul>
<li>当<code class="language-text">thead</code>设了<code class="language-text">transform</code>之后, <code class="language-text">border</code>会失效, 因此使用了<code class="language-text">box-shadow</code>来模拟<code class="language-text">border</code>. 当然, </li>
</ul></li>
<li>监听<code class="language-text">mousewheel</code>来设置<code class="language-text">transform</code>的时候, 因为滚动和视图更新有延迟, 在<code class="language-text">firfox</code>和<code class="language-text">safari</code>会有抖动, 在<code class="language-text">chrome</code>下表现良好.<ul>
<li>在<code class="language-text">chrome</code>和<code class="language-text">firfox</code>分别加入<code class="language-text">window.addEventListener(&#39;scroll&#39;, console.log)</code>, 鼠标滚动一次, 会发现<code class="language-text">ff</code>下会触发多次回调, 而<code class="language-text">chrome</code>只会触发一次</li>
</ul></li>
<li><code class="language-text">safari</code>下, <code class="language-text">thead</code>在被固定后的<code class="language-text">box-shadow</code>会失效.</li>
</ul>
<h4 id="使用方式" class="heading"><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>使用方式</h4>
<p>和<code class="language-text">antd</code>类似</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">import { Table } from &#39;@zzwing/react-table&#39;
const data = [{key1: &#39;123&#39;, keyn: &#39;123&#39;}]
const columns = [{
    title: &#39;column1&#39;,
    fixed: &#39;left&#39;,
    dataIndex: &#39;key1&#39;
}, { /* ... */} , {
    title: &#39;column2&#39;,
    fixed: &#39;right&#39;,
    dataIndex: &#39;keyn&#39;
}]

&lt;Table dataSource={data} columns={columns} rowKey=&#39;key1&#39;/&gt;</code></pre></div>
<p><img src="https://user-gold-cdn.xitu.io/2019/4/1/169d831914e5a110?w=834&#x26;h=794&#x26;f=png&#x26;s=146069"></p>
<h3 id="react-form-wrapper" class="heading"><a href="#react-form-wrapper" aria-hidden="true"><span class="icon icon-link"></span></a>React-Form-Wrapper</h3>
<p><a href="https://github.com/zWingz/react-form-wrapper">源码</a>  <a href="https://zwing.site/react-form-wrapper/#/">Demo</a></p>
<p>封装了<code class="language-text">onChange</code>和<code class="language-text">value</code>的高阶组件, 与<code class="language-text">antd</code>的<code class="language-text">form</code>组件类似
不过只包含最基础的数据绑定, 也可通过<code class="language-text">options</code>来自定义数据的读写.</p>
<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token keyword">import</span> FormWrapperHoc <span class="token keyword">from</span> <span class="token string">'@zzwing/react-form-wrapper'</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> itemWrapper<span class="token punctuation">,</span> getState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>formWrapper
    <span class="token keyword">const</span> Input <span class="token operator">=</span> <span class="token function">itemWrapper</span><span class="token punctuation">(</span><span class="token string">'valueKey'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token comment">/* options */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>valueKey
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>Input<span class="token punctuation">}</span><span class="token plain-text">
        you can get value for </span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<h4 id="链式key的读写实现" class="heading"><a href="#%E9%93%BE%E5%BC%8Fkey%E7%9A%84%E8%AF%BB%E5%86%99%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>链式key的读写实现</h4>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">const Input = itemWrapper(&#39;a.b.c.d&#39;)(&lt;input /&gt;)</code></pre></div>
<p>按照一般实现, 会通过遍历每一层来<code class="language-text">set</code>/<code class="language-text">get</code>数据.</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">const _state = {}
const pathArr = path.split(&#39;.&#39;)
let tmp = _state
pathArr.forEach((each, index) =&gt; {
    if(index === pathArr.length - 1) {
        // do something
    }
    if(each in tmp) {
        tmp = tmp[each]
    } else {
        tmp[each] = {}
        tmp = tmp[each]
    }
})</code></pre></div>
<p>最近改了一种实现方法, 通过一个<code class="language-text">chain</code>对象直接存储<code class="language-text">path</code>对应的数据
<a href="https://codesandbox.io/s/qzm589k42j?fontsize=14"><img src="https://user-gold-cdn.xitu.io/2019/4/1/169d83173a8c345a?w=201&#x26;h=42&#x26;f=svg&#x26;s=21059" alt="Edit chain object"></a></p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// a.b.c.d</span>
<span class="token keyword">const</span> chain <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> chain<span class="token punctuation">[</span><span class="token string">'a.b'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">'a.b'</span><span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> chain<span class="token punctuation">[</span><span class="token string">'a.b.c'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">'a.b.c'</span><span class="token operator">:</span> <span class="token punctuation">{</span> d<span class="token operator">:</span> chain<span class="token punctuation">[</span><span class="token string">'a.b.c.d'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">'a.b.c.d'</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre></div>
<ul>
<li>对于<code class="language-text">get</code>操作, 则可以直接从<code class="language-text">chain[path]</code>中获取数据</li>
<li>对于<code class="language-text">set</code>操作, 则可以直接修改<code class="language-text">chain[&#39;a.b.c&#39;].d = &#39;str&#39;</code>, 最后修改<code class="language-text">chain[&#39;a.b.c.d&#39;] = &#39;str</code></li>
<li>因为修改的是同一个引用, 所以<code class="language-text">set</code>操作会同步<code class="language-text">chain.a</code>和<code class="language-text">chain.a.b</code></li>
</ul>
<h3 id="最后" class="heading"><a href="#%E6%9C%80%E5%90%8E" aria-hidden="true"><span class="icon icon-link"></span></a>最后</h3>
<p><code class="language-text">antd</code>是一个功能很全的UI库
但又正因为它功能很全，而大部分我是不需要，无形中可能添加了不少的代码量
所以我更喜欢是参考<code class="language-text">antd</code>的实现，去开发满足个人需求的组件
自己开发的组件，自己会更清楚，使用起来更加顺手，扩展起来也会很方便
不过对于<code class="language-text">DatePicker</code>这类组件，我想我还是直接用<code class="language-text">antd</code>的吧</p>
<hr>
<p>希望这几个组件能帮到你.</p>
]]></description><link>http://zwingz.github.io/posts/427994027.html</link><guid isPermaLink="false">427994027</guid><category><![CDATA[React]]></category><category><![CDATA[Component]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Tue, 02 Apr 2019 02:30:29 GMT</pubDate></item><item><title><![CDATA[自动部署基于issues的静态博客]]></title><description><![CDATA[<p>通过<code class="language-text">issues</code>来写博客文章，并自动部署到<code class="language-text">gh-page</code>。</p>
<h3 id="介绍" class="heading"><a href="#%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>介绍</h3>
<ul>
<li><a href="https://acyort.com/">acyort</a> 引擎核心，用来管理插件、工作流以及<code class="language-text">html</code>输出等。</li>
<li><a href="https://github.com/zWingz/acyort-donob-plugins">acyort-donob-plugins</a>：是<code class="language-text">acyort</code>的插件，用来拉取<code class="language-text">issues</code>数据并进行处理，处理完后将对应模板进行渲染。</li>
</ul>
<h3 id="整体步骤" class="heading"><a href="#%E6%95%B4%E4%BD%93%E6%AD%A5%E9%AA%A4" aria-hidden="true"><span class="icon icon-link"></span></a>整体步骤</h3>
<ul>
<li>在github新建一个 <a href="https://github.com/new">repo</a></li>
<li>写入配置文件</li>
<li>添加 <a href="https://github.com/settings/tokens/new">github token</a>, 权限为<code class="language-text">repo::public_repo</code></li>
<li>在 <a href="https://circleci.com">circleCi</a> 加入对应的<code class="language-text">repo</code>并创建 <a href="https://circleci.com/account/api">circleci token</a>(需要保存下来)</li>
<li>在<code class="language-text">circleci</code>中对应项目加入<code class="language-text">variable</code>.</li>
<li>在<code class="language-text">repo</code>中添加<code class="language-text">webhook</code></li>
<li>写<code class="language-text">issues</code></li>
</ul>
<h3 id="关于-gh-pages" class="heading"><a href="#%E5%85%B3%E4%BA%8E-gh-pages" aria-hidden="true"><span class="icon icon-link"></span></a>关于 gh-pages</h3>
<p><code class="language-text">gh-pages</code>有两种形式, 具体请看<a href="https://help.github.com/en/articles/user-organization-and-project-pages">官方说明</a>:</p>
<ul>
<li>
<p>以<code class="language-text">username.github.io</code>命名的项目，是分配给每个用户的<code class="language-text">user page</code>。</p>
</li>
<li>
<p>另一种是<code class="language-text">prject page</code>, 各项目中通过<code class="language-text">gh-pages</code>分支或者通过<code class="language-text">docs</code>文件夹所生成的<code class="language-text">gh-pages</code>。</p>
</li>
</ul>
<p>无论、以何种方式来建立起<code class="language-text">gh-pages</code>都可以。</p>
<p>但是如果以<code class="language-text">username.github.io</code>来创建的话，内容只能放在<code class="language-text">master</code>分支，并不能像其他<code class="language-text">repo</code>一样通过<code class="language-text">gh-pages</code>或者<code class="language-text">docs</code>文件夹生成。</p>
<p>下面统一用<code class="language-text">username.github.io</code> 来创建<code class="language-text">gh-pages</code></p>
<h3 id="详细步骤" class="heading"><a href="#%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4" aria-hidden="true"><span class="icon icon-link"></span></a>详细步骤</h3>
<h4 id="创建repo" class="heading"><a href="#%E5%88%9B%E5%BB%BArepo" aria-hidden="true"><span class="icon icon-link"></span></a>创建repo</h4>
<ul>
<li>创建一个<code class="language-text">username.github.io</code>的<code class="language-text">repo</code>，负责接收生成后的<code class="language-text">html</code>内容, 并生成<code class="language-text">user page</code>。</li>
<li>创建一个<code class="language-text">blog-config</code>(名字随意)，用来管理<code class="language-text">blog</code>配置，以及<code class="language-text">issues</code>管理。</li>
</ul>
<h4 id="申请两个-token" class="heading"><a href="#%E7%94%B3%E8%AF%B7%E4%B8%A4%E4%B8%AA-token" aria-hidden="true"><span class="icon icon-link"></span></a>申请两个 token</h4>
<p>两个<code class="language-text">token</code>都要自行保存, 关闭就找不回来。</p>
<ul>
<li>
<p>github token</p>
<p>申请一个具有写权限的<a href="https://github.com/settings/tokens/new">github token</a>，<code class="language-text">scope</code>选择<code class="language-text">repo::public_repo</code>, 用于将生成后的文件通过<code class="language-text">api</code>直接<code class="language-text">push</code>到该项目中。</p>
</li>
<li>
<p>circleci token</p>
<p>申请一个<a href="https://circleci.com/account/api">circleci token</a>, 用来通过<code class="language-text">webhook</code>来触发<code class="language-text">circle build</code>。</p>
</li>
</ul>
<h4 id="写入配置文件" class="heading"><a href="#%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a>写入配置文件</h4>
<p>在<code class="language-text">blog-config</code>中，创建以下文件:</p>
<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">|-.circleci
	|- config.yml // circleCi 的配置文件
|-config.yml // acyort 配置文件
|-package.json // 这个不用说</code></pre></div>
<ul>
<li>
<p>package.json</p>
<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"blog name"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"acyort flow"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"acyort"</span><span class="token operator">:</span> <span class="token string">"^3.1.1"</span><span class="token punctuation">,</span>
    <span class="token property">"acyort-donob-renderer"</span><span class="token operator">:</span> <span class="token string">"^1.5.0"</span><span class="token punctuation">,</span>
    <span class="token property">"acyort-plugin-fetch-issues"</span><span class="token operator">:</span> <span class="token string">"^1.3.1"</span><span class="token punctuation">,</span>
    <span class="token property">"acyort-plugin-rss"</span><span class="token operator">:</span> <span class="token string">"^1.5.0"</span><span class="token punctuation">,</span>
    <span class="token property">"acyort-templates-donob-plus"</span><span class="token operator">:</span> <span class="token string">"^1.5.1"</span><span class="token punctuation">,</span>
    <span class="token property">"gh-pages"</span><span class="token operator">:</span> <span class="token string">"^2.0.1"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
</li>
<li>
<p>config.yml(acyort 配置文件)</p>
<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> blog name <span class="token comment"># 博客名称</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> blog desc <span class="token comment"># 博客简介</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//username.github.io <span class="token comment"># 博客url</span>
<span class="token key atrule">template</span><span class="token punctuation">:</span> acyort<span class="token punctuation">-</span>templates<span class="token punctuation">-</span>donob<span class="token punctuation">-</span>plus
<span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">Archives</span><span class="token punctuation">:</span> /archives/
  <span class="token key atrule">Tags</span><span class="token punctuation">:</span> /tags/
<span class="token key atrule">repository</span><span class="token punctuation">:</span> username/blog<span class="token punctuation">-</span>config <span class="token comment"># 写 issues 的项目</span>
<span class="token key atrule">public</span><span class="token punctuation">:</span> public
<span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai
<span class="token key atrule">plugins</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> acyort<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>fetch<span class="token punctuation">-</span>issues
  <span class="token punctuation">-</span> acyort<span class="token punctuation">-</span>donob<span class="token punctuation">-</span>renderer
</code></pre></div>
</li>
<li>
<p>.circleci/config.yml</p>
<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token comment"># 注意这个文件名为 config.yml，在 .circleci 目录下</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">2</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">docker</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span>latest
    <span class="token key atrule">working_directory</span><span class="token punctuation">:</span> ~/acyort
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token key atrule">only</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> master
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> checkout
      <span class="token punctuation">-</span> <span class="token key atrule">restore_cache</span><span class="token punctuation">:</span>
          <span class="token key atrule">keys</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> yarn<span class="token punctuation">-</span>packages<span class="token punctuation">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> checksum "yarn.lock" <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install
      <span class="token punctuation">-</span> <span class="token key atrule">save_cache</span><span class="token punctuation">:</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> Save Yarn Package Cache
          <span class="token key atrule">key</span><span class="token punctuation">:</span> yarn<span class="token punctuation">-</span>packages<span class="token punctuation">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> checksum "yarn.lock" <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">paths</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> ~/.cache/yarn
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn deploy
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> git config user.name "" <span class="token comment"># 你的 github username</span>
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> git config user.email "" <span class="token comment"># 你的 github email</span>
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npx gh<span class="token punctuation">-</span>pages <span class="token punctuation">-</span>d public <span class="token punctuation">-</span>r https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>gh_token<span class="token punctuation">}</span>@github.com/username/username.github.io.git <span class="token punctuation">-</span>b master <span class="token punctuation">-</span>m "Updated by circleci <span class="token punctuation">-</span> `date`" <span class="token comment"># ${gh_token}, 这个token就是具有写权限的github token, 会在 circleci 配置。</span>
</code></pre></div>
</li>
</ul>
<h4 id="配置circleci" class="heading"><a href="#%E9%85%8D%E7%BD%AEcircleci" aria-hidden="true"><span class="icon icon-link"></span></a>配置circleci</h4>
<ul>
<li>将<code class="language-text">blog-config</code>项目加入到<code class="language-text">circleci</code>中。</li>
<li>选择<code class="language-text">linux</code>和<code class="language-text">node</code>环境。</li>
<li>点<code class="language-text">start build</code>, 此时应该是<code class="language-text">fail</code>的, 因为<code class="language-text">gh_token</code>还未加入到环境变量中。</li>
<li>点左侧栏的<code class="language-text">Job</code>, 找到<code class="language-text">blog-config</code>项目, 点击设置</li>
<li>在<code class="language-text">BUILD SETTINGS</code>中找到<code class="language-text">Environment Variables</code></li>
<li>点击<code class="language-text">Add variable</code></li>
<li><code class="language-text">name</code>为<code class="language-text">gh_token</code>(这里名字要跟<code class="language-text">config.yml</code>中<code class="language-text">${gh_token}</code>一样), <code class="language-text">value</code>填入刚刚申请到的<code class="language-text">gh-token</code>。</li>
<li>回到<code class="language-text">circleci</code>项目中, 点击上一次的<code class="language-text">build fail</code>条目, 右上角有<code class="language-text">rebuild</code></li>
<li>此时如无意外, 应该能成功<code class="language-text">build</code>, 并且<code class="language-text">username.github.io</code>这个仓库也有对应文件。</li>
</ul>
<h4 id="配置webhook" class="heading"><a href="#%E9%85%8D%E7%BD%AEwebhook" aria-hidden="true"><span class="icon icon-link"></span></a>配置webhook</h4>
<p>回到<code class="language-text">blog-config</code>项目中配置</p>
<ul>
<li>点<code class="language-text">settings</code></li>
<li>点<code class="language-text">webhook</code></li>
<li>点<code class="language-text">Add webhook</code></li>
<li><code class="language-text">Payload URL</code>填入'<a href="https://circleci.com/api/v1.1/project/github/:username/:project/tree/:branch?circle-token=:token">https://circleci.com/api/v1.1/project/github/:username/:project/tree/:branch?circle-token=:token</a>' (自行替换相应字段), 其中<code class="language-text">:token</code>是从<code class="language-text">circleci</code>中申请的<code class="language-text">token</code>)</li>
<li><code class="language-text">Content-Type</code>选择<code class="language-text">application/json</code></li>
<li>下面选择<code class="language-text">let me select xxx</code>, 并勾选<code class="language-text">issues</code>选项</li>
<li>最下面点击<code class="language-text">save</code></li>
<li>完成</li>
</ul>
<h4 id="写issues" class="heading"><a href="#%E5%86%99issues" aria-hidden="true"><span class="icon icon-link"></span></a>写issues</h4>
<p>至此博客已经算搭建完成，只需要在<code class="language-text">blog-config</code>写<code class="language-text">issues</code>, 就会同步部署到<code class="language-text">gh-pages</code>。</p>
<h3 id="最后" class="heading"><a href="#%E6%9C%80%E5%90%8E" aria-hidden="true"><span class="icon icon-link"></span></a>最后</h3>
<p>更多配置请参考</p>
<ul>
<li><a href="https://acyort.com/">acyort</a></li>
<li><a href="https://github.com/zWingz/acyort-donob-plugins">acyort-donob-plugins</a></li>
<li><a href="https://github.com/zWingz/my-blog-config">blog-config</a></li>
</ul>
]]></description><link>http://zwingz.github.io/posts/417715171.html</link><guid isPermaLink="false">417715171</guid><category><![CDATA[工具介绍]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Wed, 06 Mar 2019 09:55:14 GMT</pubDate></item><item><title><![CDATA[lerna与lerna-changelog使用介绍]]></title><description><![CDATA[<p><a href="https://github.com/lerna/lerna">lerna</a>用于管理多<code class="language-text">package</code>，且各<code class="language-text">package</code>可能会互相引用的项目。</p>
<p><code class="language-text">lerna</code>通过两种方式管理子项目的版本号：</p>
<ul>
<li>Fixed/Locked mode (default)：每次执行<code class="language-text">lerna publish</code>都会将所涉及到的包升级到最新一个版本，开发者只需要确定发布下一个<code class="language-text">version</code>。</li>
<li>Independent mode：由开发者自行管理子项目的<code class="language-text">version</code>，每次执行<code class="language-text">lerna publish</code>都需要确定每个包的下个版本号。</li>
</ul>
<h3 id="基本使用" class="heading"><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>基本使用</h3>
<p>以下命令以<code class="language-text">yarn</code>为主。</p>
<h4 id="install-安装" class="heading"><a href="#install-%E5%AE%89%E8%A3%85" aria-hidden="true"><span class="icon icon-link"></span></a>Install 安装</h4>
<p><code class="language-text">yarn global add lerna</code></p>
<h4 id="init-初始化项目" class="heading"><a href="#init-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE" aria-hidden="true"><span class="icon icon-link"></span></a>Init 初始化项目</h4>
<p><code class="language-text">lerna init</code>
命令执行完毕后，会在生成对应的目录结构。</p>
<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">lerna-repo/
  package.json
  lerna.json
  packages/
    package-1/
      package.json
    package-2/
      package.json</code></pre></div>
<h4 id="lernajson-配置" class="heading"><a href="#lernajson-%E9%85%8D%E7%BD%AE" aria-hidden="true"><span class="icon icon-link"></span></a>Lerna.json 配置</h4>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>
  <span class="token string">"version"</span><span class="token operator">:</span> <span class="token string">"1.1.3"</span><span class="token punctuation">,</span> <span class="token comment">// 项目版本</span>
  <span class="token string">"npmClient"</span><span class="token operator">:</span> <span class="token string">"npm"</span><span class="token punctuation">,</span> <span class="token comment">// 默认使用的npm，可改为yarn</span>
  <span class="token string">"command"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// lerna 内置命令的配置</span>
    <span class="token string">"publish"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">"ignoreChanges"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*.md"</span><span class="token punctuation">,</span> <span class="token string">"**/test/**"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 发布时忽略部分文件的改动，配置此项可以减少不必要的publish。</span>
      <span class="token string">"message"</span><span class="token operator">:</span> <span class="token string">"chore(release): publish"</span> <span class="token comment">// git commit message</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"packages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"packages/*"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre></div>
<h4 id="create-创建子项目" class="heading"><a href="#create-%E5%88%9B%E5%BB%BA%E5%AD%90%E9%A1%B9%E7%9B%AE" aria-hidden="true"><span class="icon icon-link"></span></a>Create 创建子项目</h4>
<p><code class="language-text">lerna create &lt;name&gt;</code>
创建一个子项目，并会根据交互提示生成对应的<code class="language-text">package.json</code></p>
<h4 id="add-添加依赖" class="heading"><a href="#add-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96" aria-hidden="true"><span class="icon icon-link"></span></a>Add 添加依赖</h4>
<p><code class="language-text">lerna add &lt;package&gt;[@version] [--dev] [--exact]</code></p>
<ul>
<li><code class="language-text">lerna add eslint</code>： 所有包都会装上<code class="language-text">eslint</code>。</li>
<li><code class="language-text">lerna add eslint --scope=package1</code>：只有<code class="language-text">package1</code>会装上。</li>
<li><code class="language-text">lerna add eslint packages/prefix-*</code>：符合<code class="language-text">prefix</code>的包会装上。</li>
</ul>
<p>options:</p>
<ul>
<li><code class="language-text">-dev</code>：添加到<code class="language-text">devDependencies</code></li>
<li><code class="language-text">--exact</code>: 只安装特定版本</li>
</ul>
<p>如果添加的是子项目，则会通过<code class="language-text">link</code>软连接到对应的项目中。
<code class="language-text">lerna add package1 --scope=package2</code></p>
<h4 id="run-执行npm-script命令" class="heading"><a href="#run-%E6%89%A7%E8%A1%8Cnpm-script%E5%91%BD%E4%BB%A4" aria-hidden="true"><span class="icon icon-link"></span></a>Run 执行npm script命令</h4>
<p><code class="language-text">lerna run &lt;script&gt; -- [..args]</code></p>
<ul>
<li><code class="language-text">lerna run test</code>：则会执行所有子项目中的<code class="language-text">test</code>。</li>
<li><code class="language-text">lerna run --scope package1 test</code>：只执行<code class="language-text">package1</code>中的<code class="language-text">test</code>。</li>
<li><code class="language-text">lerna run --ignore package-* test</code>：只执行除了匹配<code class="language-text">package-*</code>外的项目中的<code class="language-text">test</code></li>
</ul>
<h4 id="exec-执行任意命令" class="heading"><a href="#exec-%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4" aria-hidden="true"><span class="icon icon-link"></span></a>Exec 执行任意命令</h4>
<p><code class="language-text">lerna exec -- &lt;command&gt; [..args]</code></p>
<p>与<code class="language-text">lerna run</code>类似，只不过它可以执行任意命令。
eg: <code class="language-text">lerna exec -- rm -rf ./node_modules</code></p>
<h4 id="其他命令" class="heading"><a href="#%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4" aria-hidden="true"><span class="icon icon-link"></span></a>其他命令</h4>
<ul>
<li><code class="language-text">lerna bootstrap</code>：安装各子项目依赖，对相互引用的项目进行软连接，在子项目中执行<code class="language-text">npm run prepublish</code>和<code class="language-text">npm run prepare</code><ul>
<li><code class="language-text">--hoist [glob]</code>：会将子项目的匹配的依赖(eg：<code class="language-text">eslint</code>, <code class="language-text">jest</code>等)，统一放在根目录的<code class="language-text">node_modules</code>中，减少安装时间，但仅限<code class="language-text">npmClient=npm</code></li>
<li><code class="language-text">—nohoist [glob]</code>: 匹配的依赖(eg: <code class="language-text">babel</code>)会安装到子项目中的<code class="language-text">node_modules</code>中</li>
</ul></li>
<li><code class="language-text">lerna clean</code>：删除子项目的<code class="language-text">node_modules</code></li>
<li><code class="language-text">lerna link</code>：同<code class="language-text">bootstrap</code>第二步。</li>
</ul>
<h3 id="进阶使用" class="heading"><a href="#%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>进阶使用</h3>
<h4 id="lerna-changelog" class="heading"><a href="#lerna-changelog" aria-hidden="true"><span class="icon icon-link"></span></a>Lerna-changelog</h4>
<p><a href="https://github.com/lerna/lerna-changelog">lerna-changelog</a>基于<code class="language-text">pr</code>来为项目生成<code class="language-text">changelog</code></p>
<p>可参考<a href="https://github.com/zWingz/acyort-donob-plugins/issues?q=is%3Apr+is%3Aclosed">repo</a></p>
<h5 id="使用步骤" class="heading"><a href="#%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4" aria-hidden="true"><span class="icon icon-link"></span></a>使用步骤</h5>
<ul>
<li>从<code class="language-text">master</code>分支切换出<code class="language-text">feature</code>/<code class="language-text">bugfix</code>等分支，参考<a href="https://github.com/nvie/gitflow">git-flow</a>。</li>
<li>完成开发后进行<code class="language-text">commit</code>，推荐使用<a href="https://github.com/commitizen/cz-cli">commitizen</a>来规范<code class="language-text">commit msg</code>，同时有助于对后续子项目生成<code class="language-text">changelog</code>。</li>
<li>将新分支<code class="language-text">push</code>到<code class="language-text">remote</code>端。</li>
<li>创建<code class="language-text">pr</code>，并打上<code class="language-text">label</code>，此处一定要打上<code class="language-text">label</code>，<code class="language-text">learn-changelog</code>就是根据<code class="language-text">label</code>来确定该<code class="language-text">pr</code>属于<code class="language-text">feature</code>/<code class="language-text">bugfix</code>/<code class="language-text">document</code>等。</li>
<li>切记要在<code class="language-text">merge</code>之前打上<code class="language-text">label</code>。</li>
<li>进行<code class="language-text">merge pr</code>操作。</li>
<li>本地切换到<code class="language-text">master</code>分支并进行<code class="language-text">pull</code>操作。</li>
<li>执行<code class="language-text">lerna-changelog</code>，既可得到一份<code class="language-text">changeling</code>。</li>
</ul>
<h5 id="注意" class="heading"><a href="#%E6%B3%A8%E6%84%8F" aria-hidden="true"><span class="icon icon-link"></span></a>注意</h5>
<p><code class="language-text">pr</code>的<code class="language-text">label</code>并不能随意设置，一定要在项目中声明对应才生效。</p>
<p>官方默认支持<code class="language-text">breaking</code>/<code class="language-text">enhancement</code>/<code class="language-text">bug</code>/<code class="language-text">documentation</code>/<code class="language-text">internal</code>，如果想用其他，则需要在<code class="language-text">package.json</code>中进行相应的配置。</p>
<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"changelog"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"feat"</span><span class="token operator">:</span> <span class="token string">":rocket: New Feature"</span><span class="token punctuation">,</span>
      <span class="token property">"bug"</span><span class="token operator">:</span> <span class="token string">":bug: Bug Fix"</span><span class="token punctuation">,</span>
      <span class="token property">"doc"</span><span class="token operator">:</span> <span class="token string">":memo: Documentation"</span><span class="token punctuation">,</span>
      <span class="token property">"internal"</span><span class="token operator">:</span> <span class="token string">":house: Internal"</span><span class="token punctuation">,</span>
      <span class="token property">"breaking"</span><span class="token operator">:</span> <span class="token string">":boom: Breaking Change"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h4 id="子项目的changelog" class="heading"><a href="#%E5%AD%90%E9%A1%B9%E7%9B%AE%E7%9A%84changelog" aria-hidden="true"><span class="icon icon-link"></span></a>子项目的changelog</h4>
<p>尚未实践过，具体还需参考<a href="https://github.com/lerna/lerna/blob/514bc57a53/commands/version/README.md#--conventional-commits">README</a></p>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<p><code class="language-text">lerna</code>的使用已介绍完毕，上述内容可满足日常开发需求，更多详情还需参考官方文档。</p>
]]></description><link>http://zwingz.github.io/posts/416348095.html</link><guid isPermaLink="false">416348095</guid><category><![CDATA[Front End]]></category><category><![CDATA[工具介绍]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Sat, 02 Mar 2019 02:48:23 GMT</pubDate></item><item><title><![CDATA[2018，不普通的一年]]></title><description><![CDATA[<p>2018对我个人来说是很重要的一年</p>
<p>在4月份, 我辞去了一份965的工作</p>
<p>跟着前同事去了一家9:30 - 8:00 大小周的创业公司</p>
<h2 id="过去，我学到了什么" class="heading"><a href="#%E8%BF%87%E5%8E%BB%EF%BC%8C%E6%88%91%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88" aria-hidden="true"><span class="icon icon-link"></span></a>过去，我学到了什么</h2>
<p>记得我是2015年开始入门前端，当时我掌握的只有<code class="language-text">java</code>那一套<code class="language-text">MVC</code>。</p>
<p>后来一次偶然机会接到了朋友的一次外包，担任前端开发，虽然项目中途腰斩，但是让我正式走上了前端的道路。</p>
<p>那么2015-2017我有哪些成长？</p>
<h3 id="2015" class="heading"><a href="#2015" aria-hidden="true"><span class="icon icon-link"></span></a>2015</h3>
<p>当时我从一本《JavaScript DOM 编程艺术》入门，到入职上一家公司(A)，成为实习生。</p>
<p>这一年，我掌握的只是普通的<code class="language-text">javascript</code> /<code class="language-text">html</code>/ <code class="language-text">css</code></p>
<p>还记得当时第一次做项目就被缓存给坑了</p>
<p>那时候大概只是一个页面仔</p>
<h3 id="2016" class="heading"><a href="#2016" aria-hidden="true"><span class="icon icon-link"></span></a>2016</h3>
<p>那时我正拿着<code class="language-text">jQuery</code> 写代码写的风生水起</p>
<p>但是那时我并不知道<code class="language-text">gulp</code> 怎么用、不知道<code class="language-text">browserify</code>这个东西原来可以打包代码。</p>
<p>仿佛就像那位老大爷一样，<code class="language-text">jQuery</code>一把梭。</p>
<p>到了年底，有机会接触新项目，我毅然选择了<code class="language-text">vue@1.x</code>。</p>
<p>自从写<code class="language-text">vue</code>，才知道了什么叫<code class="language-text">spa</code>，仿佛打开了新的大门。</p>
<h3 id="2017" class="heading"><a href="#2017" aria-hidden="true"><span class="icon icon-link"></span></a>2017</h3>
<p>2017可以说全年都在写<code class="language-text">vue</code>了</p>
<p>从用<code class="language-text">ElementUI</code>到自己的一套<code class="language-text">UI</code>框架，也能说熟练的使用<code class="language-text">vue</code></p>
<p>但是我不敢说精通，现在回想起，也觉得当时写的都是小儿科东西。</p>
<p>这套不怎么样<code class="language-text">UI</code>中，在当时也是能让我引以为傲。</p>
<p>毕竟当时写出了自我感觉良好的一个<a href="https://github.com/zWingz/vue-fixed-table">Table</a>组件。</p>
<p>不过现在看起来的确不怎么样，毕竟<code class="language-text">github</code>上面大神太多了。</p>
<p>15年到17年这段时期，我觉得我就像是从一个门外汉逐步走到了门前，并且跨步走了进去。</p>
<p>当初选择<code class="language-text">vue</code>真的是一个很重要的决定。</p>
<p>写过一篇<code class="language-text">vue</code><a href="https://zwing.site/posts/275254986.html">总结</a>，虽说不是什么干货，但对我日后开发还是有一定帮助。</p>
<p>如果没有这样做，我可能会一直都跟<code class="language-text">jquery</code>和<code class="language-text">django</code>打交道。(是的，有段时间我还专门写后端代码。)</p>
<h2 id="2018，我学到了什么" class="heading"><a href="#2018%EF%BC%8C%E6%88%91%E5%AD%A6%E5%88%B0%E4%BA%86%E4%BB%80%E4%B9%88" aria-hidden="true"><span class="icon icon-link"></span></a>2018，我学到了什么</h2>
<p>2018年后回来，同时随着手头上那个关键的项目逐步完成，我就提了辞职。</p>
<p>还记得后一个月，leader还让我们组执行<code class="language-text">996</code>，弄得很忙的样子给领导看。</p>
<p>现在看起来还真的有点可笑。</p>
<p>刚到新公司，技术只有两个，我负责前端，我领导负责后端以及运维。</p>
<p>我可以为所欲为，因为我来的目的就是像搞些新的东西。</p>
<h3 id="小程序" class="heading"><a href="#%E5%B0%8F%E7%A8%8B%E5%BA%8F" aria-hidden="true"><span class="icon icon-link"></span></a>小程序</h3>
<p>的确，刚到的任务便是写小程序，一个崭新的东西。</p>
<p>这东西不难，上手简单。</p>
<p>后面<a href="https://github.com/Meituan-Dianping/mpvue">mpvue</a>出来了，我也去尝了下鲜，直到现在还在维护，但是如果再给我选，我会选择原生。</p>
<p>虽然原生有点啰嗦，但其实配一个<code class="language-text">gulp</code>构建流程，开发起来还是挺顺手的，而且不会有莫名的坑，可知道<code class="language-text">mpvue</code>目前还有几个<code class="language-text">issues</code> 始终还未得到解决。</p>
<p>到后面更多的小程序框架出来了</p>
<p>比如：</p>
<ul>
<li><a href="https://github.com/NervJS/taro">taro</a></li>
<li><a href="https://github.com/RubyLouvre/nanachi">nanachi</a></li>
<li><a href="https://github.com/didi/mpx">mpx</a></li>
<li><a href="https://github.com/Tencent/omi">omi</a></li>
<li><a href="https://tencent.github.io/wepy/">wepy</a></li>
<li>....</li>
</ul>
<p>等等，真的很多。</p>
<p>但目前我看好的是<code class="language-text">taro</code>，也许以后有机会，我会选择使用。</p>
<h3 id="react" class="heading"><a href="#react" aria-hidden="true"><span class="icon icon-link"></span></a>React</h3>
<p>不错，今年我进入了<code class="language-text">React</code>阵营。</p>
<p>刚开始写的时候，其实我也很烦，</p>
<p>总是觉得明明在<code class="language-text">vue</code>上很简单的东西，到了<code class="language-text">react</code>怎么就这么绕。</p>
<p>就比如<code class="language-text">v-model</code>，在<code class="language-text">react</code>上面先要写一个<code class="language-text">state</code>，然后写一个<code class="language-text">onChange</code>。</p>
<p>写了几个项目，逐步上手后，发自内心的一句：真香~。</p>
<p>的确，写<code class="language-text">react</code>就像在写原生<code class="language-text">javascript</code>。</p>
<p>在开发期间，逐步使用自己的组件替换掉<code class="language-text">antd</code>（的确是一个优秀的<code class="language-text">UI</code>框架），</p>
<p>许多组件也是参考<code class="language-text">antd</code>源码，自己推敲出来的。</p>
<p>当然，我也把自己的几个自我感觉良好的放在了<code class="language-text">github</code>上面</p>
<ul>
<li><a href="https://github.com/zWingz/react-table">react-table</a>: 一个表格组件，可固定表头以及两侧</li>
<li><a href="https://github.com/zWingz/react-image">react-image</a>：一个图片浏览器</li>
<li><a href="https://github.com/zWingz/react-form-wrapper">react-form-wrapper</a>：一个<code class="language-text">Form</code>表单封装</li>
</ul>
<p>其实在开发着三个库的时候，我学到的更多是怎么去发布和管理一个开源库</p>
<ul>
<li><a href="https://github.com/pedronauck/docz">docz</a>: 为我的组件编写稳定</li>
<li><a href="https://jestjs.io/">jest</a>: 编写测试，写了一篇<a href="https://zwing.site/posts/383783892.html">小文</a></li>
<li><a href="https://rollupjs.org/">rollup</a>: 打包组件</li>
</ul>
<h3 id="typescript" class="heading"><a href="#typescript" aria-hidden="true"><span class="icon icon-link"></span></a>Typescript</h3>
<p>对于<code class="language-text">ts</code>，一开始我跟朋友闲聊我都是说<code class="language-text">ts</code>很啰嗦，每次都要写一堆类型。</p>
<p>后面等我自己用了后，又从内心发出一句：真香~。</p>
<p>后面我把手上的项目全部用<code class="language-text">ts</code>重构了一遍。</p>
<p>他真的太好用了。</p>
<h3 id="技术栈外东西" class="heading"><a href="#%E6%8A%80%E6%9C%AF%E6%A0%88%E5%A4%96%E4%B8%9C%E8%A5%BF" aria-hidden="true"><span class="icon icon-link"></span></a>技术栈外东西</h3>
<p>技术栈外的东西，便是写了些工具库，插件等等。</p>
<p>可以用来掌握日常工作中用不到的技能。</p>
<h4 id="acyort" class="heading"><a href="#acyort" aria-hidden="true"><span class="icon icon-link"></span></a>Acyort</h4>
<p><a href="https://acyort.com/">acyort</a>是一位前同事开发的基于<code class="language-text">githus issues</code>的博客系统，本博客也是用它来搭建。</p>
<p>最近发布了<code class="language-text">acyort@3.x</code>，属于一个<code class="language-text">breaking</code>，旧的构建流程已经不适用。</p>
<p>新的版本是基于插件以及构建流程来完成建站，不单单限于<code class="language-text">github issues</code>，可以说更强大了。</p>
<p>于是我便在旧版的基础上，为新版本编写插件。</p>
<p><a href="https://github.com/zWingz/acyort-donob-plugins">acyort-donob-plugins</a></p>
<ul>
<li>
<p>Acyort-plugin-fetch-issues: 用于拉取<code class="language-text">issues</code>插件，提供数据来源</p>
</li>
<li>
<p>Acyort-donob-renderer: 一个预处理以及渲染插件，用于处理数据</p>
</li>
<li>
<p>Acyort-plugin-rss: rss 插件，生成<code class="language-text">rss</code>。</p>
</li>
<li>
<p>Acyort-templates-donob-plus: 主题目标，在原有基础上加了些东西。</p>
</li>
<li>
<p>Acyort-plugin-gh-pages: 用于发布到<code class="language-text">gh-pages</code>插件。</p>
</li>
<li>
<p>Acyort-plugin-remark: 即将开发，使用<a href="https://github.com/remarkjs/remark">remark</a>来提供<code class="language-text">markdown</code>支持</p>
</li>
</ul>
<p>开发这一系列插件，对我个人来说也是有不少提升。</p>
<p>其实在很早之前我便想找机会写下<code class="language-text">node</code>，因此这次便是一次很好的练手机会。</p>
<p>练手之余还能为自己的博客做贡献，还是挺满足的~。</p>
<p>这个项目也刚好能用上<a href="https://github.com/lerna/lerna">lerna</a>，也是一个很了不起的工具。</p>
<h4 id="picgo" class="heading"><a href="#picgo" aria-hidden="true"><span class="icon icon-link"></span></a>Picgo</h4>
<p><a href="https://github.com/Molunerfinn/PicGo">picgo</a>是一个用来管理图床的<code class="language-text">electron</code> 应用。</p>
<p>内置提供多个<code class="language-text">Uploader</code>，比如: <code class="language-text">github</code>, <code class="language-text">sm.sm</code>, <code class="language-text">七牛</code>等。</p>
<p>早些时间，七牛云关掉了测试域名，可以说导致不少人的图库都挂掉了，我也不例外。</p>
<p>刚好发现<code class="language-text">picgo</code>，但他仅支持上传，不支持同步删除等管理。</p>
<p>于是便写了<a href="https://github.com/zWingz/picgo-plugin-github-plus">picgo-plugin-github-plus</a>，用来提供图片的删除以及在线同步等。</p>
<p>这能让我写博客更加方便。</p>
<h4 id="docker" class="heading"><a href="#docker" aria-hidden="true"><span class="icon icon-link"></span></a>Docker</h4>
<p>不错，就是<code class="language-text">docker</code>，这是一个很了不起的工具。</p>
<p>至于为什么我会接触到，单纯是因为刚开始时候业务不多，我便跟着 Leader 搞搞<code class="language-text">docker</code>的东西。</p>
<p>写过一篇<a href="https://zwing.site/posts/346031510.html">小文</a>，使用<code class="language-text">docker</code>+<code class="language-text">fabric</code>来部署项目。</p>
<p>其实是可以直接用<code class="language-text">CI</code>部署。</p>
<h4 id="more" class="heading"><a href="#more" aria-hidden="true"><span class="icon icon-link"></span></a>More...</h4>
<p>其实在开发一个库过程中，免不了遇到些自己想不清楚的东西。</p>
<p>这时候我会选择参考一些已有的库，看他们的源码。</p>
<p>并不需要完整的阅读一遍，有时候我更多的是看他们用了哪些依赖，用来做了些什么。</p>
<p>这能让我知道茫茫轮子中，有多少可以为我所用，哪些轮子可以解决哪些问题。</p>
<p>日后当我遇到了问题，可以从容的知道有哪些方法解决。</p>
<p>当遇到一些新奇而且代码简单的库，不妨深入阅读，这也是提升自己水平的一个好方法。</p>
<p>比如:</p>
<ul>
<li>除了<code class="language-text">eslint</code>外，其实<a href="https://github.com/xojs/xo">xo</a>这个库可以更高效的为我们完成语法检测。</li>
<li>除了<code class="language-text">jest</code>,<code class="language-text">mocha</code>,<code class="language-text">karma</code>外, <a href="https://github.com/avajs/ava">ava</a>这个测试框架也是不错的选择。</li>
<li>除了自己搭<code class="language-text">webpack</code>，其实<a href="https://github.com/egoist/poi">poi</a>和<a href="https://github.com/egoist/bili">bili</a>能更快为我们完成打包。</li>
<li><a href="https://saojs.org/">SAO.js</a>可以有效制作自己熟悉的开发项目模板, <a href="https://github.com/zWingz/sao-rc-ts-scaffold">sao-rc-rs-scaffold</a>这是我的组件项目模板。</li>
<li><a href="https://github.com/webpro/release-it">rrelease-it</a>, <a href="https://github.com/intuit/auto">auto</a>,<a href="https://github.com/sindresorhus/np">np</a>这些可以有效地为我们管理项目版本</li>
<li><a href="https://github.com/commitizen/cz-cli">cz-cli</a>可以为我们规范我们的<code class="language-text">git commit message</code>, 同时配合<a href="https://github.com/commitizen/cz-conventional-changelog">cz-conventional-changelog</a>也能更好的为我们生成<code class="language-text">changelog</code></li>
<li>...</li>
</ul>
<p>有时候业务都是三点一线，来来去去都是那些东西，不妨多去了解下业务外的东西，也许收获更多。</p>
<h3 id="技术外的" class="heading"><a href="#%E6%8A%80%E6%9C%AF%E5%A4%96%E7%9A%84" aria-hidden="true"><span class="icon icon-link"></span></a>技术外的</h3>
<p>一年365天，也不可能说每天都在码字，总会一些让自己记忆深刻的事情。</p>
<h4 id="驾照" class="heading"><a href="#%E9%A9%BE%E7%85%A7" aria-hidden="true"><span class="icon icon-link"></span></a>驾照</h4>
<p>今年年初拿了驾照，甚是开心。</p>
<h4 id="switch" class="heading"><a href="#switch" aria-hidden="true"><span class="icon icon-link"></span></a>Switch</h4>
<p>今年入手了一台<code class="language-text">Switch</code>，玩过了2017年度游戏<code class="language-text">塞尔达传说</code>。这的确是一个很棒的游戏，以至于现在跟别人说起来也是津津有味。</p>
<h4 id="猛禽1060显卡" class="heading"><a href="#%E7%8C%9B%E7%A6%BD1060%E6%98%BE%E5%8D%A1" aria-hidden="true"><span class="icon icon-link"></span></a>猛禽1060显卡</h4>
<p>2017年618配了台电脑，但是当时遇到了矿潮，显卡价格被炒高，一直空着显卡，知道今年2月份才在咸鱼入了一张<code class="language-text">ROG1060</code>信仰显卡。是真的贵，不过不贵就不叫<strong>信仰</strong>了。</p>
<h4 id="烘焙" class="heading"><a href="#%E7%83%98%E7%84%99" aria-hidden="true"><span class="icon icon-link"></span></a>烘焙</h4>
<p>17年双11买了台烤箱，算是入了烘焙的门。</p>
<p>其实烘焙这个活，不好干，费时费心。</p>
<p>制作一个钟，烘烤一个钟，享受五分钟。</p>
<p>但是出炉那一刻真是满满的成就感。</p>
<p>嗯，2018做了<a href="https://zwing.site/posts/310330786.html">戚风蛋糕</a>，做了<a href="https://zwing.site/posts/308242286.html">蛋挞</a>，做了芒果班戟，更多的是做吐司，饼干等。</p>
<p>希望2019能做更多想做的东西。</p>
<h4 id="电视剧" class="heading"><a href="#%E7%94%B5%E8%A7%86%E5%89%A7" aria-hidden="true"><span class="icon icon-link"></span></a>电视剧</h4>
<p>平常只看港剧的我，在2018竟然追了延禧攻略，不过看起来还是挺爽。</p>
<p>今年1月份看了琅琊榜，发现更好看，现在二刷中。</p>
<h4 id="动画" class="heading"><a href="#%E5%8A%A8%E7%94%BB" aria-hidden="true"><span class="icon icon-link"></span></a>动画</h4>
<p>2018看了进击的巨人和东京搜查官，中规中矩，还行。</p>
<h3 id="总结" class="heading"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true"><span class="icon icon-link"></span></a>总结</h3>
<p>总的来说，这一年我算是进了一大步。</p>
<h2 id="2019，我要怎么过" class="heading"><a href="#2019%EF%BC%8C%E6%88%91%E8%A6%81%E6%80%8E%E4%B9%88%E8%BF%87" aria-hidden="true"><span class="icon icon-link"></span></a>2019，我要怎么过</h2>
<h3 id="工作" class="heading"><a href="#%E5%B7%A5%E4%BD%9C" aria-hidden="true"><span class="icon icon-link"></span></a>工作</h3>
<p>如无意外，今年是准备再跳一次，只是有点舍不得领导。</p>
<p>虽然他不搞前端，但是在其他方面，的确教会我很多东西。</p>
<p>谈技术，谈生活。</p>
<p>好像有什么不懂得跟他说，他都会能回答上些什么。</p>
<h3 id="技术" class="heading"><a href="#%E6%8A%80%E6%9C%AF" aria-hidden="true"><span class="icon icon-link"></span></a>技术</h3>
<p>技术方面，今年希望更致力于开源项目，接触更多方面的东西。</p>
<p>比如:</p>
<ul>
<li>electron</li>
<li>node</li>
<li>Native</li>
<li>Server</li>
</ul>
<p>今年听说<code class="language-text">vue</code>会发布<code class="language-text">3.0</code>版本，我是很期待这一版本，希望它能更好。</p>
<h3 id="生活" class="heading"><a href="#%E7%94%9F%E6%B4%BB" aria-hidden="true"><span class="icon icon-link"></span></a>生活</h3>
<ul>
<li>
<p>重拾跑步吧，当年可是一周会跑好几趟，现在年纪大了，更加应该多些运动。</p>
</li>
<li>
<p>在烘焙路上跟进一步。</p>
</li>
<li>
<p>继续在保证技术深度情况下扩展自己的技术广度，从前端到后端，从执行到思考，从做技术到做管理。</p>
</li>
</ul>
<p>希望2019也是不普通的一年</p>
]]></description><link>http://zwingz.github.io/posts/403552116.html</link><guid isPermaLink="false">403552116</guid><category><![CDATA[生活]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Sun, 27 Jan 2019 13:40:58 GMT</pubDate></item><item><title><![CDATA[使用jest+enzyme测试react组件]]></title><description><![CDATA[<h2 id="前言" class="heading"><a href="#%E5%89%8D%E8%A8%80" aria-hidden="true"><span class="icon icon-link"></span></a>前言</h2>
<p>最近第一次给一个项目写一个完整的测试流程, 也算是我第一次写完整的测试.
于是记一下整个测试流程
<a href="https://github.com/zWingz/react-image">项目地址</a>
目前项目使用的测试框架是主流的<code class="language-text">jest</code>+<code class="language-text">enzyme</code></p>
<h2 id="依赖" class="heading"><a href="#%E4%BE%9D%E8%B5%96" aria-hidden="true"><span class="icon icon-link"></span></a>依赖</h2>
<h3 id="必要依赖" class="heading"><a href="#%E5%BF%85%E8%A6%81%E4%BE%9D%E8%B5%96" aria-hidden="true"><span class="icon icon-link"></span></a>必要依赖</h3>
<ul>
<li>Jest</li>
<li>enzyme</li>
<li>enzyme-adapter-react-16</li>
</ul>
<h3 id="按需" class="heading"><a href="#%E6%8C%89%E9%9C%80" aria-hidden="true"><span class="icon icon-link"></span></a>按需</h3>
<ul>
<li>如果使用<code class="language-text">babel</code>，则需要<code class="language-text">babel-jest</code></li>
<li>如果使用<code class="language-text">typescript</code>， 则需要<code class="language-text">ts-jest</code></li>
<li>如果需要<code class="language-text">snapshot</code>, 则需要 <code class="language-text">enzyme-to-json</code></li>
</ul>
<h2 id="jest-配置" class="heading"><a href="#jest-%E9%85%8D%E7%BD%AE" aria-hidden="true"><span class="icon icon-link"></span></a>Jest 配置</h2>
<p>起初项目使用<code class="language-text">babel</code>进行编译，后面统一转成了<code class="language-text">ts</code></p>
<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|scss)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/test/utils.ts"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 将静态资源匹配到utils.ts中</span>
    <span class="token property">"moduleFileExtensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"tsx"</span><span class="token punctuation">,</span> <span class="token string">"js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"setupFilesAfterEnv"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/test/setup.ts"</span><span class="token punctuation">,</span> <span class="token comment">// jest环境初始化</span>
    <span class="token property">"collectCoverageFrom"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.{ts,tsx}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 覆盖率收集</span>
    <span class="token property">"coverageDirectory"</span><span class="token operator">:</span> <span class="token string">"./coverage/"</span><span class="token punctuation">,</span> <span class="token comment">// 覆盖率输出目录</span>
    <span class="token property">"collectCoverage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"transform"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"^.+\\.(ts|tsx)$"</span><span class="token operator">:</span> <span class="token string">"ts-jest"</span> <span class="token comment">// 如果是babel, 则为babel-jest</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"testMatch"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"**/__test__/*.(ts|tsx)"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"snapshotSerializers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"enzyme-to-json/serializer"</span> <span class="token comment">// 用来适配 toMatchSnapshot</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>如果使用<code class="language-text">babel</code>的话, 只要将<code class="language-text">ts</code>转成<code class="language-text">js</code>, <code class="language-text">ts-jest</code>转成<code class="language-text">babel-jest</code>即可。</p>
<h3 id="modulenamemapper" class="heading"><a href="#modulenamemapper" aria-hidden="true"><span class="icon icon-link"></span></a>moduleNameMapper</h3>
<p>用来<code class="language-text">mock</code>一些额外<code class="language-text">module</code>, 比如<code class="language-text">sass</code>, <code class="language-text">jpg</code>等等.</p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// /test/utils.ts</span>
<span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'test-file-stub'</span>
</code></pre></div>
<h3 id="setupfilesafterenv" class="heading"><a href="#setupfilesafterenv" aria-hidden="true"><span class="icon icon-link"></span></a>setupFilesAfterEnv</h3>
<blockquote>
<p>The path to a module that runs some code to configure or set up the testing framework before each test. </p>
</blockquote>
<p>可以用来初始化<code class="language-text">test</code>配置, 在这里需要使用<code class="language-text">enzyme-adapter</code></p>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token comment">// /test/setup.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> configure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'enzyme'</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactSixteenAdapter <span class="token keyword">from</span> <span class="token string">'enzyme-adapter-react-16'</span>

<span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> adapter<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ReactSixteenAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<h3 id="collectcoveragefrom" class="heading"><a href="#collectcoveragefrom" aria-hidden="true"><span class="icon icon-link"></span></a>collectCoverageFrom</h3>
<p>需要测试覆盖率的文件</p>
<h3 id="coveragedirectory" class="heading"><a href="#coveragedirectory" aria-hidden="true"><span class="icon icon-link"></span></a>coverageDirectory</h3>
<p>覆盖率输出目录</p>
<h3 id="transform" class="heading"><a href="#transform" aria-hidden="true"><span class="icon icon-link"></span></a>transform</h3>
<blockquote>
<p>A map from regular expressions to paths to transformers. A transformer is a module that provides a synchronous function for transforming source files</p>
</blockquote>
<p>跟<code class="language-text">webpack-loader</code>类似</p>
<h3 id="testmatch" class="heading"><a href="#testmatch" aria-hidden="true"><span class="icon icon-link"></span></a>testMatch</h3>
<blockquote>
<p>The glob patterns Jest uses to detect test files.</p>
</blockquote>
<p>测试文件匹配规则, 如果跟官方不同, 则修改此值.</p>
<h2 id="enzyme-使用" class="heading"><a href="#enzyme-%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>Enzyme 使用</h2>
<p><a href="https://airbnb.io/enzyme/">官方文档</a></p>
<h3 id="简单介绍" class="heading"><a href="#%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>简单介绍</h3>
<p>其实<code class="language-text">enzyme</code>上手挺简单的, 它有三个<code class="language-text">API</code></p>
<p>包括<code class="language-text">shallow</code>、<code class="language-text">mount</code>和<code class="language-text">render</code>, 其中<code class="language-text">shallow</code>和<code class="language-text">mount</code>是常用的</p>
<p>他们区别是</p>
<ul>
<li><code class="language-text">shallow</code>: 只会渲染顶级组件, 而子组件不会渲染, 渲染结果是一颗<code class="language-text">react</code>树, 效率最高</li>
<li><code class="language-text">mount</code>: 会渲染整个组件, 包括子组件, 如果需要深入组件内部测试, 则需要使用<code class="language-text">mount</code></li>
<li><code class="language-text">render</code>: 直接选择普通的<code class="language-text">html</code>结构.</li>
</ul>
<p><code class="language-text">shallow</code>和<code class="language-text">mount</code>得到结果是一个<code class="language-text">ReactWrapper</code>对象, 可以进行多种操作, 包括<code class="language-text">find()</code>、<code class="language-text">prop()</code>、<code class="language-text">instance()</code>等。</p>
<h3 id="基本使用" class="heading"><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>基本使用</h3>
<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> shallow<span class="token punctuation">,</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'enzyme'</span>
<span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'../MyComponent'</span>
<span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">'../ChildComponent'</span>

<span class="token function">describt</span><span class="token punctuation">(</span><span class="token string">'测试xxxxx'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'组件state以及渲染情况'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token string">'test msg'</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'#childId'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 测试是否包含某个`element`</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>ChildComponent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 测试是否包含某个子组件</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'触发事件'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> click <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent onClick<span class="token operator">=</span><span class="token punctuation">{</span>click<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token comment">// 触发#triggerClickElement的click事件</span>
    wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'#triggerClickElement'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">simulate</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>
    <span class="token comment">// 判断click事件是否被触发</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 测试函数调用</span>
  <span class="token comment">// 默认该函数声明方式通过class.method声明</span>
  <span class="token comment">// class MyComponent{</span>
  <span class="token comment">//   someMethod() {}</span>
  <span class="token comment">// }</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'测试函数调用'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> spy <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'someMethod'</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token comment">// 暂且认为组件挂载时会调用`someMethod`</span>
    <span class="token comment">// 在此测试是否正确调用</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 但是由于react需要绑定this</span>
  <span class="token comment">// 所以一般会这样声明</span>
  <span class="token comment">// class MyComponent {</span>
  <span class="token comment">//   someMethod = () => {}</span>
  <span class="token comment">// }</span>
  <span class="token comment">// 这时候通过babel或者typescript编译后</span>
  <span class="token comment">// 会变成类似</span>
  <span class="token comment">// class MyComponent{</span>
  <span class="token comment">//   constructor() {</span>
  <span class="token comment">//     this.someMethod = () => {}</span>
  <span class="token comment">//   }</span>
  <span class="token comment">// }</span>
  <span class="token comment">// 这时候someMethod不属于MyComponent.prototype</span>
  <span class="token comment">// 所以要改变测试方式</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'测试函数调用'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> ins <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> spy <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">spyOn</span><span class="token punctuation">(</span>ins<span class="token punctuation">,</span> <span class="token string">'someMethod'</span><span class="token punctuation">)</span>
    wrapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ins<span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'触发特定事件, 并传递参数'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果要触发特定事件, 比如mousemove, keyup等等</span>
    <span class="token comment">// 可以通过构造自定义事件, 并且使用dispatchEvent来触发</span>
    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallow</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>MyComponent <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> element <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.some-element'</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      clientX<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
      clientY<span class="token operator">:</span> <span class="token number">100</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    element<span class="token punctuation">.</span><span class="token function">getDOMNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>state<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqueal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>其实<code class="language-text">enzyme</code>常用的api大概就是几个, 按照本项目中用到的, </p>
<ul>
<li>state</li>
<li>find</li>
<li>prop</li>
<li>simulate</li>
</ul>
<h2 id="进行测试" class="heading"><a href="#%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95" aria-hidden="true"><span class="icon icon-link"></span></a>进行测试</h2>
<p>编写完<code class="language-text">test case</code>后, 只要调用<code class="language-text">jest</code>即可进行测试, 同时会输出覆盖率
如果带上<code class="language-text">--watch</code>则可以监听文件改动并进行测试</p>
<h2 id="上传测试覆盖率" class="heading"><a href="#%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87" aria-hidden="true"><span class="icon icon-link"></span></a>上传测试覆盖率</h2>
<p>目前使用<code class="language-text">Codecov</code>来管理测试覆盖率
如果在本地上传, 则需要带上<code class="language-text">token</code>, 如果通过<code class="language-text">travisCi</code>, 则不需要, 直接调用<code class="language-text">codecov</code>即可。</p>
<h2 id="完结" class="heading"><a href="#%E5%AE%8C%E7%BB%93" aria-hidden="true"><span class="icon icon-link"></span></a>完结</h2>
<p>至此， 整套<code class="language-text">jest</code>+<code class="language-text">enzyme</code>测试流程已经跑完.
目前看来没有用高更深的测试功能, 比如说<code class="language-text">jsdom</code>, <code class="language-text">enzyme.render</code>等</p>
]]></description><link>http://zwingz.github.io/posts/383783892.html</link><guid isPermaLink="false">383783892</guid><category><![CDATA[Front End]]></category><category><![CDATA[React]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Fri, 23 Nov 2018 11:07:18 GMT</pubDate></item><item><title><![CDATA[多package下babel编译问题]]></title><description><![CDATA[<h2 id="项目背景" class="heading"><a href="#%E9%A1%B9%E7%9B%AE%E8%83%8C%E6%99%AF" aria-hidden="true"><span class="icon icon-link"></span></a>项目背景</h2>
<p>之前一直使用<code class="language-text">typescript</code> + <code class="language-text">babel</code> 编译项目</p>
<p><code class="language-text">typescript</code>作用只是单纯用来做强类型检查, <code class="language-text">babel</code>则真正用来编译代码.</p>
<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"exnext"</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>偶然一次机会, 发现编译后的部分代码并没有编译<code class="language-text">object-rest-spread</code>
而这部分代码全都在一个子目录下</p>
<p>由于我的项目使用了<code class="language-text">git-submodules</code>来管理组件, 所以该组件目录下带有<code class="language-text">package.json</code>文件</p>
<p>恰好这部分文件只经过了<code class="language-text">typescript</code>的编译, 而没有经过<code class="language-text">babel</code></p>
<p>其他<code class="language-text">Page</code>都正确的被<code class="language-text">babel</code>编译, 不存在问题.</p>
<p>于是想起是否子目录下的文件不被<code class="language-text">babel</code>编译, 看了下官方文档, 的确有相关的描述.</p>
<h2 id="问题原因" class="heading"><a href="#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0" aria-hidden="true"><span class="icon icon-link"></span></a>问题原因</h2>
<p>当项目目录中含有多个<code class="language-text">package.json</code>时候, 原有的<code class="language-text">.babelrc</code>已经不再适用</p>
<p><img src="https://user-images.githubusercontent.com/13031838/48480504-a09f9300-e845-11e8-9edc-3f42bb145c2f.png" alt="image">.</p>
<p>这时候经过<code class="language-text">webpack</code>编译
只有<code class="language-text">src</code>下的文件会被正确编译, <code class="language-text">sub</code>下的文件不会被<code class="language-text">babel</code>编译</p>
<p>此时<code class="language-text">webpack</code>会报错</p>
<p><img src="https://user-images.githubusercontent.com/13031838/48480915-d4c78380-e846-11e8-80e5-b4bc1c518474.png" alt="image"></p>
<p>原因就是这部分文件没有被<code class="language-text">babel</code>正确编译</p>
<h2 id="上述问题解决办法" class="heading"><a href="#%E4%B8%8A%E8%BF%B0%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>上述问题解决办法</h2>
<p>官方有<a href="https://babeljs.io/docs/en/config-files#project-wide-configuration">详细说明</a></p>
<p>将<code class="language-text">.babelrc</code>改成<code class="language-text">babel.config.js</code>, 此时<code class="language-text">sub</code>下的文件可以被正确编译</p>
<p><img src="https://user-images.githubusercontent.com/13031838/48481024-15270180-e847-11e8-909b-3af7c5a7b209.png" alt="image"></p>
<p>当然, 使用<code class="language-text">babel.config.js</code>还可以灵活的配置各个<code class="language-text">package</code>中<code class="language-text">babel</code>编译规则.
具体的还是请看官方文档</p>
]]></description><link>http://zwingz.github.io/posts/380665113.html</link><guid isPermaLink="false">380665113</guid><category><![CDATA[Front End]]></category><category><![CDATA[Babel]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Wed, 14 Nov 2018 11:56:24 GMT</pubDate></item><item><title><![CDATA[使用Fabric+docker部署前端项目]]></title><description><![CDATA[<h2 id="部署过程" class="heading"><a href="#%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B" aria-hidden="true"><span class="icon icon-link"></span></a>部署过程</h2>
<ul>
<li>合并<code class="language-text">develop</code>到<code class="language-text">master</code></li>
<li><code class="language-text">push</code>代码</li>
<li>远程服务器<code class="language-text">pull</code>代码</li>
<li>npm install(如果需要)</li>
<li>npm run test (如果需要)</li>
<li>npm run build</li>
</ul>
<h2 id="利用docker-compose运行node" class="heading"><a href="#%E5%88%A9%E7%94%A8docker-compose%E8%BF%90%E8%A1%8Cnode" aria-hidden="true"><span class="icon icon-link"></span></a>利用docker-compose运行node</h2>
<p>使用docker来跑<code class="language-text">node</code>, 则线上不需要有<code class="language-text">node</code>环境.</p>
<ul>
<li>将本地目录映射到<code class="language-text">docker</code>中</li>
<li>在<code class="language-text">docker</code>中跑<code class="language-text">npm</code>命令</li>
</ul>
<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token comment"># docker-compose.yml</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">depoly</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> project<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> node<span class="token punctuation">:</span>carbon
    <span class="token key atrule">working_dir</span><span class="token punctuation">:</span> /project
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/project
</code></pre></div>
<p>然后编可以通过命令<code class="language-text">docker-compose run --rm deploy yarn xxx</code>来执行<code class="language-text">npm</code>命令</p>
<h2 id="利用makefile更好的执行命令" class="heading"><a href="#%E5%88%A9%E7%94%A8makefile%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4" aria-hidden="true"><span class="icon icon-link"></span></a>利用makefile更好的执行命令</h2>
<div class="gatsby-highlight" data-language="makefile"><pre class="language-makefile"><code class="language-makefile"><span class="token symbol">build</span><span class="token punctuation">:</span>
  docker-compose run --rm deploy yarn build

<span class="token symbol">install</span><span class="token punctuation">:</span>
  docker-compose run --rm deploy yarn install --production

<span class="token symbol">dev</span><span class="token punctuation">:</span>
<span class="token symbol">  docker-compose run --rm -p 8080</span><span class="token punctuation">:</span>8080 deploy yarn dev

<span class="token comment"># 因为当前build目录和build命令冲突, 用以下关键词区分两者</span>
<span class="token builtin">.PHONY</span><span class="token punctuation">:</span> build</code></pre></div>
<h2 id="shell脚本-更好的执行makefile" class="heading"><a href="#shell%E8%84%9A%E6%9C%AC-%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%89%A7%E8%A1%8Cmakefile" aria-hidden="true"><span class="icon icon-link"></span></a>Shell脚本, 更好的执行makefile</h2>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">trap</span> <span class="token string">"kill 0"</span> SIGINT

<span class="token comment"># 如果带了 -i 参数, 则需要安装依赖</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"-i"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\033">\033</span>[41;37m Install dependencies:<span class="token entity" title="\033">\033</span>[0m<span class="token entity" title="\n">\n</span> "</span>
  <span class="token function">make</span> <span class="token function">install</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$?</span>"</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\033">\033</span>[31m Error in npm install, pleace check your package.json<span class="token entity" title="\n">\n</span><span class="token entity" title="\033">\033</span>[0m"</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
  <span class="token keyword">fi</span>
<span class="token keyword">fi</span><span class="token punctuation">;</span>

<span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span><span class="token entity" title="\033">\033</span>[41;37m Build... :<span class="token entity" title="\033">\033</span>[0m<span class="token entity" title="\n">\n</span> "</span>
<span class="token function">make</span> build
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$?</span>"</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\033">\033</span>[31m Error in npm run build <span class="token entity" title="\n">\n</span><span class="token entity" title="\033">\033</span>[0m"</span>
  <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">else</span>
  <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\033">\033</span>[32mBuild Success <span class="token entity" title="\033">\033</span>[0m<span class="token entity" title="\n">\n</span>"</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">exit</span> <span class="token variable">$?</span></code></pre></div>
<h2 id="fabric使用-更快的完成部署" class="heading"><a href="#fabric%E4%BD%BF%E7%94%A8-%E6%9B%B4%E5%BF%AB%E7%9A%84%E5%AE%8C%E6%88%90%E9%83%A8%E7%BD%B2" aria-hidden="true"><span class="icon icon-link"></span></a>Fabric使用, 更快的完成部署</h2>
<h3 id="fabric基本介绍" class="heading"><a href="#fabric%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D" aria-hidden="true"><span class="icon icon-link"></span></a>fabric基本介绍</h3>
<p><code class="language-text">fabric</code>是一个<code class="language-text">python</code>库, 可以通过<code class="language-text">ssh</code>在远程服务器执行命令.</p>
<p>它有两个<code class="language-text">1.0</code>和<code class="language-text">2.0</code>版本, 其中<code class="language-text">1.0</code>只支持<code class="language-text">py2</code>, <code class="language-text">2.0</code>版本可以支持<code class="language-text">py2</code>和<code class="language-text">py3</code>, 而且两个版本的<code class="language-text">api</code>区别很大, 具体请参考官方文档.</p>
<p>以下所使用的是<code class="language-text">fabric2.0</code>, 附上<a href="http://docs.fabfile.org/en/2.2/">fabric2.x文档</a></p>
<h3 id="用途" class="heading"><a href="#%E7%94%A8%E9%80%94" aria-hidden="true"><span class="icon icon-link"></span></a>用途</h3>
<p>可以利用它来<code class="language-text">pull</code>代码, 并执行代码编译</p>
<p>同时, 线上一般只拉<code class="language-text">master</code>分支, 所以<code class="language-text">fabric</code>也能帮助我们在本地合并到<code class="language-text">master</code>分支后<code class="language-text">push</code>到<code class="language-text">git</code>上</p>
<h3 id="配置文件" class="heading"><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a>配置文件</h3>
<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> fabric <span class="token keyword">import</span> Connection
<span class="token keyword">from</span> invoke <span class="token keyword">import</span> task

c <span class="token operator">=</span> Connection<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'server_name'</span><span class="token punctuation">)</span>

<span class="token comment"># 制定task</span>
<span class="token comment"># 可以通过fab depoly 调用</span>
<span class="token decorator annotation punctuation">@task</span>
<span class="token keyword">def</span> <span class="token function">depoly</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
    c<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token string">'git checkout master'</span><span class="token punctuation">)</span> <span class="token comment"># 切换到master</span>
    c<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token string">'git rebase develop'</span><span class="token punctuation">)</span> <span class="token comment"># 合并develop分支</span>
    c<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token string">'git push origin master'</span><span class="token punctuation">)</span> <span class="token comment"># push到master</span>
    <span class="token keyword">with</span> c<span class="token punctuation">.</span>cd<span class="token punctuation">(</span><span class="token string">'/home/ubuntu/path/your_project'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        c<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'git pull'</span><span class="token punctuation">,</span> pty<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 远程拉取代码</span>
        c<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'./depoly.sh'</span><span class="token punctuation">)</span> <span class="token comment"># 远程执行build</span>
    c<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token string">'git checkout develop'</span><span class="token punctuation">)</span> <span class="token comment"># 本地切换回develop</span></code></pre></div>
<p>执行<code class="language-text">fab depoly</code>就可以完成一系列部署</p>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<p>上述过程其实完全可以由各种<code class="language-text">CI</code>完成</p>
<p>但是对于私有<code class="language-text">gitlab</code>, 同时又没有部署<code class="language-text">gitlab-runner</code>或者不想接入第三方的话</p>
<p><code class="language-text">fabric</code>是个不错的选择</p>
]]></description><link>http://zwingz.github.io/posts/346031510.html</link><guid isPermaLink="false">346031510</guid><category><![CDATA[Front End]]></category><category><![CDATA[Depoly]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Tue, 31 Jul 2018 04:32:38 GMT</pubDate></item><item><title><![CDATA[记一下从Vue转向React的感想]]></title><description><![CDATA[<h1 id="关于react-想说几点" class="heading"><a href="#%E5%85%B3%E4%BA%8Ereact-%E6%83%B3%E8%AF%B4%E5%87%A0%E7%82%B9" aria-hidden="true"><span class="icon icon-link"></span></a>关于React, 想说几点</h1>
<p>没有干货, 只有感想.
没有源码分析, 只有需求实现.</p>
<h2 id="react跟vue对比" class="heading"><a href="#react%E8%B7%9Fvue%E5%AF%B9%E6%AF%94" aria-hidden="true"><span class="icon icon-link"></span></a>React跟Vue对比</h2>
<p>之前写过一篇<a href="https://zwing.site/posts/275254986.html">vue后台系统开发实践</a></p>
<p>那时候主要写<code class="language-text">vue</code>, 有时间也会关注下<code class="language-text">React</code>相关内容, 但没有实际开发经验.</p>
<p>最近终于从<code class="language-text">vue</code>转向了<code class="language-text">React</code></p>
<p>虽说两者都是<code class="language-text">MVVM</code>框架, 都是数据驱动型, 但是两者区别还真的很明显.</p>
<p>曾经看过一段话, 大概是这么一个意思</p>
<p><code class="language-text">vue</code>就是帮你封装了所有东西, 比如数据监听、指令、模板渲染等等</p>
<p>写起来就像是一门新的语言一样,你只要按照他的语法, 你就能很轻易的写出一套系统. </p>
<p>而<code class="language-text">React</code>只提供了最基础的东西, 比如<code class="language-text">vnode</code>, dom渲染等, 其余得都要靠自己去组合实现. 写起来就跟写原生<code class="language-text">JavaScript</code>没什么区别. 可以玩出很多花样.</p>
<p>我是很赞同这个说法</p>
<p>在刚开始写<code class="language-text">React</code>时候, 时不时都会带上<code class="language-text">vue</code>的思想去写</p>
<p>耳边偶尔会响起一句话 '怎么React这么麻烦, 我用vue一下子就能完成的东西, 在这里要写半天'</p>
<p>例子? <code class="language-text">Form</code>表单的双向绑定就是一个例子.</p>
<h3 id="初探react" class="heading"><a href="#%E5%88%9D%E6%8E%A2react" aria-hidden="true"><span class="icon icon-link"></span></a>初探React</h3>
<p>刚开始写, 由于不太熟练, 就选择了<code class="language-text">Antd</code>作为UI框架.</p>
<p>但其实我是不太喜欢使用第三方库的</p>
<p>在刚开始写<code class="language-text">vue</code>时候, 也是选择<code class="language-text">ElementUI</code>, 后面熟练之后也逐步抛弃, 改用自己实现的组件</p>
<p>除了几个特别麻烦的, 比如 <code class="language-text">DataPicker</code> . 我还是选择使用第三方. </p>
<p>我也写过一个<a href="https://zwing.site/posts/295960409.html">固定表格组件</a>, 个人感觉挺良好. 666</p>
<p>那么对于<code class="language-text">React</code>,  我也选择了同样的入手方式, 先从第三方库用起, 后续逐步替代.</p>
<p>当然, <code class="language-text">Antd</code> 用起来也是很麻烦, 花了几天勉强搭起了一个简单功能的后台. </p>
<p>当时的想法就是, 这么几个页面, 用<code class="language-text">vue</code>一天就搞定, 这个<code class="language-text">react</code>花了我几天.</p>
<p>可能当时也是太年轻了.</p>
<p>后来开发第二个系统, 就开始结合上文所说的<code class="language-text">vue后台实践</code> 所提到的几个要点去重新写系统</p>
<h2 id="react的router选择" class="heading"><a href="#react%E7%9A%84router%E9%80%89%E6%8B%A9" aria-hidden="true"><span class="icon icon-link"></span></a>React的router选择</h2>
<p>react的路由选择目前有两种, 一种是官方的<code class="language-text">react-router</code>, 另一个是刚出不久的<code class="language-text">reach-router</code>.</p>
<p>而<code class="language-text">react-router</code>也是从<code class="language-text">v3</code>升级到了<code class="language-text">v4</code>,  这次升级可以说是颠覆了传统的声明式路由</p>
<p>改成了路由组件化, 而不是传统的配置形式。</p>
<p>对于, <code class="language-text">reach-router</code>可以说是麻雀虽小五脏俱全， 可以满足基本的路由功能,, <code class="language-text">API</code>和路由组件使用起来也是比较简单的。</p>
<p>刚搭建项目时候，我从<code class="language-text">v3</code>和<code class="language-text">v4</code>中做过选择， 最后决定使用<code class="language-text">v4</code>, 因为我个人喜欢用新不用旧。</p>
<p>在开发过程中，可能由于自己对<code class="language-text">React</code>还不够熟悉， 在使用<code class="language-text">Router</code>上也遇到不少问题。</p>
<p>比如最简单的路由跳转</p>
<p><code class="language-text">v3</code>只需要直接调用<code class="language-text">api</code>即可完成跳转</p>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">/* react-router v3*/</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> browserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span>
browserHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/some/path'</span><span class="token punctuation">)</span>
</code></pre></div>
<p><code class="language-text">v4</code>需要引入高阶组件后才能从<code class="language-text">props</code>中调用api.</p>
<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">/* react-router v3*/</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span>
<span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/some/path'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span>
</code></pre></div>
<p>但是<code class="language-text">v4</code>也有优点, 就是路由配置很灵活, 在需要用到的地方引入<code class="language-text">Route</code>即可。</p>
<p>但是中途用着不爽，我就直接换成了<code class="language-text">reach-router</code>。</p>
<p>这会<code class="language-text">reach-router</code>用起来可爽了, 简单直接。</p>
<p>可是由于还不足够的成熟, 用了一段时间后，我又很无耻的改回了<code class="language-text">react-router</code></p>
<p>不过我个人还是很欣赏<code class="language-text">reach-router</code>, 希望后续能真正的发展起来。</p>
<h2 id="reactmobx结合" class="heading"><a href="#reactmobx%E7%BB%93%E5%90%88" aria-hidden="true"><span class="icon icon-link"></span></a>React+mobx结合</h2>
<p>一般看到<code class="language-text">React</code>, 一般也会伴随着<code class="language-text">Redux</code>。</p>
<p>而我从<code class="language-text">vue</code>和<code class="language-text">vuex</code>那套过来的，不是很喜欢<code class="language-text">Redux</code>那套复杂的规则和写法。</p>
<p>当然，也有很多成熟的解决方案，比如<code class="language-text">dva</code>, <code class="language-text">rematch</code>等, 轮子可不少啊。</p>
<p>但是我个人更偏向于使用<code class="language-text">mobx</code>，或者跟<code class="language-text">vuex</code>脱不了干系吧。</p>
<p>使用多<code class="language-text">store</code>组合，或许能让组件更加的灵活。而且使用简单，不需要复杂的流程。</p>
<h2 id="react在项目中使用" class="heading"><a href="#react%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>React在项目中使用</h2>
<p>主要是根据以往的<a href="https://zwing.site/posts/275254986.html">vue开发实践</a>，将其搬到<code class="language-text">react</code>中来。</p>
<ul>
<li>用户登录态管理</li>
<li>router的钩子</li>
<li>列表页的数据加载，数据展示流程控制</li>
<li>列表页查询参数与url查询参数双向绑定</li>
<li>部分组件的实现</li>
</ul>
<p>...后续再补</p>
]]></description><link>http://zwingz.github.io/posts/339905815.html</link><guid isPermaLink="false">339905815</guid><category><![CDATA[Js]]></category><category><![CDATA[Front End]]></category><category><![CDATA[React]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Tue, 10 Jul 2018 15:56:23 GMT</pubDate></item><item><title><![CDATA[Promise/A+规范以及实现]]></title><description><![CDATA[<h1 id="promise-实现原理" class="heading"><a href="#promise-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>Promise 实现原理</h1>
<p><a href="https://github.com/zWingz/Promise">源码</a></p>
<h2 id="promise基本用法" class="heading"><a href="#promise%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>Promise基本用法</h2>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> val
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>
<p>Promise对象基本方法是<code class="language-text">then</code>, 而<code class="language-text">catch</code>是<code class="language-text">then</code>的一个变形, 相当于<code class="language-text">then(undefined, onReject)</code></p>
<h2 id="实现过程" class="heading"><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B" aria-hidden="true"><span class="icon icon-link"></span></a>实现过程</h2>
<p>根据Promise用法, 我们初步想到需要实现的方法是</p>
<ul>
<li>构造函数</li>
<li>resolve函数</li>
<li>reject函数</li>
<li>then函数</li>
</ul>
<p>此时Promise原型应为</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'PENDING'</span>
<span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">'RESOLVED'</span>
<span class="token keyword">const</span> <span class="token constant">REJECT</span> <span class="token operator">=</span> <span class="token string">'REJECT'</span>

<span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onReslove<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="根据promisea规范以下简称规范中所说的" class="heading"><a href="#%E6%A0%B9%E6%8D%AEpromisea%E8%A7%84%E8%8C%83%E4%BB%A5%E4%B8%8B%E7%AE%80%E7%A7%B0%E8%A7%84%E8%8C%83%E4%B8%AD%E6%89%80%E8%AF%B4%E7%9A%84" aria-hidden="true"><span class="icon icon-link"></span></a>根据<code class="language-text">Promise/A+规范</code>(以下简称规范)中所说的</h3>
<ul>
<li>Promise有三个状态 <code class="language-text">PENDING</code>, <code class="language-text">RESOLVED</code>, <code class="language-text">REJECTED</code></li>
<li>状态只会从<code class="language-text">PENDING</code>转换到<code class="language-text">RESOLVED</code>或者<code class="language-text">REJECTED</code>其中一个, 并且之后不会再改变</li>
<li>当Promise处于执行态时, 会有一个终值, 并且该值不会再改变</li>
<li>当Promise处于拒绝态时, 会有一个据因, 并且该据因不会再改变</li>
<li>当Promise由PENDING转换为RESOLVED时, 会触发<code class="language-text">onResolve</code>回调, 并且只执行一次</li>
<li>当Promise由PENDING转换为REJECTED时, 会触发<code class="language-text">onReject</code>回调, 并且只执行一次</li>
<li>Promise状态的转换时机在于开发者何时调用promise的resolve或者reject函数</li>
</ul>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 终值或者据因</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">PENDING</span> <span class="token comment">// 状态</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onResolveCallBack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// resolved 回调</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectCallBack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// rejected 回调</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token comment">// 设置终值</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">RESOLVED</span> <span class="token comment">// 设置状态</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onResolveCallBack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">each</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">each</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 执行回调</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> reason <span class="token comment">// 设置据因</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECT</span> <span class="token comment">// 设置状态</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectCallBack<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">each</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token function">each</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token comment">// 执行回调</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onReslove<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>这里可能有人会说Promise应该是一个异步的过程, 在上面代码中并没有看到任何的异步. 比如说: setTimeout。</p>
<p>解答：</p>
<p>其实当创建一个Promise实例的时候，整个过程是同步的。</p>
<p>也就是说</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after ins'</span><span class="token punctuation">)</span>

<span class="token comment">// 输出</span>
<span class="token comment">// Promise {&lt;resolved>: 10}</span>
<span class="token comment">// after ins</span>
</code></pre></div>
<p>当你执行完这一句， ins的状态会马上变成<code class="language-text">RESOLVED</code>. 说明在构造方法中并没有执行异步操作。如果真的需要异步的话，则需要主动在调用<code class="language-text">res</code>前，加上<code class="language-text">setTimeout</code>来触发异步。</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after ins'</span><span class="token punctuation">)</span>

<span class="token comment">// 输出</span>
<span class="token comment">// Promise {&lt;pending>}</span>
<span class="token comment">// after ins</span>
</code></pre></div>
<h3 id="还有一个then方法没有完成-先看下规范怎么说" class="heading"><a href="#%E8%BF%98%E6%9C%89%E4%B8%80%E4%B8%AAthen%E6%96%B9%E6%B3%95%E6%B2%A1%E6%9C%89%E5%AE%8C%E6%88%90-%E5%85%88%E7%9C%8B%E4%B8%8B%E8%A7%84%E8%8C%83%E6%80%8E%E4%B9%88%E8%AF%B4" aria-hidden="true"><span class="icon icon-link"></span></a>还有一个<code class="language-text">then</code>方法没有完成. 先看下规范怎么说</h3>
<ul>
<li>一个promise必须提供一个<code class="language-text">then</code>方法以访问当前值, 终止和据因</li>
<li>then接受两个参数<code class="language-text">then(onResolve, onReject)</code></li>
<li>onResolve和onReject都是可选, 如果不是函数则被忽略</li>
<li>onResolve方法在promise执行结束后被调用, 其第一个参数为promise的终值, 被调用次数不超过一次</li>
<li>onReject方法在promise被拒绝后被调用, 其第一个参数为promise的据因, 同样被调用次数不超过一次</li>
<li>onFulfilled 和 onRejected 只有在执行环境堆栈仅包含平台代码时才可被调用 </li>
<li>如果onResolve和onReject返回一个值x, 则执行 <strong>Promise解决过程</strong></li>
<li>then方法必须返回一个<code class="language-text">promise</code>对象</li>
</ul>
<p>简单说就是</p>
<ul>
<li>如果promise处于pending, 则将then回调放入promise的回调列表中</li>
<li>如果promise处于resolved, 则实行then方法中的onResolve</li>
<li>如果promise处于rejected, 则执行then方法中的onReject</li>
<li>then方法要确保onResolve和onReject异步执行</li>
<li>onResolve和onReject返回的值都将用来解决下一个promise(后面再讲解)</li>
<li>返回新的promise(注意: 一定是新的promise)</li>
</ul>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nextResolve<span class="token punctuation">,</span> nextReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 加入到任务队列</span>
                self<span class="token punctuation">.</span>onResolveCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>onRejectCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onReject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 异步执行</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span>onResolve<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 异步执行</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span>onReject<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<p>此时Promise已经可以完成异步操作.
但是Promise还有一个关键特点是可以链式调用. 目前是还没有实现链式调用这一步.
具体代码看<a href="https://github.com/zWingz/Promise/blob/master/promise2.js">promise2.js</a></p>
<h3 id="接下来继续看下规范怎么说" class="heading"><a href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%BB%A7%E7%BB%AD%E7%9C%8B%E4%B8%8B%E8%A7%84%E8%8C%83%E6%80%8E%E4%B9%88%E8%AF%B4" aria-hidden="true"><span class="icon icon-link"></span></a>接下来继续看下规范怎么说</h3>
<p>Promise 解决过程</p>
<ul>
<li>blablabla 这里比较长</li>
</ul>
<p><strong>简单说就是</strong></p>
<p><code class="language-text">x</code>为<code class="language-text">then</code>方法中<code class="language-text">onResolve</code>或者<code class="language-text">onReject</code>中返回的值, <code class="language-text">promise2</code>为<code class="language-text">then</code>方法返回的新<code class="language-text">promise</code>.</p>
<p><code class="language-text">promise</code>的解决过程是一个抽象步骤. 需要输入一个<code class="language-text">promise</code>和一个<strong>值</strong>. 表示为<code class="language-text">[[Resolve]](promise, x)</code></p>
<ul>
<li>如果<code class="language-text">x</code>和<code class="language-text">promise2</code>相等, 则以<code class="language-text">TypeError</code>为据因拒绝执行promise2</li>
<li>如果<code class="language-text">x</code>为<code class="language-text">Promise</code>实例, 则让<code class="language-text">promise2</code>接受x的状态</li>
<li>如果<code class="language-text">x</code>为<code class="language-text">thenable</code>对象, 则调用其<code class="language-text">then</code>方法</li>
<li>如果都不满足, 则用<code class="language-text">x</code>为参数执行<code class="language-text">promise2</code></li>
</ul>
<p>继续修改then方法, 以及添加<code class="language-text">resolvePromise</code>来执行<code class="language-text">Promise</code>解决过程</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_isFunction</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">'function'</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">_isThenable</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">_isFunction</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * Promise 解决过程
 * 如果是thenable对象, 则触发该对象的then方法
 * 如果是一个值, 则直接调用resolve解析这个值
 * @param {Promise}} promise
 * @param {Object} x
 * @param {Function} resolve
 * @param {Function} reject
 */</span>
<span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 要求每次返回新的promise</span>
  <span class="token comment">// 如果返回是当前的promise, 则抛出typeError</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Chaining cycle detected for promise'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token comment">// 判断是否thenable对象</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_isThenable</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> then <span class="token punctuation">}</span> <span class="token operator">=</span> x
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_isFunction</span><span class="token punctuation">(</span>then<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
          x<span class="token punctuation">,</span>
          <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              called <span class="token operator">=</span> <span class="token boolean">true</span>
              <span class="token comment">// 如果不断的返回thenable</span>
              <span class="token comment">// 则需要不断地递归</span>
              <span class="token comment">// 但是实际上不应该不断的返回thenable</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> val<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              called <span class="token operator">=</span> <span class="token boolean">true</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//  非thenable, 则以该值来执行resolve</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">/**
   * then方法
   * @param {Function} [onFulfilled] 前then的resolve函数, 当promise为RESOLVE时,处理当前结果
   * @param {Function} onRejected 当前then的reject函数, 当promise被REJECT时调用
   * @returns {Promise}
   * @memberof Promise
   */</span>
  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=></span> val
    onRejected <span class="token operator">=</span>
      <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span>
        <span class="token operator">?</span> <span class="token function-variable function">onRejected</span>
        <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> err
          <span class="token punctuation">}</span>
    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token comment">// 如果有then方法调用, 则将hasThenHandle设为true</span>
    <span class="token comment">// console.log(this);</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hasThenHandle <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">/**
     * 返回一个新的promise, 用于链式调用
     */</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 用try..catch包裹执行方法</span>
      <span class="token keyword">const</span> <span class="token function-variable function">tryCatchWrapper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fnc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 封装resolve方法回调</span>
      <span class="token keyword">const</span> doResolve <span class="token operator">=</span> <span class="token function">tryCatchWrapper</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token comment">// 封装reject方法回调</span>
      <span class="token comment">// 如果当前then没有相应的reject回调</span>
      <span class="token keyword">const</span> doReject <span class="token operator">=</span> <span class="token function">tryCatchWrapper</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前promise还未执行完毕, 则设置回调</span>
        self<span class="token punctuation">.</span>onResolveCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>doResolve<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>onRejectCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>doReject<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">RESOLVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果为RESOLVE, 则异步执行resolve</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span>doResolve<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果为REJECT, 则异步执行reject</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span>doReject<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<p>至此一个<code class="language-text">Promise</code>可以说基本完成了.(完整代码请看<a href="https://github.com/zWingz/Promise/blob/master/index.js">index.js</a>)</p>
<h3 id="规范外的一些东西" class="heading"><a href="#%E8%A7%84%E8%8C%83%E5%A4%96%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF" aria-hidden="true"><span class="icon icon-link"></span></a>规范外的一些东西</h3>
<p>其实规范中定义的是<code class="language-text">Promise</code>的构建和执行过程.</p>
<p>而我们日常用到的却不至于规范中所提到的.</p>
<p>比如</p>
<ul>
<li>catch</li>
<li>finally</li>
<li>Promise.resolve</li>
<li>Promise.reject</li>
<li>all (未实现)</li>
<li>race (未实现)</li>
</ul>
<p>那接下来就说下关于这部分的实现</p>
<h4 id="catch" class="heading"><a href="#catch" aria-hidden="true"><span class="icon icon-link"></span></a>catch</h4>
<p>上面有提到. catch其实是<code class="language-text">then(undefined, reject)</code> 的简写. 所以这里比较简单</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 相当于新加入一个then方法</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<h4 id="finally-es2018引入标准" class="heading"><a href="#finally-es2018%E5%BC%95%E5%85%A5%E6%A0%87%E5%87%86" aria-hidden="true"><span class="icon icon-link"></span></a>finally (ES2018引入标准)</h4>
<p>finally函数作用我想大家都应该知道, 就是无论当前promise状态是如何. 都一定会执行回调.</p>
<p>finally方法中, 不接收任何参数, 所以并不能知道前面的Promise的状态.</p>
<p>同时, 他不会对promise产生影响.总是返回原来的值 所以在<code class="language-text">finally</code>中的操作,应该是与状态无关, 不依赖于promise的执行结果</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token function-variable function">fnc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> val
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token function">fnc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> err
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<h4 id="promiseresolve和promisereject-这里是从es6入门中看到的定义" class="heading"><a href="#promiseresolve%E5%92%8Cpromisereject-%E8%BF%99%E9%87%8C%E6%98%AF%E4%BB%8Ees6%E5%85%A5%E9%97%A8%E4%B8%AD%E7%9C%8B%E5%88%B0%E7%9A%84%E5%AE%9A%E4%B9%89" aria-hidden="true"><span class="icon icon-link"></span></a>Promise.resolve和Promise.reject (这里是从ES6入门中看到的定义)</h4>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 调用形式</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
</code></pre></div>
<ul>
<li>
<p>Promise.resolve</p>
<p>  根据arg的不同, 会执行不同的操作
- arg为Promise实例, 则原封不动的返回这个实例
- arg为thenable对象, 则会将arg转成promise, 并且立即执行<code class="language-text">arg.then</code>方法(并不代表同步, 而是本轮事件循环结束时执行)
- arg不满足上述情况, 则返回一个新的Promise实例, 状态为resolved, 终值为arg
因此<code class="language-text">Promise.resolve</code>是一个更方便的创建<code class="language-text">Promise</code>实例的方法.</p>
</li>
<li>
<p>Promise.reject</p>
<p>  这里就不会区分arg, 而是原封不动的把arg作为据因, 执行后续方法的调用.</p>
</li>
</ul>
<p>实现代码</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">/**
     * Promise.resolve
     * 将参数转成Promise对象
     * @static
     * @param {any} val
     * @returns {MPromise}
     * @memberof MPromise
     */</span>
    <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果为MPromise实例</span>
        <span class="token comment">// 则返回该实例</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> val
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">_isThenable</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果为具有then方法的对象</span>
            <span class="token comment">// 则转为MPromise对象, 并且执行thenable</span>
            <span class="token comment">/**
             * @example
             * MPromise.resolve({
             *      then(res) {
             *          console.log('do promise')
             *          res(10)
             *      }
             *  })
             */</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 执行异步</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    val<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> rej<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果val为一个原始值,或者不具有then方法的对象</span>
        <span class="token comment">// 则返回一个新的MPromise对象,状态为resolved</span>
        <span class="token comment">/**
         * @example
         * MPromise.resolve()
         */</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">res</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/**
     * reject方法参数会原封不动的作为据因而变成后续方法的参数
     * 且初始状态为REJECT
     * 不存在判别thenable
     * @static
     * @param {any} reason 
     * @returns 
     * @memberof MPromise
     */</span>
    <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/**
         * @example
         * MPromise.reject('some error')
         */</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">rej</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<h3 id="开发过程中遇到其他问题" class="heading"><a href="#%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98" aria-hidden="true"><span class="icon icon-link"></span></a>开发过程中遇到其他问题</h3>
<h4 id="node中的unhandledrejection和浏览器中的uncaught-in-promise-提示" class="heading"><a href="#node%E4%B8%AD%E7%9A%84unhandledrejection%E5%92%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84uncaught-in-promise-%E6%8F%90%E7%A4%BA" aria-hidden="true"><span class="icon icon-link"></span></a>node中的<code class="language-text">unhandledRejection</code>和浏览器中的<code class="language-text">Uncaught (in promise)</code> 提示</h4>
<p>在Promise中产生的所有错误都会被Promise吞掉. 当没有相应的错误处理函数时候, node和浏览器分别有不同的表现.</p>
<p>但是这并不是一个新的错误, 因为不能用<code class="language-text">try{} catch(){}</code> 捕获.</p>
<p>所以在浏览器端, 是一个<code class="language-text">console.error</code>的错误提示, 在<code class="language-text">node</code>中, 这个算是一个事件. 具体可以通过<code class="language-text">process.on</code>来监听</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">process<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'unhandledRejection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> err
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>在编写代码中, 一开始卡在这一步挺久.</p>
<p>由于无法知道promise实例后续是否有相应的错误处理函数.</p>
<p>简单的判断<code class="language-text">onReject === undefined</code> 是不行的.</p>
<p>形如:</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// 或者</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">rej</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>
<p>这类是同步执行的, <code class="language-text">onReject === undefined</code> 恒为<code class="language-text">true</code>.</p>
<p>我的做法是给promise实例添加一个<code class="language-text">hasThenHandle</code>的属性, 在<code class="language-text">then</code>方法中将其设为<code class="language-text">true</code></p>
<p>在<code class="language-text">reject</code>方法中使用<code class="language-text">setTimeout</code>异步判断该值是否为<code class="language-text">true</code>, 如果不是则通过<code class="language-text">console.error</code>抛出提示.</p>
<p>其实在原生Promise中, 抛出的<code class="language-text">unhandledRejection</code> 也是属于异步的.</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after Promise.reject'</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">rej</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'after new Promise'</span><span class="token punctuation">)</span>

<span class="token comment">// 输出</span>
<span class="token comment">// after Promise.reject</span>
<span class="token comment">// after new Promise</span>
<span class="token comment">// Uncaught (in promise) 10</span>
<span class="token comment">// Uncaught (in promise) 10</span>
</code></pre></div>
<p>于是这个问题也能得到很好地解决.</p>
<p>至此完整代码已经结束, 具体看<code class="language-text">index.js</code>.</p>
<h2 id="存在的问题" class="heading"><a href="#%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98" aria-hidden="true"><span class="icon icon-link"></span></a>存在的问题</h2>
<ul>
<li>由于用的是setTimeout模拟, 所以优先级不能保证高于setTimeout<ul>
<li>浏览器中可以用MessageChannel(macrotask)</li>
<li>node中可以用setImmediate(优先级在某些情况下比setTimeout高一些)</li>
<li>setTimeout和setImmediate在无IO操作下,两者执行顺序不确定,但是在IO操作下,setImmediate比setTimeout优先级高. 且setImmediate只在IE下有效</li>
</ul></li>
</ul>
<h2 id="参考" class="heading"><a href="#%E5%8F%82%E8%80%83" aria-hidden="true"><span class="icon icon-link"></span></a>参考</h2>
<p><a href="http://www.ituring.com.cn/article/66566">【翻译】Promises/A+规范</a></p>
<p><a href="http://es6.ruanyifeng.com/#docs/promise#Promise-prototype-finally">ECMAScript 6入门</a></p>
]]></description><link>http://zwingz.github.io/posts/316337025.html</link><guid isPermaLink="false">316337025</guid><category><![CDATA[Js]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Fri, 20 Apr 2018 16:40:56 GMT</pubDate></item><item><title><![CDATA[初次制作戚风蛋糕（6寸）]]></title><description><![CDATA[<h2 id="材料" class="heading"><a href="#%E6%9D%90%E6%96%99" aria-hidden="true"><span class="icon icon-link"></span></a>材料</h2>
<ul>
<li>低筋面粉 45g</li>
<li>鸡蛋 3个</li>
<li>色拉油(植物油/玉米油) 20g</li>
<li>牛奶25g (没有牛奶.所以用了奶粉+水冲兑)</li>
<li>砂糖 40g(蛋白30g 蛋黄10g)</li>
<li>打蛋盆和有同样大的盆子</li>
<li>6寸模具（我的模具是8寸）</li>
</ul>
<h2 id="步骤" class="heading"><a href="#%E6%AD%A5%E9%AA%A4" aria-hidden="true"><span class="icon icon-link"></span></a>步骤</h2>
<ul>
<li>用电子秤准确称取上次材料.。糖要分开秤,因为用途不一样。</li>
<li>是蛋清分离器将蛋白和蛋黄分开。每次分离时候在小碗里面分离，分离完了才将蛋白倒入打蛋盆中，以免污染了打蛋盆中的蛋白。将蛋黄放入另一个盆子中。</li>
<li>加入10g砂糖到打蛋盆中，使用电动打蛋器低速搅动。待出现大量泡泡时候，倒入10g糖，开高速档进行搅动，当蛋清出现纹路后，加入最后10g砂糖，继续搅动。直到打蛋器提起后蛋白不会掉落，此时蛋白已经算打发完成。</li>
<li>用手动打蛋器搅拌蛋黄，搅拌完后，倒入10g砂糖、25g牛奶、20g植物油。继续搅拌。</li>
<li>用面粉筛将低筋面粉塞入蛋黄液中。</li>
<li>使用刮刀将面粉和蛋黄液混合，此处不能用打蛋器。刮刀混合时候从下往上翻，不能想打鸡蛋一样顺时针转动。要像炒菜一样。</li>
<li>混合搅拌至面粉糊没有颗粒。</li>
<li>烤箱150°预热10分钟。</li>
<li>取1/3打发好的蛋白，混入面糊当中，继续用刮刀将两者搅拌均匀。</li>
<li>将面糊全部倒入到打蛋盆中，与剩余的蛋白继续搅拌均匀，直到没有颗粒。</li>
<li>将搅拌好的面糊倒入蛋糕模中。</li>
<li>烤箱150°烤30-40分钟。</li>
<li>完成后取出。</li>
<li>摔模：将模具举高离台面5-8cm，摔下。</li>
<li>然后将模具倒扣在烤网上面，待蛋糕冷却后脱模。</li>
<li>此时戚风蛋糕制作完成。</li>
</ul>
<h2 id="失败点与总结" class="heading"><a href="#%E5%A4%B1%E8%B4%A5%E7%82%B9%E4%B8%8E%E6%80%BB%E7%BB%93" aria-hidden="true"><span class="icon icon-link"></span></a>失败点与总结</h2>
<ul>
<li>烤的中途打开了烤箱门，可能导致蛋糕回缩了。 因为一开始时候蛋糕还是逐渐增高，后面不知道为什么缩回去了，有可能是因为我打开了烤箱门。</li>
<li>第三个鸡蛋蛋清分离失败了，然后就直接把整个鸡蛋放入蛋黄液中，也不清楚是否有影响。</li>
<li>没有用牛奶而是用奶粉+水，可能有影响。 </li>
</ul>
<h2 id="图片" class="heading"><a href="#%E5%9B%BE%E7%89%87" aria-hidden="true"><span class="icon icon-link"></span></a>图片</h2>
<p><img src="https://zwing.site/imgur/92583692.jpg"></p>
<p><img src="https://zwing.site/imgur/31921272.jpg"></p>
<p><img src="https://zwing.site/imgur/61126157.jpg"></p>
<p><img src="https://zwing.site/imgur/44394098.jpg"></p>
<h2 id="最后" class="heading"><a href="#%E6%9C%80%E5%90%8E" aria-hidden="true"><span class="icon icon-link"></span></a>最后</h2>
<p>这次戚风蛋糕第一次尝试，还是挺不错的，评个80分吧。</p>
<p>本来是打算弄芝士蛋糕，奈何没有奶油奶酪，只能做原味戚风蛋糕了。
下次可以买奶油奶酪试试做芝士蛋糕。</p>
<p>周末做了下蛋包饭，差点就做成了蛋炒饭。</p>
<p>原因还是材料太多了，炒起来鸡蛋都保不住。</p>
<p>不过吃起来还是挺好吃，可能下次要注意下材料分量，鸡蛋能包起来就更好吃了。</p>
]]></description><link>http://zwingz.github.io/posts/310330786.html</link><guid isPermaLink="false">310330786</guid><category><![CDATA[烘焙]]></category><category><![CDATA[生活]]></category><category><![CDATA[杂事]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Sun, 01 Apr 2018 15:13:17 GMT</pubDate></item><item><title><![CDATA[记：再一次制作蛋挞。]]></title><description><![CDATA[<h2 id="材料" class="heading"><a href="#%E6%9D%90%E6%96%99" aria-hidden="true"><span class="icon icon-link"></span></a>材料</h2>
<ul>
<li>蛋黄3个 (蛋清分离，只要蛋黄)</li>
<li>糖霜 10g （太少了，下次可以试着20g）</li>
<li>牛奶250ml</li>
<li>低筋粉 15g （有点多，下次试着10g）</li>
<li>蛋挞皮9个 （刚好的）</li>
</ul>
<h2 id="过程" class="heading"><a href="#%E8%BF%87%E7%A8%8B" aria-hidden="true"><span class="icon icon-link"></span></a>过程</h2>
<ul>
<li>用蛋清分离器，将鸡蛋逐个进行蛋清分离。将蛋黄放入打蛋盆中，蛋清可以另外存放，可以作为双皮奶原料。</li>
<li>由于没有牛奶，于是用了4勺奶粉代替。</li>
<li>电子秤称取10g糖霜。此次蛋挞不够甜，下次可以尝试放20g，或者15g砂糖也可以。</li>
<li>将糖霜倒入奶粉中，并用热水冲兑，搅拌，静置到常温。</li>
<li>用电子秤称取15g低筋粉（此次感觉过多，下次只称取10g），放入小碗中存放。</li>
<li>用打蛋器（手动）将蛋黄打散，并逐步加入混入糖霜的牛奶，分三次倒入，一边倒一边搅拌。</li>
<li>用面粉筛分三次筛入低筋面粉，并且一边筛入一边搅拌，尽量让蛋液和面粉混合。</li>
<li>筛入面粉后，此时蛋液有较多的泡沫。</li>
<li>使用过滤筛，过滤掉过多的泡沫。此次我一共过滤了三遍。</li>
<li>烤箱220度预热10分钟。</li>
<li>取出烤盆，铺上油纸，放入9个蛋挞皮。</li>
<li>倒入蛋挞液，9成满。</li>
<li>烤箱预热完毕，则放入蛋挞烤即可。</li>
<li>220度烤25分钟即可完成。</li>
</ul>
<h2 id="上图" class="heading"><a href="#%E4%B8%8A%E5%9B%BE" aria-hidden="true"><span class="icon icon-link"></span></a>上图</h2>
<h3 id="倒入蛋挞液后" class="heading"><a href="#%E5%80%92%E5%85%A5%E8%9B%8B%E6%8C%9E%E6%B6%B2%E5%90%8E" aria-hidden="true"><span class="icon icon-link"></span></a>倒入蛋挞液后</h3>
<p><img src="https://zwing.site/imgur/45790429.jpg"></p>
<h3 id="放入烤箱" class="heading"><a href="#%E6%94%BE%E5%85%A5%E7%83%A4%E7%AE%B1" aria-hidden="true"><span class="icon icon-link"></span></a>放入烤箱</h3>
<p><img src="https://zwing.site/imgur/75661678.jpg"></p>
<h3 id="正在烤的蛋挞" class="heading"><a href="#%E6%AD%A3%E5%9C%A8%E7%83%A4%E7%9A%84%E8%9B%8B%E6%8C%9E" aria-hidden="true"><span class="icon icon-link"></span></a>正在烤的蛋挞</h3>
<p><img src="https://zwing.site/imgur/33388698.jpg"></p>
<h3 id="成品" class="heading"><a href="#%E6%88%90%E5%93%81" aria-hidden="true"><span class="icon icon-link"></span></a>成品</h3>
<p><img src="https://zwing.site/imgur/38696134.jpg"></p>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<ul>
<li>不够甜，需要加多点糖。</li>
<li>面粉太多了，有点沉底。</li>
</ul>
]]></description><link>http://zwingz.github.io/posts/308242286.html</link><guid isPermaLink="false">308242286</guid><category><![CDATA[烘焙]]></category><category><![CDATA[生活]]></category><category><![CDATA[杂事]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Sat, 24 Mar 2018 09:13:45 GMT</pubDate></item><item><title><![CDATA[开发环境搭建]]></title><description><![CDATA[<h1 id="mac开发环境" class="heading"><a href="#mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" aria-hidden="true"><span class="icon icon-link"></span></a>mac开发环境</h1>
<h2 id="安装-brew" class="heading"><a href="#%E5%AE%89%E8%A3%85-brew" aria-hidden="true"><span class="icon icon-link"></span></a>安装 brew</h2>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">/usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span></code></pre></div>
<h2 id="终端环境" class="heading"><a href="#%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83" aria-hidden="true"><span class="icon icon-link"></span></a>终端环境</h2>
<ul>
<li>
<p><a href="https://www.iterm2.com/">iterm2</a></p>
</li>
<li>
<p><a href="http://ohmyz.sh/">oh-my-zsh</a></p>
<p>安装</p>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span></code></pre></div>
<p>添加插件</p>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc</code></pre></div>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>
  <span class="token function">git</span>
  z
<span class="token punctuation">)</span></code></pre></div>
</li>
</ul>
<h2 id="node-环境搭建" class="heading"><a href="#node-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA" aria-hidden="true"><span class="icon icon-link"></span></a>node 环境搭建</h2>
<ul>
<li>
<p>安装 nvm</p>
<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
<span class="token comment"># or</span>
<span class="token function">wget</span> -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
 
 
<span class="token comment"># then</span>
<span class="token comment"># vim ~/.bash_profile or ~/.zshrc or ~/.profile or ~/.bashrc</span>
<span class="token comment"># insert</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>
<span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment"># This loads nvm</span>
 
<span class="token comment"># last</span>
<span class="token builtin class-name">source</span> ~/.your_rcprofile</code></pre></div>
<p>使用方法</p>
<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token comment"># 本地node版本</span>
nvm <span class="token function">ls</span>
<span class="token comment"># node所有版本</span>
nvm ls-remote
<span class="token comment"># 安装最新node(稳定版,即偶数版)</span>
nvm <span class="token function">install</span> --lts
<span class="token comment"># 安装指定版本node</span>
nvm <span class="token function">install</span> v8.9.4
<span class="token comment"># 切换到指定版本/别名node</span>
nvm use v8.9.4
<span class="token comment"># 给node版本起别名</span>
nvm <span class="token builtin class-name">alias</span> default v8.9.4</code></pre></div>
</li>
<li>
<p>安装 node</p>
<p><code class="language-text">nvm install v8.9.4</code></p>
</li>
<li>
<p>npm 换源</p>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># npm 源</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
<span class="token comment"># sass 源</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/</code></pre></div>
</li>
</ul>
<h2 id="git-配置" class="heading"><a href="#git-%E9%85%8D%E7%BD%AE" aria-hidden="true"><span class="icon icon-link"></span></a>git 配置</h2>
<ul>
<li>
<p>安装</p>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span></code></pre></div>
</li>
<li>
<p>配置 ssh-key</p>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">''</span>
<span class="token function">git</span> config --global user.email <span class="token string">''</span>

ssh-keygen -t res -C <span class="token string">'email'</span></code></pre></div>
</li>
<li>
<p>配置 hosts</p>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">vim</span> config

<span class="token comment"># 写入</span>
Host github.com
HostName github.com
User <span class="token function">git</span>
IdentityFile ~/.ssh/id_rsa_github

Host gitlab.com
HostName gitlab.com
User <span class="token function">git</span>
IdentityFile ~/.ssh/id_rsa_gitlab</code></pre></div>
</li>
<li>
<p>注入密码（重启后失效）
<code class="language-text">ssh-add -k ~/.ssh/id_rsa_gitlab</code></p>
</li>
</ul>
<h2 id="vscode-编辑器" class="heading"><a href="#vscode-%E7%BC%96%E8%BE%91%E5%99%A8" aria-hidden="true"><span class="icon icon-link"></span></a><a href="https://code.visualstudio.com/">vscode</a> 编辑器</h2>
<ul>
<li>安装插件 <code class="language-text">Setting Sync</code></li>
<li>设置 gist <code class="language-text">&quot;sync.gist&quot;: &quot;8162a18bd9632ab95c50704e92e1a57c&quot;</code></li>
<li>同步 Setting</li>
<li>主要插件<code class="language-text">eslint</code> <code class="language-text">vetur</code> <code class="language-text">document this</code> <code class="language-text">javascript code snippets</code> <code class="language-text">project manager</code></li>
</ul>
]]></description><link>http://zwingz.github.io/posts/303526921.html</link><guid isPermaLink="false">303526921</guid><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Thu, 08 Mar 2018 15:45:19 GMT</pubDate></item><item><title><![CDATA[vue组件-固定表格]]></title><description><![CDATA[<h1 id="固定表格" class="heading"><a href="#%E5%9B%BA%E5%AE%9A%E8%A1%A8%E6%A0%BC" aria-hidden="true"><span class="icon icon-link"></span></a>固定表格</h1>
<p>后台管理系统,多多少少会有列表页.</p>
<p>而列表页又正是由表格形成.</p>
<p>但是原生的表头并不能固定头部以及两侧.</p>
<p>一旦数据多了,查看起来就不方便了.</p>
<p>于是乎就出现很多固定表头/两侧的表格组件</p>
<h2 id="实现原理" class="heading"><a href="#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" aria-hidden="true"><span class="icon icon-link"></span></a>实现原理</h2>
<h3 id="绝对定位" class="heading"><a href="#%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D" aria-hidden="true"><span class="icon icon-link"></span></a>绝对定位</h3>
<ul>
<li>
<p>实现方式
这种应该是最普遍也是最简单的方式.</p>
<p>就是将一个表格分成多个表格.</p>
<p>包括表头/左侧/右侧/表体, 共四个表格</p>
<p>然后通过 css 方式将表头以及两侧固定</p>
<p>之后通过 scroll 事件的监听,同步表头以及两侧的 scroll 值,就可以达到固定的效果</p>
</li>
<li>
<p>优点
实现起来简单,而且无缝滚动</p>
</li>
<li>
<p>缺点
表格都是使用 table-layout:fixed; 使得每个单元格宽度固定.</p>
<p>如果不使用 fixed 的话.则需要一个 <col> 管理每一列的宽度.</p>
<p>这样不能达到宽度自适应的情况</p>
<p>滚动必须是局部滚动.而不是跟随全局.</p>
</li>
<li>
<p>例子
elementUI 的表格就是这样实现的.
<img src="https://zwing.site/imgur/39962386.jpg">
同一个表格的表头,表体分别复制了3次.用来形成表头和两侧的固定.</p>
<p>使用绝对定位固定两侧.</p>
<p>通过管理 scroll 的值管理表头以及两侧滚动.</p>
<p>这样就会导致 dom 数量的增加.</p>
</li>
</ul>
<h2 id="css-方法---position-sticky" class="heading"><a href="#css-%E6%96%B9%E6%B3%95---position-sticky" aria-hidden="true"><span class="icon icon-link"></span></a>css 方法 - position: sticky</h2>
<p>此方法原生支持固定表头.</p>
<p>但是目前<a href="https://caniuse.com/#feat=css-sticky">兼容性</a>不客观
<img src="https://zwing.site/imgur/67634294.jpg"></p>
<h2 id="本文实现" class="heading"><a href="#%E6%9C%AC%E6%96%87%E5%AE%9E%E7%8E%B0" aria-hidden="true"><span class="icon icon-link"></span></a>本文实现</h2>
<ul>
<li><a href="http://zwing.site/vue-fixed-table/release/demo.html">DEMO</a>(原谅我没弄样式)</li>
</ul>
<h3 id="背景" class="heading"><a href="#%E8%83%8C%E6%99%AF" aria-hidden="true"><span class="icon icon-link"></span></a>背景</h3>
<p>当固定表头的需求提出来时,我也是曾经想过直接使用 elementUI 的表格.</p>
<p>但是发现使用 elementUI 的表格插件需要改动不少代码.而且感觉不够灵活.</p>
<p>于是就自己去实现</p>
<h3 id="第一版" class="heading"><a href="#%E7%AC%AC%E4%B8%80%E7%89%88" aria-hidden="true"><span class="icon icon-link"></span></a>第一版</h3>
<p>由于考虑到不想使用 fixed 布局以及组个单元格去管理宽度.</p>
<p>而且不想使用局部滚动</p>
<p>所以一开始就决定使用 监听全局滚动+transition 方式.让表格头跟随滚动走</p>
<p>也就是说.当表头贴近浏览器上端的时候才固定.</p>
<p>而不是局部滚动式的固定.</p>
<p>这样 thead 和 tbody 就是一体,不存在宽度不一致问题</p>
<h3 id="兼容性问题" class="heading"><a href="#%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98" aria-hidden="true"><span class="icon icon-link"></span></a>兼容性问题</h3>
<p>一旦thead产生了 transform. 表格的 border-collapse 会失效.表格头的边框会消失.</p>
<p>为了解决这个问题.我使用阴影来替代 border.</p>
<p>但是在 safari 上.transform 部分不会显示出阴影..暂无解</p>
<p>对于 transition 问题.</p>
<p>在 chrome 下不存在闪烁卡顿现象, 而在 Firefox 和 safari 则存在闪烁和卡顿现象.</p>
<p>由于是内部系统, 使用 chrome 居多.所以 firefox 和 safari 下只做了兼容性处理.</p>
<h3 id="第二版" class="heading"><a href="#%E7%AC%AC%E4%BA%8C%E7%89%88" aria-hidden="true"><span class="icon icon-link"></span></a>第二版</h3>
<p>在第一版完成后, 基本实现了固定表格头功能. 而且在 chrome 下表现顺畅.</p>
<p>于是着手实现固定两侧.这里实现原理一样.所以很容易实现
<img src="https://zwing.site/imgur/60520413.jpg"></p>
<p>这种虽然右侧是固定在浏览器右侧.</p>
<p>但是整体页面还是被撑开的.</p>
<p>那么对于表格上下的其他组件,他们依旧是被浏览器隐藏.需要横向滚动才能看到.</p>
<p>于是我继续开始第三版改造</p>
<h3 id="第三版" class="heading"><a href="#%E7%AC%AC%E4%B8%89%E7%89%88" aria-hidden="true"><span class="icon icon-link"></span></a>第三版</h3>
<p>这一版主要就是为了页面的其他组件不被表格的宽高影响.也就是说不管表格多高多宽.</p>
<p>都可以在不滚动的前提下看到.</p>
<p>那么就是将表格变成局部滚动了.</p>
<p><img src="https://zwing.site/imgur/99932867.jpg"></p>
<p>其实就是一个自适应的内滚动容器.</p>
<p>前提是页面高度宽度都是100%</p>
<p>也就是说要有环境让容器产生滚动</p>
<p>监听此容器的滚动来控制表格头和两侧的固定.</p>
<p>但是收到反馈说这种表格看起来很狭小.不够大气</p>
<p><img src="https://zwing.site/imgur/42701513.jpg"></p>
<p>没办法,只能继续进行思考改进</p>
<h3 id="思考改进" class="heading"><a href="#%E6%80%9D%E8%80%83%E6%94%B9%E8%BF%9B" aria-hidden="true"><span class="icon icon-link"></span></a>思考改进</h3>
<p>在开始之前我的想法是</p>
<p>结合第二第三版.</p>
<p>将垂直滚动交给页面.横向滚动自管理.</p>
<p>什么意思呢?</p>
<p>就是页面高度可以被撑开. 但是宽度不能被撑开.</p>
<p>也就是说全局只有 y 轴滚动.没有 x 轴滚动.</p>
<p>其实第三版是可以实现的.</p>
<p>页面只需限制宽度为100%.高度不做限制,就可以轻松的达到要求.</p>
<p><img src="https://zwing.site/imgur/27128653.jpg"></p>
<p>注意这里的高度其实没有做限制的.也就是说容器滚动条被隐藏了.</p>
<p>那如果要横向滚动怎么办.</p>
<p>很简单啊.按着 shift 再滚动就是横向滚动了.</p>
<p><img src="https://zwing.site/imgur/42701513.jpg"></p>
<p>这是不科学的.不是每个人都知道.</p>
<p>那样是不是可以有一条虚拟的横向滚动条, 来管理表格的横向滚动呢.</p>
<p>于是就有第四版</p>
<h3 id="第四版" class="heading"><a href="#%E7%AC%AC%E5%9B%9B%E7%89%88" aria-hidden="true"><span class="icon icon-link"></span></a>第四版</h3>
<p>就是就是额外添加一个虚拟滚动条的组件.</p>
<p>当容器底部被浏览器隐藏时候.则平移这个滚动条至屏幕底部</p>
<ul>
<li>原生滚动条被隐藏时候,显示虚拟滚动条
<img src="https://zwing.site/imgur/24267221.jpg"></li>
<li>原生滚动条显示时候,隐藏虚拟滚动条
<img src="https://zwing.site/imgur/61056576.jpg"></li>
</ul>
<p>这样, 既能使得页面不被撑开. 同时高度也不需要限定在100%.</p>
<p>刚好能满足需求.</p>
<h3 id="实现方法" class="heading"><a href="#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95" aria-hidden="true"><span class="icon icon-link"></span></a>实现方法</h3>
<p>实现方法其实就是使用 transform 以及监听滚动来实现固定咯.</p>
<p>但是在使用上,则需要有一定的规则.</p>
<p><img src="https://zwing.site/imgur/81508433.jpg"></p>
<p>也就是说</p>
<p>在使用的时候.要通过 slot 分别配置 head,left,right 的内容.</p>
<p>简单说就是把表格拆分成左/中/右</p>
<p>那么 thead 和 tbody 就能保持列宽度.</p>
<p>关键处理:</p>
<ul>
<li>通过 slot配置左/中/右以及表格头/表格体 </li>
</ul>
<ul>
<li>hover 样式需要通过 mouseOver 和 mouseleave 去管理</li>
<li>通过监听表格和窗口的 resize 事件,以及使用 MutationObserver 来监听表格子节点的变化来重新获取表格宽度.(因为双侧固定需要依赖左中右的宽度)</li>
<li>通过监听全局滚动, 固定表格头</li>
<li>通过监听父容器的横向滚动, 固定两侧</li>
</ul>
<h3 id="不足之处" class="heading"><a href="#%E4%B8%8D%E8%B6%B3%E4%B9%8B%E5%A4%84" aria-hidden="true"><span class="icon icon-link"></span></a>不足之处</h3>
<ul>
<li>
<p>兼容性不太好, 在 chrome 表现良好(至少高版本的流畅), firefox 和 safari 则有卡顿现象,目前做法是在滚动时候,使用 opcity 将固定部分隐藏.滚动结束后显示</p>
</li>
<li>
<p>table 宽度变更时候. 右侧会有闪烁. 因为右侧固定算是很依赖表格宽度以及自身宽度.所以宽度变化对右侧影响很大. 暂未解决</p>
</li>
<li>
<p>需要有 css 支持. 让容易有一个可滚动的环境.</p>
</li>
<li>
<p>使用时候会把正常的 table 拆分成几部分. </p>
<p><img src="https://zwing.site/imgur/67633591.jpg"></p>
</li>
</ul>
<h3 id="aligncell-是什么-" class="heading"><a href="#aligncell-%E6%98%AF%E4%BB%80%E4%B9%88-" aria-hidden="true"><span class="icon icon-link"></span></a>AlignCell 是什么 ?</h3>
<p>其实就是 th 或者 td.</p>
<p>封装起来就是因为设计师想要达到表格每一列整体居中的前提下,左或者右对齐.</p>
<p>当然, 当数据量多的时候,每个单元格基本都是刚满足宽度. 直接左对齐是没问题的.</p>
<p>但是当数据不多.每个单元格宽度都是充足时候,这时候直接使用左对齐是不行的</p>
<p>那么,我也只好封装一层了. 这里就不介绍了</p>
<h2 id="结语" class="heading"><a href="#%E7%BB%93%E8%AF%AD" aria-hidden="true"><span class="icon icon-link"></span></a>结语</h2>
<p>虽然瑕疵比较多.但是开发整个组件过程,我个人是收获不少的.</p>
<p>由于是内部系统.也没怎么考虑兼容性.能在 chrome 顺利跑就问题不大了.</p>
<p>后续会继续优化</p>
<h2 id="放假了-过年了" class="heading"><a href="#%E6%94%BE%E5%81%87%E4%BA%86-%E8%BF%87%E5%B9%B4%E4%BA%86" aria-hidden="true"><span class="icon icon-link"></span></a>放假了, 过年了</h2>
<p>祝大家新年快乐 !</p>
]]></description><link>http://zwingz.github.io/posts/295960409.html</link><guid isPermaLink="false">295960409</guid><category><![CDATA[Vue]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Fri, 09 Feb 2018 18:10:56 GMT</pubDate></item><item><title><![CDATA[使用vuexStore.registerModule构建命令式组件]]></title><description><![CDATA[<h2 id="命令式组件" class="heading"><a href="#%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%BB%84%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a>命令式组件</h2>
<p>例如Notification, MessageBox, Alert, ConfirmBox 等等</p>
<p>这类组件都是通过命令式来调用.</p>
<p>例如<code class="language-text">elementUi</code>中<code class="language-text">this.$message</code>或者<code class="language-text">Message</code>来调用.</p>
<p>对于我们来说,<code class="language-text">this.$message</code>这种调用方法莫过于是最方便.因为不需要处处引入<code class="language-text">Message</code>或者在<code class="language-text">webpack</code>中配置插件使得<code class="language-text">Message</code>暴露于全局</p>
<p>那么我就从<code class="language-text">this.$message</code>这类讲起</p>
<h2 id="组件编写" class="heading"><a href="#%E7%BB%84%E4%BB%B6%E7%BC%96%E5%86%99" aria-hidden="true"><span class="icon icon-link"></span></a>组件编写</h2>
<p>其实也只是编写一个Comp组件, 这里不多说.</p>
<h2 id="接入方式" class="heading"><a href="#%E6%8E%A5%E5%85%A5%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>接入方式</h2>
<h3 id="第一种接入方式" class="heading"><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%8E%A5%E5%85%A5%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>第一种接入方式</h3>
<p>将<code class="language-text">Vue</code>组件挂载到一个<code class="language-text">dom</code>上,也就是将组件实例化.</p>
<p>然后将组件实例挂载命名空间中或者<code class="language-text">Vue.prototype</code>中,</p>
<p>这样相当于直接操作组件实例的<code class="language-text">methods</code>来改变组件的状态.</p>
<p><code class="language-text">ElementUI</code>使用的是这种方式.</p>
<p>无入侵式</p>
<h3 id="第二种接入方式" class="heading"><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%8E%A5%E5%85%A5%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>第二种接入方式</h3>
<p>这方式前提必须要使用Vuex, 因为他是依赖vuex.registerStore实现</p>
<p>关于registerStore请移步到<a href="https://vuex.vuejs.org/en/modules.html">文档</a>中</p>
<p>其实就是动态注册一个storeModule, 用来管理组件的状态.</p>
<p>所有操作都通过细改store的状态来引起组件的改变</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 引入组件</span>
<span class="token keyword">import</span> Comp <span class="token keyword">from</span> <span class="token string">'Comp.vue'</span>
<span class="token keyword">function</span> <span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">'compNameSpaceState'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    state<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    getters<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    mutations<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    actions<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>之后可以将通过对象将调用接口暴露出去</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">$compApi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处需要使用建投函数,确保this指向</span>
    <span class="token function-variable function">action</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'compNameSpaceState/compAction'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>接下来很简单,就是将$compApi.prototype中.</p>
<p>那么如何保证<code class="language-text">$compApi</code>中<code class="language-text">this</code>指向<code class="language-text">Vue</code>实例呢</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> bind <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token comment">// Vue.use() 会自动调用install方法,此时可以注册组件</span>
Comp<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 代理带vue原形上.可以通过this.$spin调用</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    $compApi<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 挂载到Vue.prototype中的$compApi</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bind<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 注册store</span>
          <span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">)</span>
          <span class="token comment">// 只需要绑定一次即可</span>
          <span class="token comment">// 绑定后可以将原来的$compApi覆盖掉</span>
          <span class="token comment">// 调用bind函数确保this指向</span>
          $compApi <span class="token operator">=</span> <span class="token function">$compApi</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          bind <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> $compApi
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 将组件注册为Vue全局组件</span>
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'Comp'</span><span class="token punctuation">,</span> Comp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Comp
</code></pre></div>
<p>最后一步则需要在App.vue将Comp挂载上去</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 这一步自动调用install, 会全局注册Comp</span>
<span class="token comment">// 但是在第一次调用$compApi时候才会进行registerStore.</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Comp<span class="token punctuation">)</span>
</code></pre></div>
<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- App.vue--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
</code></pre></div>
<p>这种方法是入侵式的</p>
<p>但是可以很方便的追踪组件状态, 而且实现起来也很方便.</p>
<p>在自己开发组件的时候可以考虑</p>
]]></description><link>http://zwingz.github.io/posts/294718179.html</link><guid isPermaLink="false">294718179</guid><category><![CDATA[Js]]></category><category><![CDATA[Vue]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Tue, 06 Feb 2018 11:04:40 GMT</pubDate></item><item><title><![CDATA[Eventloop中的microtask和macrotask]]></title><description><![CDATA[<h1 id="eventloop" class="heading"><a href="#eventloop" aria-hidden="true"><span class="icon icon-link"></span></a>EventLoop</h1>
<p>js是单线程的, 所有异步都需要经过Eventloop(事件循环).这里不介绍eventloop</p>
<p> 主要记录下eventloop中的microtask 和macrotask</p>
<h2 id="microtask" class="heading"><a href="#microtask" aria-hidden="true"><span class="icon icon-link"></span></a>microtask</h2>
<ul>
<li>process.nextTick</li>
<li>Promise</li>
<li>Object.observe</li>
<li>MutationObserver</li>
</ul>
<h2 id="macrotask" class="heading"><a href="#macrotask" aria-hidden="true"><span class="icon icon-link"></span></a>macrotask</h2>
<ul>
<li>setTimeout</li>
<li>setImmediate</li>
<li>setInterval</li>
<li>MessageChannel</li>
<li>UI rendering</li>
<li>网络I/O以及用户I/O</li>
<li>network</li>
</ul>
<h2 id="优先级" class="heading"><a href="#%E4%BC%98%E5%85%88%E7%BA%A7" aria-hidden="true"><span class="icon icon-link"></span></a>优先级</h2>
<ul>
<li>microtask > macrotask</li>
<li>process.nextTick > promise (process.nextTick只在node使用)</li>
<li>setTimeout和setImmediate在无IO操作下,两者执行顺序不确定,但是在IO操作下,setImmediate比setTimeout优先级高. 且setImmediate只在IE下有效</li>
</ul>
<h2 id="应用" class="heading"><a href="#%E5%BA%94%E7%94%A8" aria-hidden="true"><span class="icon icon-link"></span></a>应用</h2>
<p>Vue.nextTick源码中,分别使用了microtask和macrotask</p>
<p>在Vue2.4版本之前,默认都是使用microtask.优先判断是否支持promise,如果不支持则退回到MutationObserver,如果再不支持则回退到setTimeout</p>
<p>但在后续更新中,Vue已经修改nextTick实现方式.默认使用microtask, 同时也提供方法强制使用macrotask,例如由v-on绑定的事件处理.</p>
<p>原因就是因为microtask优先级太高.甚至高于事件冒泡. 而macrotask则会引起一些问题.</p>
<p>详情请看<a href="https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js#L20:4">Vue.nextTick源码</a></p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// Here we have async deferring wrappers using both micro and macro tasks.</span>
<span class="token comment">// In &lt; 2.4 we used micro tasks everywhere, but there are some scenarios where</span>
<span class="token comment">// micro tasks have too high a priority and fires in between supposedly</span>
<span class="token comment">// sequential events (e.g. #4521, #6690) or even between bubbling of the same</span>
<span class="token comment">// event (#6566). However, using macro tasks everywhere also has subtle problems</span>
<span class="token comment">// when state is changed right before repaint (e.g. #6813, out-in transitions).</span>
<span class="token comment">// Here we use micro task by default, but expose a way to force macro task when</span>
<span class="token comment">// needed (e.g. in event handlers attached by v-on).</span>
<span class="token keyword">let</span> microTimerFunc
<span class="token keyword">let</span> macroTimerFunc
<span class="token keyword">let</span> useMacroTask <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token comment">// Determine (macro) Task defer implementation.</span>
<span class="token comment">// Technically setImmediate should be the ideal choice, but it's only available</span>
<span class="token comment">// in IE. The only polyfill that consistently queues the callback after all DOM</span>
<span class="token comment">// events triggered in the same loop is by using MessageChannel.</span>
<span class="token comment">/* istanbul ignore if */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">macroTimerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
  <span class="token keyword">typeof</span> MessageChannel <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span>
  <span class="token punctuation">(</span><span class="token function">isNative</span><span class="token punctuation">(</span>MessageChannel<span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token comment">// PhantomJS</span>
    MessageChannel<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MessageChannelConstructor]'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> port <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2
  channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> flushCallbacks
  <span class="token function-variable function">macroTimerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">/* istanbul ignore next */</span>
  <span class="token function-variable function">macroTimerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Determine MicroTask defer implementation.</span>
<span class="token comment">/* istanbul ignore next, $flow-disable-line */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function-variable function">microTimerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>
    <span class="token comment">// in problematic UIWebViews, Promise.then doesn't completely break, but</span>
    <span class="token comment">// it can get stuck in a weird state where callbacks are pushed into the</span>
    <span class="token comment">// microtask queue but the queue isn't being flushed, until the browser</span>
    <span class="token comment">// needs to do some other work, e.g. handle a timer. Therefore we can</span>
    <span class="token comment">// "force" the microtask queue to be flushed by adding an empty timer.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// fallback to macro</span>
  microTimerFunc <span class="token operator">=</span> macroTimerFunc
<span class="token punctuation">}</span>
</code></pre></div>
]]></description><link>http://zwingz.github.io/posts/294602245.html</link><guid isPermaLink="false">294602245</guid><category><![CDATA[Js]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Tue, 06 Feb 2018 01:35:11 GMT</pubDate></item><item><title><![CDATA[多个git 配置ssh key]]></title><description><![CDATA[<h2 id="安装" class="heading"><a href="#%E5%AE%89%E8%A3%85" aria-hidden="true"><span class="icon icon-link"></span></a>安装</h2>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span>
<span class="token comment"># or</span>
<span class="token comment"># apt-get install git</span>

<span class="token comment">## 配置ssh-key</span>

<span class="token function">git</span> config --global user.name <span class="token string">''</span>
<span class="token function">git</span> config --global user.email <span class="token string">''</span>

ssh-keygen -t res -C <span class="token string">'email'</span>
<span class="token comment"># 然后就是自定义</span>
<span class="token comment"># 要不要密码随便你</span>
<span class="token comment"># 反正下面都会进行ssh-add</span></code></pre></div>
<p>上github或者gitlab, 进入setting,找到ssh-key, 点击new SSH Key 把id_rsa.pub内容粘贴进去就ok了</p>
<p><img src="https://user-images.githubusercontent.com/13031838/35666461-2aaa5d40-0765-11e8-9e62-1ae17cb933a2.png" alt="image"></p>
<h2 id="检查" class="heading"><a href="#%E6%A3%80%E6%9F%A5" aria-hidden="true"><span class="icon icon-link"></span></a>检查</h2>
<p><code class="language-text">ssh git@github.com</code></p>
<p><img src="https://user-images.githubusercontent.com/13031838/35666525-620a3544-0765-11e8-8590-1018bdabae20.png" alt="image"></p>
<h2 id="配置hosts" class="heading"><a href="#%E9%85%8D%E7%BD%AEhosts" aria-hidden="true"><span class="icon icon-link"></span></a>配置hosts</h2>
<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh
<span class="token function">vim</span> config

Host github.com
HostName github.com
User <span class="token function">git</span>
IdentityFile ~/.ssh/id_rsa_github

Host gitlab.com
HostName gitlab.com
User <span class="token function">git</span>
IdentityFile ~/.ssh/id_rsa_gitlab


<span class="token comment"># 注入密码,下次不需要再输密码(除非重启)</span>
ssh-add -k ~/.ssh/id_rsa_gitlab</code></pre></div>
<h3 id="简单快捷完成git配置了" class="heading"><a href="#%E7%AE%80%E5%8D%95%E5%BF%AB%E6%8D%B7%E5%AE%8C%E6%88%90git%E9%85%8D%E7%BD%AE%E4%BA%86" aria-hidden="true"><span class="icon icon-link"></span></a>简单快捷完成git配置了</h3>
]]></description><link>http://zwingz.github.io/posts/293431355.html</link><guid isPermaLink="false">293431355</guid><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Thu, 01 Feb 2018 07:37:09 GMT</pubDate></item><item><title><![CDATA[记一次webpack优化 --- 从babelrc和UglifyPlugin下手]]></title><description><![CDATA[<h2 id="优化前" class="heading"><a href="#%E4%BC%98%E5%8C%96%E5%89%8D" aria-hidden="true"><span class="icon icon-link"></span></a>优化前</h2>
<p>先来看优化前打包速度
大的第三方库大概有vue+axios+vueRouter+vuex+elementUI(datepicker, message两个插件)+jquery
打包总体积为2648k, 一共14个chunk(使用了异步路由)
<img src="https://user-images.githubusercontent.com/13031838/35665400-19f380fc-0761-11e8-944b-85a5117364c2.png" alt="image"></p>
<p>在我本地打包一次需要31s</p>
<p><img src="https://user-images.githubusercontent.com/13031838/35664714-26a6075a-075e-11e8-8df9-1cde8b4f1878.png" alt="image"></p>
<p>而在服务器打包时候则要70s以上, 这里就不贴图了. </p>
<h2 id="优化后" class="heading"><a href="#%E4%BC%98%E5%8C%96%E5%90%8E" aria-hidden="true"><span class="icon icon-link"></span></a>优化后</h2>
<p>优化后时间
打包总体积上升为2700k, 上升了50k</p>
<p><img src="https://user-images.githubusercontent.com/13031838/35665453-3ce893ea-0761-11e8-8d79-2c8b3555acb5.png" alt="image"></p>
<p>本地打包18s</p>
<p><img src="https://user-images.githubusercontent.com/13031838/35664879-c88ec336-075e-11e8-88c0-a61590c97cad.png" alt="image"></p>
<p>服务器打包时间40s</p>
<p><img src="https://user-images.githubusercontent.com/13031838/35664898-d966d888-075e-11e8-8e6b-70b4043afe8b.png" alt="image"></p>
<p><strong>提升很明显有没有</strong></p>
<h2 id="修改了哪些地方" class="heading"><a href="#%E4%BF%AE%E6%94%B9%E4%BA%86%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9" aria-hidden="true"><span class="icon icon-link"></span></a>修改了哪些地方?</h2>
<h3 id="uglifeplugin" class="heading"><a href="#uglifeplugin" aria-hidden="true"><span class="icon icon-link"></span></a>UglifePlugin</h3>
<p>主要修改地方还是在UglifyPlugin配置中
由于我是用的并不是webpack自带的,而是独立的<a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin">uglifyjs-webpack-plugin</a></p>
<p>其实官方使用的也是这个插件. 只不过官方使用的暂且不是最新版,而webpack4.0-beta已经使用此插件最新版本</p>
<p>用法很简单</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>如果使用默认配置,那么打包速度并不会有提升.</p>
<p>而且uglifyplugin在打包过程中其实也会进行一些压缩优化,比如内敛静态变量等等.</p>
<p>那么我们可以从这里面入手,去除一切不必要的压缩优化.可以提升压缩速度.</p>
<p>同时.我们需要开启parallel和cache选项,对压缩进行缓存和多线程执行</p>
<p>具体配置规则请参考官方文档<a href="https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options">UglifyOptions</a></p>
<p>我的最终配置如下</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript">    <span class="token keyword">new</span> <span class="token class-name">UglifyEsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            parallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            sourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            uglifyOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
                ecma<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
                <span class="token comment">// 详细规则</span>
                <span class="token comment">// https://github.com/mishoo/UglifyJS2/tree/harmony#minify-options</span>
                compress<span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 在UglifyJs删除没有用到的代码时不输出警告</span>
                    warnings<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 删除所有的 `console` 语句</span>
                    drop_console<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token comment">// 将()=>{return x} 转成 ()=>x</span>
                    <span class="token comment">// 关闭.eslint有做检查</span>
                    arrows<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 转换类似!!a ? b : c → a ? b : c</span>
                    <span class="token comment">// 关闭.eslint做检查</span>
                    booleans<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 转换由计算得来的属性名 {["computed"]: 1} is converted to {computed: 1}.</span>
                    <span class="token comment">// 关闭,eslint做检查</span>
                    computed_props<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 自动转换判断</span>
                    <span class="token comment">// e.g. a = !b &amp;&amp; !c &amp;&amp; !d &amp;&amp; !e → a=!(b||c||d||e) etc.</span>
                    <span class="token comment">// 关闭,请自行做规范</span>
                    comparisons<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 去掉死代码</span>
                    <span class="token comment">// 关闭.eslint做检查</span>
                    dead_code<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 关闭debugger</span>
                    <span class="token comment">// eslint做检查</span>
                    drop_debugger<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 自动进行静态算术计算</span>
                    <span class="token comment">// 开启</span>
                    evaluate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token comment">// 函数声明提升</span>
                    <span class="token comment">// 默认就是关闭,不需要开启</span>
                    hoist_funs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// For example: var o={p:1, q:2}; f(o.p, o.q); is converted to f(1, 2);</span>
                    <span class="token comment">// 不需要咯</span>
                    hoist_props<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 变量提升</span>
                    <span class="token comment">// 不需要咯</span>
                    hoist_vars<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">//  optimizations for if/return and if/continue</span>
                    <span class="token comment">// 不需要, eslint做检查</span>
                    if_return<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">/**
                     * 无法用言语表达,自行理解
                     * inline (default: true) -- inline calls to function with simple/return statement:
                        false -- same as 0
                        0 -- disabled inlining
                        1 -- inline simple functions
                        2 -- inline functions with arguments
                        3 -- inline functions with arguments and variables
                        true -- same as 3
                     */</span>
                    inline<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// join consecutive var statements</span>
                    <span class="token comment">// 就是将变量声明合并到一个var中</span>
                    <span class="token comment">// 关闭, eslin做检查</span>
                    join_vars<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 自动去除无用的function参数</span>
                    <span class="token comment">// 关闭. eslint做检查</span>
                    keep_fargs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">//  Pass true to prevent Infinity from being compressed into 1/0</span>
                    <span class="token comment">// 禁止将infinity转成1/0</span>
                    keep_infinity<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token comment">// optimizations for do, while and for loops when we can statically determine the condition.</span>
                    <span class="token comment">// 优化循环</span>
                    <span class="token comment">// 此处关闭,应该由开发者自行优化</span>
                    loops<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// negate "Immediately-Called Function Expressions" where the return value is discarded, to avoid the parens that the code generator would insert.</span>
                    <span class="token comment">// 自行体会</span>
                    negate_iife<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token comment">//  rewrite property access using the dot notation, for example foo["bar"] → foo.bar</span>
                    <span class="token comment">// 关闭.eslint检查</span>
                    properties<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 将只用到一次的function,通过inline方式插入</span>
                    <span class="token comment">// 关闭.开发者自行把控</span>
                    reduce_funcs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 将静态变量直接lnline紧代码里</span>
                    <span class="token comment">// 可以开启</span>
                    reduce_vars<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token comment">// 使用逗号运算符连接连续的简单语句</span>
                    <span class="token comment">// 自行把控</span>
                    sequences<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">/**
                     *  Pass false to disable potentially dropping functions marked as "pure". 
                     * A function call is marked as "pure" if a comment annotation \/*@__PURE__*\/ or \/*#__PURE__*\/ immediately precedes the call. 
                     * For example: \/*@__PURE__*\/foo();
                     * 就是关闭标注纯函数的注释了
                     */</span>
                    side_effects<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// 去掉重复和无法到达的switch分支</span>
                    <span class="token comment">// eslint做检查, 以及开发者把控</span>
                    switches<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// Transforms typeof foo == "undefined" into foo === void 0</span>
                    typeofs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span></code></pre></div>
<p>其实很多优化点都是可以通过eslint来检查,而不需要在压缩过程检查</p>
<p>再配合自身的开发习惯以及规范,可以去掉很多压缩检查, 压缩效率就能提升</p>
<p>但是带来的负面影响就是压缩体积会有上升/</p>
<p>因为对于第三方库来说,并不会安装项目配置的eslint来跑.自然就达不到要求.</p>
<p>再少了uglifyplugin的压缩优化,体积就会上升.</p>
<p>以我的例子来看,总体积上升了50k. 尚可以接受.</p>
<p>而打包时间足足提升了30s. </p>
<p>但可能也有人说上线打包不必在乎打包时间.</p>
<p>其实这些都看具体业务需求,以及自身的开发规范来配置.</p>
<p>重要的还是在打包速度和打包体积两者中找出一个最合适的平衡点</p>
<h3 id="babelrc" class="heading"><a href="#babelrc" aria-hidden="true"><span class="icon icon-link"></span></a>babelrc</h3>
<p>其实babel并不会影响到打包速度.我也只是顺便提下</p>
<p>我的配置如下</p>
<div class="gatsby-highlight" data-language="javascript"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
    <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            <span class="token string">"component"</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token string">"libraryName"</span><span class="token operator">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>
                <span class="token string">"styleLibraryName"</span><span class="token operator">:</span> <span class="token string">"theme-default"</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"transform-object-rest-spread"</span><span class="token punctuation">,</span> <span class="token string">"syntax-dynamic-import"</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"stage-2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"transform-runtime"</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">"test"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token string">"stage-2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"transform-runtime"</span><span class="token punctuation">,</span> <span class="token string">"istanbul"</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<p>我把babel配置区分成了三个阶段,开发,生产和测试.</p>
<p>在开发过程不使用preset,直接跑原生代码. </p>
<p>在生产环境则使用es2015的preset</p>
<p>也许这样能提高开发环境的编译速度? 暂时不清楚,因为没感觉.一向很快.</p>
<p>这也看个人喜好了.</p>
<h2 id="ps" class="heading"><a href="#ps" aria-hidden="true"><span class="icon icon-link"></span></a>ps</h2>
<p>eslint的作用真的很大很大.</p>
<p>但是在开发阶段使用eslint真的很烦很烦.</p>
<p>所以,我目前的做法就是在开发阶段关闭eslint检查.因为我的vscode有带插件提示</p>
<p>即便检查到有错误,也可以正常编译.</p>
<p>但是在commit的时候添加了一层pre-commit来对修改的文件执行eslint.</p>
<p>这样就确保上传到git的代码是经过eslint检查的</p>
<p>这样既能确保开发不被干扰,也能确保代码能按照规范.</p>
]]></description><link>http://zwingz.github.io/posts/293426099.html</link><guid isPermaLink="false">293426099</guid><category><![CDATA[Webpack]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Thu, 01 Feb 2018 07:13:03 GMT</pubDate></item><item><title><![CDATA[烹饪和烘焙的点滴]]></title><description><![CDATA[<p>突然想写些什么..
那就写下这周做了什么吃的..
除了晚餐之外.
这周做了特别的可能就是<strong>炸薯条</strong>, <strong>火烧云</strong>以及<strong>芒果千层</strong>了.
下面就大概回忆下过程</p>
<h2 id="炸薯条" class="heading"><a href="#%E7%82%B8%E8%96%AF%E6%9D%A1" aria-hidden="true"><span class="icon icon-link"></span></a>炸薯条</h2>
<p>  其实炸薯条本不是本人的意思, 只是女友说突然想吃薯条, 就在买菜的时候买多了一个土豆.
由于不是本人的意思,过程也只是大概记得.</p>
<ul>
<li>土豆去皮, 切成条</li>
<li>用保鲜袋装好,放冰箱冷冻(其实嘛.我也不知道这一步是不是必须,也可能是那晚我们吃得饱,所以才放冰箱,留到下次弄得)</li>
<li>先把薯条煮一边,放盐, 软了后捞出</li>
<li>倒掉水, 并擦干平底锅</li>
<li>放油,(新买的一瓶油我放了三分一)</li>
<li>油热了之后把薯条放进去炸就ok了..</li>
<li>炸完捞出可以再撒些盐. 然后放置一阵子就能吃了</li>
</ul>
<p>其实一开始全程都是女友在弄.只不过她炸的时候油放的太少了..然后跑过来跟我说像是在炒薯条..
于是乎我就自己上了..其实这也是我第一次炸薯条.
炸完之后油也只能倒掉.感觉很浪费.炸一个土豆用了1/3瓶油..
感觉以后都不会再炸东西了.除非量大. 这里就没图了.很简单的</p>
<h2 id="火烧云" class="heading"><a href="#%E7%81%AB%E7%83%A7%E4%BA%91" aria-hidden="true"><span class="icon icon-link"></span></a>火烧云</h2>
<p>  这个其实我上星期就有做过了.只不过做失败了.
其实就是面包再加工一下啦, 外表看起来逼格挺高. 吃起来也还ok</p>
<ul>
<li>材料(鸡蛋两个, 吐司(方包)4片, 炼奶, 沙拉酱)</li>
<li>蛋清分离, 用蛋清分离器分离, 将蛋清倒入无水碗中, 然后将蛋黄放另外一个碗(两个鸡蛋的蛋清可以放于同一个碗中, 蛋黄必须放于两个不同的碗, 同时蛋黄一定不能破, 一旦破了混入到了蛋清中,就不容易打发蛋清了, 上周失败就是因为分离的时候蛋黄破了, 导致打发失败)</li>
<li>将蛋清倒入打蛋盆中, 加入一勺糖(根据自己喜好添加), 使用电动打蛋器进行打发, 当出现纹路的时候, 再加入一勺糖, 继续打发, 当感觉打发出现阻力时候, 继续加入一勺糖, 继续打发. 直到达到硬性打发程度, 就是打蛋器提起来, 蛋清不会掉下来, 就像我们平常吃的奶油一样. 整个步骤一定不能有水, 有水就不容易打发了. 砂糖除了调味, 还能促进打发</li>
<li>此时我们有的东西就是打发了的蛋清,以及两个蛋黄</li>
<li>取一片吐司, 涂上一层炼奶, 再涂上一层沙拉酱(也可以是其他,也可以不要,看个人), 再取一片方包, 盖在上面.</li>
<li>用刮刀将打发的蛋清涂到上一步中的吐司上方, 一共取一般的蛋清, 并对其进行造型, 弄成你觉得好看的样子.</li>
<li>在蛋清中间挖个孔, 将蛋黄倒进去, 此时已经完成一个火烧云了.</li>
<li>另一个就根据上述步骤一样就行</li>
<li>烤箱150度预热5分钟</li>
<li>将面包放入烤箱15分钟即可</li>
<li>这时候的蛋黄其实是溏心蛋, 我个人是很喜欢</li>
</ul>
<p>就是由于上周失败了, 并且找到原因, 所以这周就铁了心要把它完成. 当然这里肯定有图了</p>
<ul>
<li>
<p>这是入烤箱前
<img src="https://zwing.site/imgur/645802.jpg"></p>
</li>
<li>
<p>烤完后
<img src="https://zwing.site/imgur/84359394.jpg">
味道还是不错的, 也挺简单.</p>
</li>
</ul>
<h2 id="芒果千层" class="heading"><a href="#%E8%8A%92%E6%9E%9C%E5%8D%83%E5%B1%82" aria-hidden="true"><span class="icon icon-link"></span></a>芒果千层</h2>
<p>做这个芒果千层, 耗时3小时, 也是不容易啊
这里先上图, 之后再补充制作过程
<img src="https://zwing.site/imgur/38760413.jpg"></p>
<h2 id="其他" class="heading"><a href="#%E5%85%B6%E4%BB%96" aria-hidden="true"><span class="icon icon-link"></span></a>其他</h2>
<p>其实烤箱双十一就购入了, 同时也购入了一批烘焙工具,从此入了烘焙的坑,
不入不知道, 一入深似海
这里就顺便贴下图吧.过程就先忽略了</p>
<ul>
<li>鸡蛋布丁
<img src="https://zwing.site/imgur/42554020.jpg"></li>
</ul>
<ul>
<li>西多士
<img src="https://zwing.site/imgur/69072942.jpg">
<img src="https://raw.githubusercontent.com/zWingz/imgur/master/52877777.jpg"></li>
</ul>
<ul>
<li>蛋挞
<img src="https://zwing.site/imgur/59916873.jpg">
<img src="https://zwing.site/imgur/70796582.jpg">
<img src="https://zwing.site/imgur/48233877.jpg"></li>
</ul>
<ul>
<li>风琴土豆
<img src="https://zwing.site/imgur/33495732.jpg"></li>
</ul>
]]></description><link>http://zwingz.github.io/posts/292217983.html</link><guid isPermaLink="false">292217983</guid><category><![CDATA[烘焙]]></category><category><![CDATA[生活]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Sun, 28 Jan 2018 16:34:04 GMT</pubDate></item><item><title><![CDATA[vue后台系统开发实践]]></title><description><![CDATA[<h1 id="vue后台系统开发实践" class="heading"><a href="#vue%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5" aria-hidden="true"><span class="icon icon-link"></span></a>Vue后台系统开发实践</h1>
<h2 id="依赖库" class="heading"><a href="#%E4%BE%9D%E8%B5%96%E5%BA%93" aria-hidden="true"><span class="icon icon-link"></span></a>依赖库</h2>
<ul>
<li>vue@2.4.4</li>
<li>vue-router@3.0.0</li>
<li>vuex@3.0.0</li>
<li>axios</li>
<li>element-ui</li>
</ul>
<h2 id="搭建流程" class="heading"><a href="#%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B" aria-hidden="true"><span class="icon icon-link"></span></a>搭建流程</h2>
<ol>
<li>
<p><a href="https://github.com/zWingz/vue-webpack-template">webpack-template</a></p>
</li>
<li>
<p>createApp.js, createRouter.js, store.js, http.js</p>
<ul>
<li>createaApp.js 多页时候用来配置各个页面相同的vue选项,比如配置api,mixin等等</li>
<li>createRouter.js 多页时候用到配置各个页面相同的路由选项,比如配置路由模式,路由钩子等等</li>
<li>store.js 配置全局状态管理.state,action,mutation,getter</li>
<li>http.js 配置异步请求, 例如: baseRoot, 请求钩子interceptors</li>
</ul>
</li>
<li>
<p>utils.js, ConstValue.js, mixin.js, registerComponent.js</p>
<ul>
<li>utils.js 工具类函数</li>
<li>ConstValue.js 常量,例如: isProduction, httpRoot(后端地址)</li>
<li>mixin.js 混合</li>
<li>registerComponent.js 将经常用到的组件在这里引入并注册为全局组件</li>
</ul>
</li>
<li>
<p>route.js, app.js</p>
<ul>
<li>route/.js 具体的路由</li>
<li>app.js 每个页面的app启动页</li>
</ul>
</li>
<li>
<p>page-view&#x26;components</p>
<ul>
<li>页面级内容</li>
</ul>
</li>
</ol>
<h2 id="后台大致内容" class="heading"><a href="#%E5%90%8E%E5%8F%B0%E5%A4%A7%E8%87%B4%E5%86%85%E5%AE%B9" aria-hidden="true"><span class="icon icon-link"></span></a>后台大致内容</h2>
<ul>
<li>登录/权限</li>
<li>列表页</li>
<li>详情/审核页</li>
<li>创建/修改页</li>
</ul>
<h2 id="问题分析" class="heading"><a href="#%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90" aria-hidden="true"><span class="icon icon-link"></span></a>问题分析</h2>
<ul>
<li>
<p>登录/权限</p>
<ul>
<li>登录态的保存.以及用户权限的判断<ol>
<li>后端设置sessionid, 前端只需要在axios配置withCredentials=true.(此方法在Safari行不通,safari默认选项(仅)允许来自我访问的网站, 由于后端地址不是直接访问.所以safari不会带上cookie去请求.部署的时候将前后端都部署到同一个nginx就可以解决)</li>
<li>json web token(jwt)</li>
<li>后端生成token,并由保存在http header.</li>
<li>权限判断一种是导航显示控制,一种是直接通过url进去后的判断</li>
</ol></li>
</ul>
</li>
<li>
<p>列表页</p>
<ul>
<li>
<p>内容过多.会引起页面滚动.表头以及两侧需固定</p>
<ol>
<li>全局滚动.(表格过大.页面整体会被撑开)</li>
<li>容器内滚动.(表格显得很狭窄)</li>
<li>垂直方向全局滚动, 水平方向是局部滚动. (页面宽度不被撑开, 加虚拟滚动条辅助时候水平滚动不需要拉到最后)</li>
<li><a href="https://zwingz.github.io/vue-fixed-table/release/demo.html">Demo</a></li>
</ol>
</li>
<li>
<p>有很多的查询条件</p>
<ul>
<li>查询需要被保留,同时url需要被查询条件修改(<code class="language-text">$router.replace</code>)</li>
</ul>
</li>
<li>
<p>每一个列表页类似.但又有不同,主要差异在于查询条件以及表格内容</p>
<ul>
<li>使用mixin</li>
<li>设置查询query</li>
<li>根据query以及url获取数据</li>
<li>对数据进行处理,比如: loading态设为false, 初始化多选等. 看具体</li>
</ul>
</li>
<li>
<p>列表页/详情页切换后列表数据的保存(保留列表页状态)</p>
<ul>
<li>vuex(全局状态管理, 写起来会很多,一个页面一个state,action,mutation,getters)</li>
<li>keepAlive(active/mounted获取数据, active会导致数据次数过多, mounted会导致数据不同步. 此时可以使用trigger,主动触发列表页拉取数据)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>详情页/审核页</p>
<ul>
<li>
<p>数据展示形式类似. 形如: label: content;</p>
<ul>
<li>声明式会导致页面重复内容过多</li>
<li>封装Field组件,通过js去配置数据展示</li>
</ul>
</li>
<li>
<p>布局类似</p>
<ul>
<li>这是无解的,除非真的很像很像.就可以用mixin解决</li>
</ul>
</li>
</ul>
</li>
<li>
<p>创建/修改页</p>
<ul>
<li>
<p>数据形式类似. 形如: label: form</p>
<ul>
<li>声明式同样导致重复内容过多</li>
<li>依然使用封装的Field组件,通过js去配置form.</li>
</ul>
</li>
<li>
<p>数据验证. 简单点就是能否提交</p>
<ul>
<li>要么逐个验证</li>
<li>要么简单粗暴添加一个canSave的computed.保证数据不为空</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="组件" class="heading"><a href="#%E7%BB%84%E4%BB%B6" aria-hidden="true"><span class="icon icon-link"></span></a>组件</h2>
<ul>
<li>
<p>Table(如上所说) <a href="https://zwingz.github.io/vue-fixed-table/release/demo.html">Demo</a></p>
</li>
<li>
<p>LoadingBar(顶部的进度条,主要是切换路由时候出现,挂在beforeEach和afterEach中调用, 有异步路由时候建议使用)</p>
</li>
<li>
<p>Message(消息提示)</p>
<h4 id="实现方式" class="heading"><a href="#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F" aria-hidden="true"><span class="icon icon-link"></span></a>实现方式</h4>
<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">  1. 使用createElement创建dom元素,并且把message组件挂载上去即可,不过需要使用到vue完整版
  2. 将组件挂在到App.vue中,并使用vuex管理其状态. 可以在初次调用message时候才注册store</code></pre></div>
</li>
<li>
<p>Modal 没什么好说.哪里用到就声明一个Modal.</p>
</li>
<li>
<p>Confirm(确认式提升,与message一样的实现方式)</p>
</li>
<li>
<p>AsyncButton(会触发异步操作的按钮,监听异步请求的路由,当请求未结束时button处于loading态.)</p>
</li>
<li>
<p>AutoCompleteInput(带搜索建议的Input. 可以封装多装搜索框)</p>
</li>
<li>
<p>Panel (可收缩面包.很简单)</p>
</li>
<li>
<p>Field (label: content\form; 类型展示组件)</p>
</li>
<li>
<p>Pagination (分页,很简单)</p>
</li>
<li>
<p>Tree (树, 使用递归组件即可, 如果要做节点多选, 管理选择状态会比较麻烦.)</p>
</li>
<li>
<p>Select, Checkbox, Radio, Switch (自定义组件v-model即可,简单)</p>
</li>
<li>
<p>Spin (请求时间很长的时候, 可以弹出model,并构建一个假的进度条. 上传文件的时候也能用到,当然这时候的进度是真实的.通过onprogress获取)</p>
</li>
<li>
<p>BackToTop (回到顶部, 加个贝塞尔动画就好了)</p>
</li>
<li>
<p>Scroller (自定义非原生滚动条, 建议直接用css来设置原生scroll样式.目前应该firefox不支持设置原生滚动条样式)</p>
</li>
<li>
<p>Img (hover时候出现蒙层.点击时候出现查看器)</p>
</li>
</ul>
<h2 id="建议" class="heading"><a href="#%E5%BB%BA%E8%AE%AE" aria-hidden="true"><span class="icon icon-link"></span></a>建议</h2>
<ol>
<li>
<p>如果对组件进行for命令,必须加上:key,这是官方指定.
但对于原生dom进行for循环时候.其实可以不加:key,或者使用index作为key.
一旦设置了key,只有key得值不一样,会直接销毁重建dom. 那么用index作为key的话,则只会更新dom而不会销毁重建</p>
</li>
<li>
<p>任何通过addEventListeners添加的监听事件,销毁时最好使用removeEventListeners给去掉</p>
</li>
<li>
<p>如果不需要运行时构建,可以在webpack中指定使用vue.runtime.js, 会剩了几十k体积</p>
</li>
<li>
<p>sass-loader前再加一层sass-resources-loader可以将一些变量或者方法全局引入,那就不用到处import了.</p>
</li>
</ol>
<div class="gatsby-highlight" data-language="javascrit"><pre class="language-javascrit"><code class="language-javascrit">    {
        loader: &#39;sass-resources-loader&#39;,
        options: {
            resources: [path.resolve(__dirname, &#39;../src/sass/variable.scss&#39;)]
        }
    }</code></pre></div>
<h2 id="安利" class="heading"><a href="#%E5%AE%89%E5%88%A9" aria-hidden="true"><span class="icon icon-link"></span></a>安利</h2>
<p><a href="https://fundebug.com/">Fundebug</a></p>
<p><a href="https://www.easy-mock.com/">EasyMock</a></p>
<p><a href="http://apizza.cc/account">Apizza</a></p>
]]></description><link>http://zwingz.github.io/posts/275254986.html</link><guid isPermaLink="false">275254986</guid><category><![CDATA[Js]]></category><category><![CDATA[Webpack]]></category><category><![CDATA[Vue]]></category><category><![CDATA[Front End]]></category><dc:creator><![CDATA[zWingz]]></dc:creator><pubDate>Mon, 20 Nov 2017 07:02:07 GMT</pubDate></item></channel></rss>